"use strict";(self.webpackChunktinaeldevresse=self.webpackChunktinaeldevresse||[]).push([[2755],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return p}});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),h=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=h(a),p=o,m=d["".concat(l,".").concat(p)]||d[p]||u[p]||i;return a?n.createElement(m,r(r({ref:t},c),{},{components:a})):n.createElement(m,r({ref:t},c))}));function p(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var h=2;h<i;h++)r[h]=a[h];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2503:function(e,t,a){a.d(t,{Z:function(){return u}});var n=a(3117),o=a(7294),i=a(6010),r=a(5999),s=a(6668),l=a(9960),h="anchorWithStickyNavbar_LWe7",c="anchorWithHideOnScrollNavbar_WYt5";function u(e){let{as:t,id:a,...u}=e;const{navbar:{hideOnScroll:d}}=(0,s.L)();if("h1"===t||!a)return o.createElement(t,(0,n.Z)({},u,{id:void 0}));const p=(0,r.I)({id:"theme.common.headingLinkTitle",message:"Direct link to {heading}",description:"Title for link to heading"},{heading:"string"==typeof u.children?u.children:a});return o.createElement(t,(0,n.Z)({},u,{className:(0,i.Z)("anchor",d?c:h,u.className),id:a}),u.children,o.createElement(l.Z,{className:"hash-link",to:`#${a}`,"aria-label":p,title:p},"\u200b"))}},4501:function(e,t,a){a.d(t,{N:function(){return r},x:function(){return s}});var n=a(3117),o=a(7294),i=a(2503);const r=e=>{let{children:t,...a}=e;return o.createElement(i.Z,(0,n.Z)({as:"h2"},a),t)},s=e=>{let{children:t,...a}=e;return o.createElement(i.Z,(0,n.Z)({as:"p"},a),t)}},9411:function(e,t,a){a.d(t,{Z:function(){return r}});var n=a(7294),o="container_KXSz",i="legend_Ecw3";function r(e){let{data:t,children:a}=e;return t||a?n.createElement("figure",null,t&&function(e){if("object"!=typeof e||!e.type)return n.createElement(n.Fragment,null);switch(e.type){case"image":case"img":return e.url?n.createElement("a",{href:e.url,target:"_blank"},n.createElement("img",e)):n.createElement("img",e);case"video":return n.createElement("video",{controls:!0,width:e.width},e.sources&&Array.isArray(e.sources)?e.sources.map((e=>n.createElement("source",{src:e.src,type:e.type}))):n.createElement("source",e));case"audio":return n.createElement("audio",{controls:!0},e.sources&&Array.isArray(e.sources)?e.sources.map((e=>n.createElement("source",{src:e.src,type:e.type}))):n.createElement("source",e));case"html":return n.createElement("div",{className:o},n.createElement("iframe",e));default:return n.createElement("object",{data:e.value,width:e.width,height:e.height})}}(t),n.createElement("figcaption",{className:i},a)):n.createElement(n.Fragment,null)}},9807:function(e,t,a){a.d(t,{Z:function(){return y}});var n=a(7294),o=a(9163),i=a(3868),r=a.n(i),s=a(5999),l="formContainer_ssZr",h="inputContainer_rIzC",c="input_xw7i",u="submit_jbGj",d="status_Xmiw",p="success_K3DK",m="sending_s6rj",g="error_ltts";const f=e=>{let t,{status:a,message:o,onValidated:i}=e;const f=()=>t&&t.value.indexOf("@")>-1&&r()(t.value)&&i({EMAIL:t.value});return(0,n.useEffect)((()=>{a&&"success"===a&&(t.text="")}),[a]),n.createElement("div",{className:l},n.createElement("h3",null,n.createElement(s.Z,{id:"newsletter.title",description:"The newsletter title"},"Stay up to date, subscribe to my newsletter!")),n.createElement("div",{className:h},n.createElement("input",{className:c,ref:e=>t=e,type:"email",placeholder:(0,s.I)({id:"newsletter.placeholder",message:"Enter your email address",description:"The placeholder within the input"}),onKeyDown:e=>"Enter"===e.key?f():null,required:!0,autoComplete:"email"}),n.createElement("a",{className:u+" tooltip",rel:"noopener",onClick:f,type:"submit"},n.createElement("svg",{"aria-hidden":"true",focusable:"false","data-prefix":"far","data-icon":"paper-plane",className:"svg-inline--fa fa-paper-plane fa-w-16",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},n.createElement("path",{fill:"currentColor",d:"M440 6.5L24 246.4c-34.4 19.9-31.1 70.8 5.7 85.9L144 379.6V464c0 46.4 59.2 65.5 86.6 28.6l43.8-59.1 111.9 46.2c5.9 2.4 12.1 3.6 18.3 3.6 8.2 0 16.3-2.1 23.6-6.2 12.8-7.2 21.6-20 23.9-34.5l59.4-387.2c6.1-40.1-36.9-68.8-71.5-48.9zM192 464v-64.6l36.6 15.1L192 464zm212.6-28.7l-153.8-63.5L391 169.5c10.7-15.5-9.5-33.5-23.7-21.2L155.8 332.6 48 288 464 48l-59.4 387.3z"})),n.createElement("span",{className:"tooltipText"},"Submit!"))),"sending"===a&&n.createElement("div",{className:`${d} ${m}`},n.createElement(s.Z,{id:"newsletter.sending",description:"The text stating the email is being registered in the newsletter list"},"Sending...")),"error"===a&&n.createElement("div",{className:`${d} ${g}`,dangerouslySetInnerHTML:{__html:o}}),"success"===a&&n.createElement("div",{className:`${d} ${p}`,dangerouslySetInnerHTML:{__html:o}}))};function y(e){let{url:t}=e;return n.createElement(o.Z,{url:t,render:e=>{let{subscribe:t,status:a,message:o}=e;return n.createElement(f,{status:a,message:o,onValidated:e=>t(e)})}})}},1324:function(e,t,a){a.d(t,{Z:function(){return i}});var n=a(7294),o=a(5999);function i(){return n.createElement("div",{className:"center"},n.createElement("span",{className:"italic"},n.createElement(o.Z,{id:"reminder",description:"The text stating that what is written in this website is my own opinions and only mine"},"Just a quick reminder: the opinions expressed here are stricly my own. They do not represent the opinions or views of my current employer nor any of my previous ones.")))}},2147:function(e,t,a){a.d(t,{Z:function(){return l}});var n=a(7294),o=a(5742),i=a(2263),r=a(4996);function s(e){const{siteConfig:t}=(0,i.Z)();let{url:a}=t||{};return`${a}${(0,r.Z)(e)}`}function l(e){let{uri:t,image:a,type:r}=e;const{siteConfig:l}=(0,i.Z)(),{projectName:h,customFields:{mType:c,twitterName:u}}=l,d=r||c,p=a?s(a):null,m=s(t);return n.createElement(n.Fragment,null,n.createElement(o.Z,null,m&&n.createElement("link",{rel:"canonical",href:m}),m&&n.createElement("meta",{property:"og:url",content:m}),p&&n.createElement("meta",{property:"og:image",content:p}),d&&n.createElement("meta",{property:"og:type",content:d}),h&&n.createElement("meta",{property:"og:site_name",content:h}),u&&n.createElement("meta",{property:"twitter:site",content:`@${u}`}),p&&n.createElement("meta",{name:"twitter:image",content:p}),p&&n.createElement("meta",{name:"twitter:image:alt",content:"Banner image"})))}},9353:function(e,t,a){a.r(t),a.d(t,{assets:function(){return g},contentTitle:function(){return p},default:function(){return w},frontMatter:function(){return d},metadata:function(){return m},toc:function(){return f}});var n=a(3117),o=(a(7294),a(3905)),i=a(9411),r=a(2147),s=a(1324),l=a(9807),h=a(3089),c=a(4501);function u(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];return t[Math.floor(Math.random()*t.length)]}const d={slug:"unit-testing",title:"Unit Testing",tags:["test","unit test","programming"],description:'Today\'s article is done in joint effort with my former colleague and mentor <a href="https://www.linkedin.com/in/guillaumefaas/" target="_blank" rel="noreferrer noopener nofollow">Guillaume Faas</a> (\ud83d\udd39) in the form of an interview of a developer. Please join me to thank him for his incredible involvement in the writing of this post! We both hope you are gonna love it as much as we loved writing it.',image:"img/unit-testing.jpg"},p=void 0,m={permalink:"/blog/unit-testing",editUrl:"https://github.com/hunteroi/tinaeldevresse.eu/tree/master/blog/2022-01-01-unit-testing.mdx",source:"@site/blog/2022-01-01-unit-testing.mdx",title:"Unit Testing",description:'Today\'s article is done in joint effort with my former colleague and mentor <a href="https://www.linkedin.com/in/guillaumefaas/" target="_blank" rel="noreferrer noopener nofollow">Guillaume Faas</a> (\ud83d\udd39) in the form of an interview of a developer. Please join me to thank him for his incredible involvement in the writing of this post! We both hope you are gonna love it as much as we loved writing it.',date:"2022-01-01T00:00:00.000Z",formattedDate:"January 1, 2022",tags:[{label:"test",permalink:"/blog/tags/test"},{label:"unit test",permalink:"/blog/tags/unit-test"},{label:"programming",permalink:"/blog/tags/programming"}],readingTime:25.985,hasTruncateMarker:!0,authors:[],frontMatter:{slug:"unit-testing",title:"Unit Testing",tags:["test","unit test","programming"],description:'Today\'s article is done in joint effort with my former colleague and mentor <a href="https://www.linkedin.com/in/guillaumefaas/" target="_blank" rel="noreferrer noopener nofollow">Guillaume Faas</a> (\ud83d\udd39) in the form of an interview of a developer. Please join me to thank him for his incredible involvement in the writing of this post! We both hope you are gonna love it as much as we loved writing it.',image:"img/unit-testing.jpg"},prevItem:{title:"What architecture do I use for my projects?",permalink:"/blog/why-did-i-switch-to-clean-architecture"},nextItem:{title:"What is a Container?",permalink:"/blog/what-is-a-container"}},g={authorsImageUrls:[]},f=[{value:"Presentation",id:"presentation",level:2},{value:"The topic",id:"topic",level:2},{value:"First encounter",id:"first-encounter",level:3},{value:"What is it",id:"what-is-it",level:3},{value:"Where is it in the tests hierarchy",id:"hierarchy-position",level:3},{value:"Objective of unit testing",id:"objective",level:3},{value:"Pros and cons",id:"pros-and-cons",level:3},{value:"Test Coverage",id:"test-coverage",level:3},{value:"The cost",id:"cost",level:3},{value:"In depth",id:"details",level:2},{value:"Black box &amp; white box, what is that",id:"black-and-white-boxes",level:3},{value:"How to write them efficiently",id:"how-to-write",level:3},{value:"Tips to start",id:"tips-to-start",level:3},{value:"Bad Smells",id:"bad-smells",level:3},{value:"To go further",id:"to-go-further",level:2},{value:"Librairies to simplify the work",id:"libraries",level:3},{value:"Test Driven Development",id:"what-is-tdd",level:3},{value:"Test &amp;&amp; Commit || Revert ",id:"what-is-tcr",level:3},{value:"Conclusion",id:"conclusion",level:2}],y={toc:f};function w(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("a",{href:"/blog/unit-testing"},(0,o.kt)(i.Z,{data:{src:"/img/unit-testing.jpg",alt:"Unit tests",type:"image"},mdxType:"Figure"})),(0,o.kt)("p",null,"Today's article is done in joint effort with my former colleague and mentor ",(0,o.kt)("a",{href:"https://www.linkedin.com/in/guillaumefaas/",target:"_blank",rel:"noreferrer noopener nofollow"},"Guillaume Faas"),"\n(\ud83d\udd39) in the form of an interview of a developer."),(0,o.kt)("p",null,"Please join me to thank him for his incredible involvement in the writing of this post! We both hope you are gonna love it as much as we loved writing it."),(0,o.kt)(r.Z,{uri:"blog/unit-testing",image:"img/unit-testing.jpg",type:"article",mdxType:"SEO"}),(0,o.kt)("hr",null),(0,o.kt)(s.Z,{mdxType:"Reminder"}),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},'tldr; Do katas with the "Test Driven Development" methodology!')),(0,o.kt)(c.N,{id:"presentation",mdxType:"AnchoredH2"},"Presentation"),(0,o.kt)(c.x,{mdxType:"AnchoredP"},"\ud83d\udd38 Hey Guillaume ! Can you introduce yourself please?"),(0,o.kt)("p",null,"\ud83d\udd39 Hello Tina\xebl! Thank you for inviting me to speak on your blog. My name is Guillaume Faas and I am a .NET expert / Software Craftsman, currently working at ",(0,o.kt)("a",{parentName:"p",href:"https://squaremiled.com/"},"Squaremiled S.A."),".\nI've been building softwares since 10 years or so, in various environments and business sectors."),(0,o.kt)(c.N,{id:"topic",mdxType:"AnchoredH2"},"The topic!"),(0,o.kt)(c.x,{mdxType:"AnchoredP"},"\ud83d\udd38 What are we going to talk about today?"),(0,o.kt)("p",null,"\ud83d\udd39 What do you think? It seems someone did not read the post's title. We are going to talk about ",(0,o.kt)("strong",{parentName:"p"},"unit testing"),"!"),(0,o.kt)(c.x,{id:"first-encounter",mdxType:"AnchoredP"},"\ud83d\udd38 When did you first encounter unit testing?"),(0,o.kt)("p",null,"\ud83d\udd39 It was a long time ago in a galaxy far, far away... I barely had a few years of experience.\nI've been working in the same company for most of my career and, compared to my day-to-day, I thought I had seen it all.\nI started looking online in guideliens, best practices, patterns and so on... I came across a lot of exciting and above all new topics.\nI seemed like I stepped in a new world that had nothing to do with my daily life in which I was stuck. The ",(0,o.kt)("em",{parentName:"p"},"testing")," was obviously one of those topics.\nHowever, I quickly realised that I had to progress in other subjets before I could introduce tests in my projects. It took me quite a long time before I was really fit to work in a test-driven approach."),(0,o.kt)(c.x,{id:"what-is-it",mdxType:"AnchoredP"},"\ud83d\udd38 Ok! However, just not to lose our readers... can you explain what a unit test is please?"),(0,o.kt)("p",null,"\ud83d\udd39 Yes, of course! A unit test is a test that verifies a ",(0,o.kt)("em",{parentName:"p"},"unit of code"),". This concept of unit of code varies according to the testing schools.\nThe London (or Mockist) School will see it as the smallest chunk of code so we are talking about a class or a method.\nOn the other hand, the Detroit (or Classicist) School will see it as a behavior so a group of classes or methods.\nFor the most curious of you, here's an ",(0,o.kt)("a",{parentName:"p",href:"https://medium.com/@adrianbooth/test-driven-development-wars-detroit-vs-london-classicist-vs-mockist-9956c78ae95f"},"article")," which gives details on the differences between both schools. I want to clarify that no school is better than the other, each one having its pros and cons.\nIt's only a matter of preference and compromise.\nThe main difference is mainly the size of your ",(0,o.kt)("em",{parentName:"p"},"System Under Test")," (SUT) and the relationship between the different collaborators."),(0,o.kt)("p",null,"But in the end, a unit test is simply ",(0,o.kt)("strong",{parentName:"p"},"a piece of code validating that another piece of code has the expected result and/or side effect against a given scenario"),"."),(0,o.kt)(c.x,{id:"hierarchy-position",mdxType:"AnchoredP"},'\ud83d\udd38 Alright. Where is it in this "test hierarchy"?'),(0,o.kt)("p",null,"\ud83d\udd39 It looks like the Agile Testing Pyramid but from left to right instead of bottom to top.\nThe more on the left, the smaller your scope is and the most numerous and faster your tests will be.\nIf you read it the other way and apply a reverse logic, it works too."),(0,o.kt)("p",null,'We are on the "unit" part for this topic since there is technically nothing smaller than a unit. A unit test should be executed on a standalone basis in a sandboxed environment.\nThat is, a unit test has no impact on the outside of its scope, and if you run several of them in parallel, they must not have any side effect between them.'),(0,o.kt)("p",null,'This finally means that in a unit test: we avoid reaching a database, making HTTP requests, accessing file system, etc. In the same way, we are not going to contact other dependencies of the solution.\nWe strictly stay "internal" to the unit.'),(0,o.kt)(i.Z,{data:{src:"/img/software-testing-types.png",alt:"Types of Software Testing",type:"image"},mdxType:"Figure"}),(0,o.kt)("p",null,"Here are a few points on the ",(0,o.kt)("em",{parentName:"p"},"functional testing")," part:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'unit testing is to check that a component works well. It is the fastest, we will talk about "fast feedback loop" ;'),(0,o.kt)("li",{parentName:"ul"},"integration testing is to check that several components work well together ;"),(0,o.kt)("li",{parentName:"ul"},"user acceptance testing consists of verifying the whole application while avoiding contact with external dependencies (eg: requests to external providers).\nThis is the most representative test, probably the one that has the most value on the product scale as it validates business requirements.")),(0,o.kt)("p",null,"Note that you don't have to implement them all. We could have a test suite only composed of tests from a single category.\nBut it should be borne in mind that our test suite will not be the most effective."),(0,o.kt)(c.x,{mdxType:"AnchoredP"},"\ud83d\udd38 Nice! But why is testing not used everywhere in the profesionnal world?"),(0,o.kt)("p",null,"\ud83d\udd39 In reality, a large part of developers write little to no tests. In addition, integration tests are less common than unit tests because they are more complex to write.\nIn the end, this task is often seen as a chore or an extra step that we will only do if we have time."),(0,o.kt)(i.Z,{data:{src:u("https://miro.medium.com/max/600/1*xHibbXdcePT0GtpeZRgxSA.gif","https://media4.giphy.com/media/hqq505vU9iHCOGySD5/giphy.gif","https://media1.giphy.com/media/VXmWbcDSj2yqnsXUrF/giphy.gif"),alt:"GIF on integration tests",type:"image"},mdxType:"Figure"}),(0,o.kt)("p",null,"Uncle Bob also spoke about it at a conference in London in 2018:"),(0,o.kt)(i.Z,{data:{type:"html",width:"560",height:"315",src:"https://www.youtube.com/embed/17vTLSkXTOo?start=552&end=720",title:"YouTube video player of SC London Conference 2018",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0},mdxType:"Figure"}),(0,o.kt)(c.x,{id:"objective",mdxType:"AnchoredP"},"\ud83d\udd38 What is the objective of unit testing and when should it be applied?"),(0,o.kt)("p",null,"\ud83d\udd39 The goal is quite simple: it's to show that a method works as expected. That is, you are going to have an expected behavior. For example, a method ",(0,o.kt)("inlineCode",{parentName:"p"},"getSomething")," should return you something.\nYou are thus going to test different scenarios and check that the method always behaves the right way."),(0,o.kt)("p",null,'As for the "when", it\'s even simpler: you need to apply unit testing whenever you have some logic somewhere.'),(0,o.kt)(c.x,{id:"pros-and-cons",mdxType:"AnchoredP"},"\ud83d\udd38 Alrighty! What are the pros and cons of such thing?"),(0,o.kt)("p",null,"\ud83d\udd39 As previously said, you write code to test code. Seen like this, it surely looks like additional workload but there are realy interests behind!"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The unit test acts as a ",(0,o.kt)("strong",{parentName:"li"},"safety net against regressions"),".")),(0,o.kt)("p",null,"The refactoring stage systematically occurs in a projet. The problem is, when you start changing something, there is always ",(0,o.kt)("strong",{parentName:"p"},"a risk of regression"),".\nWe talk about regression when something that used to work does not anymore due to some changes.\nIt's precisely here that a unit test intervene: it guarantees that your components always work as expected. If anything does not work anymore after a refactoring, the test suite is going to display erroneous code with a beautiful red dot.\nAnd that, from the point of view of a developer, it's huge! It means you can be much more relaxed and spend less time checking that your changes did not have undesirable effect on the rest of the features."),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Writing tests improves the ",(0,o.kt)("strong",{parentName:"li"},"code quality")," of your app.")),(0,o.kt)("p",null,"It is related to the above that we have just discussed. It is likely that the readers have already encountered a similar situation:\nwhen talking about refactoring to a Product Owner or a Product Manager, the first fear is always that is not working anymore.\nIf you are covered by a test suite, you are not afraid of refactoring. It's even the opposite, ",(0,o.kt)("strong",{parentName:"p"},"you are encouraged to refactor regularly")," while being protected."),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"A test suite becomes what we call ",(0,o.kt)("strong",{parentName:"li"},"a living documentation"),".")),(0,o.kt)("p",null,"When we talk about documentation, we might all have commentaries in mind. The problem is that they are never up to date with the rest of the code. The code evolves, the documentation does not.\nHowever, your unit test will always be up to date. If it wasn't, your test suite wouldn't give you the green light to go further."),(0,o.kt)("p",null,"It's even more interesting when^in the context of the arrival of a new developer on the project. Rather than reading all the code of a method to know what it does, they can just look at the different tests for that specific method.\nEach behavior will be represented by a test with an explicit naming on the scenario and expected result (eg: ",(0,o.kt)("inlineCode",{parentName:"p"},"GetItem_ShouldReturnNotFoundResult_GivenItemIsMissing"),"). ",(0,o.kt)("strong",{parentName:"p"},"It makes the onboarding process easier!")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"It ",(0,o.kt)("strong",{parentName:"li"},"reduces the bug detection time"),".")),(0,o.kt)("p",null,'We mentioned the concept of "short feedback loop" earlier. Unit tests are really fast to execute, they give an almost instantaneous feedback on the health of the solution.\nThis means that we need to regularly execute them. Let\'s say we have a button (or a shortcut) that gives us a Green/Red status in a few seconds. Activating this button must become systematic.'),(0,o.kt)("p",null,"It already has an interest for us developers but that's not all. We'll talk about it later!"),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"It is not a direct advantage but more like a side effect: ",(0,o.kt)("strong",{parentName:"li"},"testing makes you better"),".")),(0,o.kt)("p",null,"To ensure you write tests that provide real value, there are certain principles that you need to follow. You must always have a certain layer of abstraction to ",(0,o.kt)("em",{parentName:"p"},"mock")," your dependencies, you must be able to inject them, you must limit the responsibilities of your components, etc.\nIn fact, you will force yourself to apply several principles regularly (eg: SOLID). Suddenly, it forces you to break your components, to decouple them, to think about their interactions and responsibilities. In short, to think and ask yourself a lot of questions.\nCasually, we are talking about ",(0,o.kt)("em",{parentName:"p"},"code design"),'! And so, action-reaction: you get better over time. Sounds very "Happy End" but you know where I\'m going with this.'),(0,o.kt)("p",null,'\ud83d\udd38 And as it is not that much introduced in companies, it\'s kinda "new" and motivates to learn more!'),(0,o.kt)("p",null,"\ud83d\udd39 I agree with you on the novelty aspect but it only remains present when the subject is discovered. And there's an interpretive part to it all: some (like you) see it as something interesting. Others see it as a chore or extra pressure.\nYou will always find people resistant to testing for a variety of reasons. Perhaps we will have the opportunity to address the reasons that are generally mentioned..."),(0,o.kt)("p",null,"To get back to the question, here are the cons that come to my mind:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Already mentioned, but there are pre-requisites: you have to understand the foundation of the Object-Oriented, dependency injection, ",(0,o.kt)("a",{parentName:"li",href:"https://www.digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design"},"SOLID")," principles, etc."),(0,o.kt)("li",{parentName:"ol"},"The fact that there are few projects with real test suites makes learning less accessible. The same goes for a coach passionate about this subject."),(0,o.kt)("li",{parentName:"ol"},"There's a fairly steep learning/progression curve. Everyone goes through a phase of frustration at the beginning because we are not comfortable and we have the impression of being slower.\nWe must resist and persevere because the tests will actually make us go faster in the long go. We will talk about it with the TDD approach."),(0,o.kt)("li",{parentName:"ol"},"It requires preparation: you have to think about the project's architecture, the relationships between the different components, etc. Seen like this, it isn't really a disadvantage but we can't (won't anymore?) go headlong in a development without a minimum of thought."),(0,o.kt)("li",{parentName:"ol"},'There is a lack of comprehension on the side of other teams involved in the proect development, especially non-IT\'s. We always fall back on discussions about the "Return On Investment" (ROI) or the impact on velocity.')),(0,o.kt)("p",null,'We often hear that "it takes time" or "it will be planned later" or "developers don\'t have time" but those arguments are not really valid.\nIndeed, the first one clearly indicates a lack of long term vision and understanding of testing. Because "later" never happens but above all, writing the tests at the end of a product\'s development doesn\'t make any sense. We lose all benefits of testing. I already said it but we will talk about it with the TDD approach.\nThen, the second indicates an organizational problem. The tests should be included in the time estimates of developping a feature and not as additional work to be done.'),(0,o.kt)(c.x,{id:"test-coverage",mdxType:"AnchoredP"},"\ud83d\udd38 What about the test coverage?"),(0,o.kt)("p",null,'\ud83d\udd39 Testing is great, we feel the benefits. However, we is also necessary to make a status on the state of the test suite. This is when we start talking about "code coverage". It is an informative metric about your app\'s test coverage process.\nI really insist on the "informative" side. It would be a mistake to measure the quality of the test suite based on its coverage. It is a metric of quantity, not quality.\nI have already read articles about companies that have incorporated the value of code coverage into developer goals and this has prompted developers to use mock tests to boost the coverage.'),(0,o.kt)("p",null,"The only way to check the quality of a test suite of a project is to ask yourself a few questions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Does the general feature development time stay approximately the same over time?"),(0,o.kt)("li",{parentName:"ul"},"Does the quantity of bugs found in production decrease over time?"),(0,o.kt)("li",{parentName:"ul"},"Do you easily manage to welcome new resource within the development team?"),(0,o.kt)("li",{parentName:"ul"},"Do the developers trust their test suite? Is it representative of the state of health of the solution? Does a green circle really guarantee that a component is working?")),(0,o.kt)("p",null,'If you are able to answer "yes" to all these questions, congrats! You can be proud of the test suite that you have put in place.\nThe problem? It is really difficult to have an answer to all these questions when you have to report ',(0,o.kt)("em",{parentName:"p"},"day one"),"... You also notice that the first three refer to ",(0,o.kt)("strong",{parentName:"p"},"time"),"."),(0,o.kt)(c.x,{id:"cost",mdxType:"AnchoredP"},"\ud83d\udd38 Well... Cost wise, where are we? Because ultimately, writing a test means writing code. It costs!"),(0,o.kt)("p",null,"\ud83d\udd39 I see where you are going with this. No, it does not cost more unless you charge to characters!\nEven if you write more code, you really win and not only on the time aspect. Did I tell you we had to talk about the TDD approach? Because it even saves you time in short term. Anyway!"),(0,o.kt)("p",null,'Developing a feature may take you a little longer, knowing that it will mostly depend on your ease to write tests.\nOn the other hand, it will especially "save your life" a lot of times because you will avoid a lot of bugs which, in normal times, would have arrived much later in your process, during user testing on a QA environment or in production.'),(0,o.kt)("p",null,"But you wanted to talk about money! ",(0,o.kt)("strong",{parentName:"p"},"The later a bug is discovered, the more it costs"),":"),(0,o.kt)(i.Z,{data:{src:"https://assets.deepsource.io/995f56d/images/blog/cost-of-fixing-bugs/chart.jpg",alt:"Cost of bug fix",type:"image",url:"https://deepsource.io/blog/exponential-cost-of-fixing-bugs/"},mdxType:"Figure"},"Cost of bug fix based on the moment it was detected, sourced from"," ",(0,o.kt)("a",{href:"https://deepsource.io/blog/exponential-cost-of-fixing-bugs/"},"DeepSource"),"!"),(0,o.kt)("p",null,"And is totally normal."),(0,o.kt)("p",null,"We can talk again about the \"fast feedback loop\": if a bug is found by a unit test, it's in local, on your machine, just after a change (don't forget to rebuild and rerun your test suite!). The bug is quickly identified and fixed."),(0,o.kt)("p",null,"In contrast, a bug that goes to production... is discovered by a user who must report the problem to your product team who must analyze the feedback and open a ticket in your backlog.\nThis ticket will be prioritized by your Product Owner to be included in the next iteration and then it will be assigned to a developer. Assuming that it is not you, there will be an investigation phase (reproduction of the bug), a bug correction phase and after that it goes through all environments and be validated by Quality Assurance Users."),(0,o.kt)("p",null,"I deliberately took an extreme case scenario to show the worst possible but it's also the best way to be explicit about the problem.\nThe important thing to remember is that ",(0,o.kt)("strong",{parentName:"p"},"a test can save a lot of people a lot of time, no matter how simple it is"),"."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Ed: to learn more about the reasons that softwares have bugs, do not hesitate to consult ",(0,o.kt)("a",{parentName:"em",href:"https://www.softwaretestinghelp.com/why-does-software-have-bugs"},"this page")," and ",(0,o.kt)("a",{parentName:"em",href:"https://www.google.com/search?q=why+do+softwares+have+bugs"},"others on the web"),"!")),(0,o.kt)(c.N,{id:"details",mdxType:"AnchoredH2"},"In depth"),(0,o.kt)(c.x,{id:"black-and-white-boxes",mdxType:"AnchoredP"},"\ud83d\udd38 Ok! What about we talk about black box and white box testing now?"),(0,o.kt)("p",null,"\ud83d\udd39 I like diagrams, do you like diagrams? Diagrams are great!"),(0,o.kt)(i.Z,{data:{src:"/img/black-white-box-testing.png",alt:"Black and white box testing",type:"image",style:{border:".5em solid black"}},mdxType:"Figure"},"The differences between black and white box testing"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Black box testing")," consists in giving an input to the SUT and check the output. It's that simple: we don't take into account things happening inside the method.\nThere's an accurate case scenario where this type of testing is mandatory: pure methods. Those having no dependencies or shared variables have no side effect.\nIt's therefore obvious to use black box testing. It makes the test extremely robust because nothing impacts its result."),(0,o.kt)("p",null,"Let's take a ",(0,o.kt)("inlineCode",{parentName:"p"},"Sum")," method from a ",(0,o.kt)("inlineCode",{parentName:"p"},"Calculator")," class as an example. We are exactly on the scenario mentioned above:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='tests/CalculatorTests.cs'",title:"'tests/CalculatorTests.cs'"},"[TestClass]\npublic class CalculatorTests\n{\n    [TestMethod]\n    public int Sum_Should_ReturnTheSumOfTheTwoNumbers()\n    {\n        Calculator calculator = new();\n\n        int result = calculator.Sum(2,3);\n\n        Assert.AreEqual(expected: 5, actual: result);\n    }\n}\n")),(0,o.kt)("p",null,"We don't know the method's implementation, but we wrote a test. We give it input data, and check the output.\nFor the other scenarios we haven't talked about yet, I find it a shame to stop there.\nIt's a personal feeling, but I find ",(0,o.kt)("strong",{parentName:"p"},"white box testing")," more relevant as a ",(0,o.kt)("em",{parentName:"p"},"mockist"),"."),(0,o.kt)("p",null,"So yeah, on the other hand, we thus have ",(0,o.kt)("strong",{parentName:"p"},"white box testing"),". At first sight, it is the same process: we give an input and check the output.\nBut we are also going to check what's going on ",(0,o.kt)("em",{parentName:"p"},"inside")," the SUT: check that it called its dependencies correctly, that the value has been correctly cached or saved in a repository, that an event has been emitted, etc."),(0,o.kt)("p",null,"This allows us to check each ",(0,o.kt)("strong",{parentName:"p"},"behavior")," and their ",(0,o.kt)("strong",{parentName:"p"},"side effects"),"."),(0,o.kt)(c.x,{id:"how-to-write",mdxType:"AnchoredP"},"\ud83d\udd38 The most awaited question ever... How do we write good unit tests?"),(0,o.kt)("p",null,"\ud83d\udd39 I don't think there are good or bad unit tests... No, just joking!\nYou need to think on what to do before actually doing it. That can sound silly but just think before you do.\nThat's what I was explaining when I was talking about the fact that testing makes you better.\nIf you want to write efficient tests, you need to think on the way your components are going to communicate with each other.\nActually, your tests will be efficient once they are easy to do. And if you realize they are not, there is something wrong with your code."),(0,o.kt)("p",null,"eg: I've got a service that has to create a user. ",(0,o.kt)("strong",{parentName:"p"},"Before writing my test"),", I have to ask myself a few questions:\nwhat is the responsability of my service? Is it responsible or sending an HTTP request to an external provider to get information?\nIs it responsibile for database persistence? Is it responsible of the logging?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Divider and Conquer"),": a dependency here, one there, another there... Finally, what's left in your service?\nThe orchestration of a process delegated to different dependencies (eg: http client, repository, logger, etc.) and possibly a modification of the state of an entity. That's it."),(0,o.kt)("p",null,'In the end, a "good" test must:'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"protect you against regressions ;"),(0,o.kt)("li",{parentName:"ul"},"be resistant to refactoring ;"),(0,o.kt)("li",{parentName:"ul"},"give you a quick feedback ;"),(0,o.kt)("li",{parentName:"ul"},"be maintainable.")),(0,o.kt)(c.x,{id:"tips-to-start",mdxType:"AnchoredP"},"\ud83d\udd38 What about you give us some tips to start our journey?"),(0,o.kt)("p",null,"\ud83d\udd39 I recommend people who want to start testing to start with the ",(0,o.kt)("strong",{parentName:"p"},"Test Driven Development")," approach.\nWriting the test of a method after its implementation is not really the goal because you already know the implementation so your test will be highly coupled to your implementation.\nIn addition, your code already works so the test would probably be seen as a time loss. But above all: we don't benefit of any advantage of testing during the implementation phase."),(0,o.kt)("p",null,"You are not alone. There are tons of resources available to help you out.\nHere are some books that I wish I have read early in my career:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"Test Driven Development - By Example" by Kent Beck ;'),(0,o.kt)("li",{parentName:"ul"},'"Unit Testing - Principles, Practices and Patterns" by Vladimir Khorikov.')),(0,o.kt)("p",null,"And here's a website filled with tips and tricks on TDD with a large number of katas to progress: ",(0,o.kt)("a",{parentName:"p",href:"http://www.tddbuddy.com/"},"TDD Buddy"),"."),(0,o.kt)("p",null,"Speaking of katas, do katas. Do a lot of katas and do them with other (pair and/or mob programming) if you can.\nIt is fun and very educational, especially when starting with simple exercises and gradually increasing the difficulty until you end up with situations similar to what you can find in real projects.\nIn addition to TDD Buddy, I would also suggest people to check out ",(0,o.kt)("a",{parentName:"p",href:"https://www.codewars.com/"},"Code Wars")," if you are hungry for inspiration.\nAnd without necessarily doing self-promotion, you can also find some katas on my ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Tr00d/"},"GitHub profile"),"."),(0,o.kt)("p",null,'Last but not least piece of advice to start testing: we can refer to what is called the triple A (AAA), which means "Arrange, Act, Assert", in order to make the tests more clear and organized.\nThe goal is to divide a unit test in 3 distinct parts:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"arrange"),": this is the scenario, the part where you prepare the input data of your method ;"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"act"),": it is the action, the fact of carrying out the call to the method that you are going to test ;"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"assert"),": this is the behavior check, the part where you check the output or the side effects.")),(0,o.kt)(c.x,{id:"bad-smells",mdxType:"AnchoredP"},'\ud83d\udd38 What are the "bad smells" in unit testing?'),(0,o.kt)("p",null,"\ud83d\udd39 I see a few of them..."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'an "arrange" part that has like 15 lines... It is way too complicated. We clearly see that the tested method does too many things because the scenario is tough to prepare!'),(0,o.kt)("li",{parentName:"ul"},"We say that ",(0,o.kt)("strong",{parentName:"li"},"a test should have one and only one reason to fail"),". A test should contain a single assertion."),(0,o.kt)("li",{parentName:"ul"},"The fact that you have trouble writing unit tests, not because you don't have the necessary knowledge but rather in relation to the code to be tested... this means there is a problem at the level of your component.\nSo take a step back and think about the responsibilities.")),(0,o.kt)(c.N,{id:"to-go-further",mdxType:"AnchoredH2"},"To go further"),(0,o.kt)(c.x,{id:"libraries",mdxType:"AnchoredP"},"\ud83d\udd38 Do you have interesting libraries in mind to ease our work?"),(0,o.kt)("p",null,"\ud83d\udd39 Yes. We can consider 3 groups of libraries:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"testing ones which allow to generate tests ;"),(0,o.kt)("li",{parentName:"ol"},"mocking ones which allow to overload the behavior of your dependencies and monitor them ;"),(0,o.kt)("li",{parentName:"ol"},"data generation ones.")),(0,o.kt)("p",null,"For me:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"th"},"Test Frameworks")),(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"th"},"Mocking Libraries")),(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("strong",{parentName:"th"},"Data Generation Libraries")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/MSTest.TestFramework/"},"MSTest")),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/Moq/"},"Moq")),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/AutoFixture/"},"AutoFixture"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/NUnit/"},"NUnit")),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/Ninject/"},"NInject")),(0,o.kt)("td",{parentName:"tr",align:"center"})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/xunit/"},"XUnit")),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("a",{parentName:"td",href:"https://www.nuget.org/packages/WireMock.Net/"},"WireMock")),(0,o.kt)("td",{parentName:"tr",align:"center"})))),(0,o.kt)("p",null,"\ud83d\udd38 I would like to retain the attention of the readers on this particular point... but there are librairies for the front-end too. In fact, unit testing is not reserved for back-end developers.\nWe'll mention ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/jest"},"Jest"),", ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/mocha"},"Mocha"),", ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/cypress"},"Cypress")," and ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/jasmine"},"Jasmine")," as wellknown librairies for JavaScrit applications."),(0,o.kt)(c.x,{id:"what-is-tdd",mdxType:"AnchoredP"},"Well anyways! You can't stop mentioning it so here it is: what is Test Driven Development (TDD)?"),(0,o.kt)("p",null,"\ud83d\udd39 Glad you finally asked! It's not like I gave you multiple openings... TDD is joy, happiness, the ultimate answer to the meaning of life, it's all of that!\nNo, just kidding. In fact, it's more of a way of putting tests at the center of what you do. We talked about positive points of unit testing, and we also said that we would lose them by doing tests at the end, but we did not go into details."),(0,o.kt)("p",null,"The best way to benefit all the advantages of doing tests is to do them first but it is not just that. It doesn't mean first doing all the tests and then implementing all the methods.\nNo, there's a kind of iterative aspect which we also find in Agility. You go ",(0,o.kt)("em",{parentName:"p"},"step by step")," (baby steps), you add new behaviors ensuring the previously added ones still work. The safety net grows little by little naturally.\nWe can even present this differently: think about a ladder. It will always be easier to climb it step by step instead of three by three."),(0,o.kt)("p",null,"I would add that contrary to popular belief, TDD does not make the development time longer.\nFor example, it is not necessary to run the whole solution to know that the code is working because it has been developed entirely on a tests basis."),(0,o.kt)(i.Z,{data:{src:"/img/test-driven-development.png",alt:"Cycle du TDD",type:"image",style:{border:".5em solid black"}},mdxType:"Figure"},"The TDD cycle"),(0,o.kt)("p",null,"First thing first, you need to write ",(0,o.kt)("strong",{parentName:"p"},"one")," unit test. This test should normally ",(0,o.kt)("em",{parentName:"p"},"have to")," fail since no implementation has been written for it to pass.\nThe second step is to write the code which will make the test go green (pass). It is very important that this ",(0,o.kt)("em",{parentName:"p"},"passage")," from red to green must be ",(0,o.kt)("strong",{parentName:"p"},"as short as possible"),'.\nIt\'s the moment when we have the right to write "ugly" code (hardcoding a value, to duplicate code, to paste a response from StackOverflow, etc.). It may seem weird at first but there is a real benefit: checking that adding a new behavior is possible without breaking everything that has been done before.\nThe next step is the refactoring phase. We did write some horrible code, so now we need to make it clean. I spoke about refactoring being easier and safer: here we are! We have our "green light" and the behavior is guaranteed as long as the light remains green. We have our fast feedback loop at hand (or click, or shortcut) to know if everything\'s OK. Got it?\nAnd after that, we reach the end of the cycle. That means one thing: we start over again.'),(0,o.kt)("p",null,"\ud83d\udd38 I'm gonna give a little example so that everyone fits! I am going to do it with a string length calculator because it's easy to do.\nSo, we start by writing a unit test:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='tests/StringCalculatorTests.cs'",title:"'tests/StringCalculatorTests.cs'"},'[TestClass]\npublic class StringCalculatorTests\n{\n    [TestMethod]\n    public int Length_ShouldReturn_CorrectLength()\n    {\n        StringCalculator calculator = new();\n\n        int result = calculator.Length("string"); // "string" is 6 characters long, right?\n\n        Assert.AreEqual(expected: 6, actual: result);\n    }\n}\n')),(0,o.kt)("p",null,"The test fails because I haven't created the ",(0,o.kt)("inlineCode",{parentName:"p"},"StringCalculator")," class yet. Next step!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='src/StringCalculator.cs'",title:"'src/StringCalculator.cs'"},"public class StringCalculator\n{\n    public int Length (string str)\n    {\n        return 6; // hardcoding the value for the shortest test resolution possible\n    }\n}\n")),(0,o.kt)("p",null,"Here, I'm passing at the green stage. So now, only the blue one remains."),(0,o.kt)("p",null,"\ud83d\udd39 I would like to say that this is a very ugly code because you hardcoded the value. And this is great! It's the goal!"),(0,o.kt)("p",null,"\ud83d\udd38 Now the longest: carry out a code refactinrg which allows us to meet the requested need (calculate the length of a string) without breaking the test:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='src/StringCalculator.cs'",title:"'src/StringCalculator.cs'"},"public class StringCalculator\n{\n    public int Length (string str)\n    {\n        return str.Length; // cleanest way to return the length of a string in C#\n    }\n}\n")),(0,o.kt)("p",null,"Voil\xe0! We can now start the writing of another unit test."),(0,o.kt)("p",null,"\ud83d\udd39 It's a really simple example but you did it. It should be noted that there are some rules to respect with TDD but I could talk about it for hours so we will stop here!"),(0,o.kt)(c.x,{id:"what-is-tcr",mdxType:"AnchoredP"},'\ud83d\udd38 Nice! By the way, I heard you recently learnt about "Test && Commit || Revert" (TCR). What is it?'),(0,o.kt)("p",null,"\ud83d\udd39 Exact, I had the chance to get to know about this practice via a workshop. To schematize, let's say it is an extreme vision of TDD. The best way to apply it is with a separated script.\nThis script will analyze your solution at each save and then execute your test suite. If all the tests pass, it creates a commit representing a stable state of your branch (Test ","&","&"," Commit).\nIf a single test does not pass anymore, it will roll back to the former commit (Revert), which is stable.\nThis forces you to go in baby steps, and one thing is highlighted: it is your last change which broke something."),(0,o.kt)("p",null,"At the beginning, you go through a frustration phase because you lose some code but precisely this encourages you to go forward little step by step to limit your losses. The smaller your steps are, the less you risk to lose. It's a great teaching in addition to TDD.\nWhen you become relatively comfortable with all of this, you notice that you go faster and faster and above all: you always have a working branch."),(0,o.kt)(c.N,{id:"conclusion",mdxType:"AnchoredH2"},"Conclusion"),(0,o.kt)(c.x,{mdxType:"AnchoredP"},"\ud83d\udd38 Do you have a last word for this interview?"),(0,o.kt)("p",null,"\ud83d\udd39 \"Victoriae mundis et mundis lacrima\", which does not make any sense but I feel it's relatively cool.\nMore seriously, we have been discussing for a while now but we've only scratched the surface. There are still a lot of things to discuss about testing. I would urge your readers to be curious and the topic and to read ",(0,o.kt)("strong",{parentName:"p"},"and")," practice.\nAnd do not hesitate to ask for help around you!"),(0,o.kt)("p",null,"And now, are you interested in testing?"),(0,o.kt)(i.Z,{data:{src:"/img/developers-deliver-working-solutions.jpg",alt:"Developers deliver working solutions, not testable code",type:"image",style:{width:"50%",border:".1em grey solid"}},mdxType:"Figure"}),(0,o.kt)(l.Z,{url:h.vO,mdxType:"Newsletter"}))}w.isMDXComponent=!0},3089:function(e){e.exports=JSON.parse('{"vO":"https://tinaeldevresse.us7.list-manage.com/subscribe/post?u=8e00a760248c6a6e95f5bbc12MAILCHIMP_URL_VALUEid=8283ccedca"}')}}]);