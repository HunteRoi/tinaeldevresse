<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tinaeldevresse.eu/blog</id>
    <title>Tina√´l Devresse Blog</title>
    <updated>2023-04-06T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tinaeldevresse.eu/blog"/>
    <subtitle>Tina√´l Devresse Blog</subtitle>
    <icon>https://tinaeldevresse.eu/img/favicon.ico</icon>
    <rights>Copyright ¬©2020-present Tina√´l Devresse. Built with Docusaurus.</rights>
    <entry>
        <title type="html"><![CDATA[Sharing is caring]]></title>
        <id>https://tinaeldevresse.eu/blog/sharing-is-caring</id>
        <link href="https://tinaeldevresse.eu/blog/sharing-is-caring"/>
        <updated>2023-04-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[For quite some time now, I have been thinking about my career and how I would like it to evolve. You know that too, don't you? Every time you have an interview as a young person, you are asked "where do you see yourself in x years?". It did not tickle me at the beginning, but with some experience...]]></summary>
        <content type="html"><![CDATA[<a href="https://tinaeldevresse.eu/blog/sharing-is-caring"><figure><img src="https://tinaeldevresse.eu/img/coaching.jpg" alt="Example Mapping used to get feedback on my coaching session" type="image"><figcaption class="legend_Ecw3"><p>My client's feedback on my first coaching mission</p></figcaption></figure></a>
<p>For quite some time now, I have been thinking about my career and how I would like it to evolve.
You know that too, don't you? Every time you have an interview as a young person, you are asked "where do you see yourself in x years?".
It did not tickle me at the beginning, but with some experience, you learn and understand what you like and especially what you don't like.</p>
<p>Finally, where do I see myself in a few years?</p>
<!-- -->
<!-- -->
<hr>
<div class="center"><span class="italic">Just a quick reminder: the opinions expressed here are stricly my own. They do not represent the opinions or views of my current employer nor any of my previous ones.</span></div>
<hr>
<p>If you know me, you probably know that I have been directing my professional career towards continuous learning (for me and for those in front of me!).
In this blog post, I will try to explain why I decided to make that move and where I want to be in the future.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="a-bit-of-context">A bit of context<a href="https://tinaeldevresse.eu/blog/sharing-is-caring#a-bit-of-context" class="hash-link" aria-label="Direct link to A bit of context" title="Direct link to A bit of context">‚Äã</a></h2>
<p>I have always been eclectic. I like to try new things out and see how I perform (and how I could do better).
This is one of the reasons I decided to study Information Technology (IT) in the first place.</p>
<p>In this professional area, learning and sharing knowledge and experience is a must.
IT represents an entire world moving faster than any other I know of.
Yesterday, you would hire someone to create your website from scratch.
Today, you can build it yourself with ChatGPT and other AIs which do most of the job for you.
The fact that everything moves so fast and that you can't master every single tech that exists in this world makes it clear:</p>
<ul>
<li>Stop trying to know everything, rely on others and learn from them!</li>
<li>Nobody knows everything, let people learn from you!</li>
<li>Teamwork makes the difference, believe in others.</li>
</ul>
<p>Although I praise working in team, we are on the verge of a radical change in our society: there are currently a lot more people
with 20-30 years of experience than younger people in the companies and they are not retiring yet.
This has two downsides:</p>
<ol>
<li>These experienced profiles are not always willingly updating their knowledge (and I can understand that they are tired and soon will stop working)
nor do they especially like to share with others.</li>
<li>The age difference makes it really hard to connect with newcomers.</li>
</ol>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="short-career-but-lots-of-life-experiences">Short career but lots of life experiences<a href="https://tinaeldevresse.eu/blog/sharing-is-caring#short-career-but-lots-of-life-experiences" class="hash-link" aria-label="Direct link to Short career but lots of life experiences" title="Direct link to Short career but lots of life experiences">‚Äã</a></h2>
<p>To be honest, I have been in several companies in my career. I wanted to see how green the grass is here and there.
And I have always seen the same thing: unique profiles either trying to pull up teams and projects
or dooming everyone and everything, slowing down progress and burning money uselessly. Unfortunately for me, it is more like the second scenario.
Don't get me wrong though! I love creating. I love teamworking to bring people's solutions to life. And I especially love learning.
But after around 3 years of professional work in various organizations, I grew tired of <em>those who do not aim for excellence as I do</em>.
I mean, why would you develop a digital solution if it is to do it like crap? All you do is shoot either your future self
or one of your fellows who will have to maintain it later on. Which is exactly why I decided to turn tables.</p>
<p>I decided to work on that problem to prevent others from feeling like they try hard for nothing.
I wanted to avoid needless burnouts like many before me who grew tired of efforts thrown in waste.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="everything-comes-to-those-who-wait">Everything comes to those who wait<a href="https://tinaeldevresse.eu/blog/sharing-is-caring#everything-comes-to-those-who-wait" class="hash-link" aria-label="Direct link to Everything comes to those who wait" title="Direct link to Everything comes to those who wait">‚Äã</a></h2>
<p>For the past two years, I was looking for a way to increase the value that us developers give to our businesses. But I mainly looked
for ways to avoid weariness, exhaustion and overstrain.
Indeed, I felt my stress and tiredness levels raising way above average. I could not stand it, but had no idea how to solve the problems
I was facing...</p>
<p>Surprisingly to me, in 2021, I got a message from a former teacher.
She asked me if I was okay to take some hours at university to sub for a sick colleague.
This was the trigger. Coming back to where everything started, where I got taught how to do my job, it made me realize a lot of things!ü§©</p>
<p>I had evolved. My experiences in the professional world connected me to knowledge and people. I discovered new ways of working, new ways of
thinking and I met my ideal. <strong>I understood that I wanted to learn but above all, teach others.</strong></p>
<p>Since then, I have been sharing my knowledge, mindset and how technical excellence can bring happiness in the proper environment.
Whether I am doing it for students at the Henallux, or at my clients' in front of colleagues.</p>
<p>That made me realize where I wanted to go... üöÄ</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="back-to-the-basics">Back to the basics<a href="https://tinaeldevresse.eu/blog/sharing-is-caring#back-to-the-basics" class="hash-link" aria-label="Direct link to Back to the basics" title="Direct link to Back to the basics">‚Äã</a></h2>
<p>Have you ever had this feeling that you did not understand the whole concept explained to you during class, training or whatever?
Rest assured then, you're not alone! I graduated in 2019. Reading now the same lessons I had back then, what a difference!
I now can really see that I improved and learnt a bunch of stuff in a short time.
This is really thrilling for the future! üòÉ</p>
<p>However, it feels quite strange for the 24-year-old me to teach people of my age or sometimes older than I am.
And I have to admit that forcing myself to <em>go back to the basics</em>, to understand what I have to teach in order to vulgarize it
and <strong>share my passion</strong>, it genuinely is a growing experience.</p>
<p>When I first took the teacher job, I was not sure about it. I mean, everyone has its share of impostor syndrome to deal with, right?
But then, each time I took a new role there, I proved myself wrong. I get into the classroom, do my stuff and everyone goes home happy (except when I give homeworküòÅ).</p>
<p>Then you know, I kept thinking... Why is it so difficult to work if there are all that knowledge available and people don't know about it (or don't use it)?
I feel like the current professionals, often way older than me, lack of a fundamental element: the mindset.
At the Henallux, we don't teach a language or a specific design pattern. We try to teach the students how to continuously improve. It does not
matter that you don't know how to do C++, Cobol, NodeJS or Python. It does not matter that you don't know all the details about networking
or that you haven't experienced all the operation systems. <em>You can teach yourself!</em></p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="teaching-professionals">Teaching professionals?<a href="https://tinaeldevresse.eu/blog/sharing-is-caring#teaching-professionals" class="hash-link" aria-label="Direct link to Teaching professionals?" title="Direct link to Teaching professionals?">‚Äã</a></h2>
<p>When I was working in Luxembourg, I met amazing people I immediatly considered as my mentors (üëã <a href="https://www.linkedin.com/in/guillaumefaas/" target="_blank" rel="noopener noreferrer">Guillaume Faas</a> &amp; <a href="https://www.linkedin.com/in/yoanthirion/" target="_blank" rel="noopener noreferrer">Yoan Thirion</a>).
I mean, they had the mindset! 3 days with them were more valuable than 5 weeks spent elsewere in terms of learning.
I brought that with me when I came back to Belgium (not them obviously..! the way they share what they know, and why they do it).</p>
<p>Through my current employer, I've been sent to various clients who mainly considered me a developer.
But my interest lies in the fact that I could help my clients improve.
I started looking for challenging missions where I could be more than a developer, where I could learn from them but teach them too!</p>
<p>Then it happened. I had the incredible chance to bring my expertise in a wonderful walloon startup called <a href="https://pluriell.app/" target="_blank" rel="noopener noreferrer">Pluriell</a>.
This new adventure ‚Äì my first coaching(-only) mission ever ‚Äì was extremely positive for this client! And me too!
Through many discussions, presentations, custom accompaniements for specific problems, and code katas, I believe it gave them fresh insight,
new methodologies, standards and objectives but mostly confidence and knowledge on what they (could) do right and what they (could) do wrong.
When it comes to what I learnt from them, apart from broadening my views on how you work in a Belgian startup, I can also say that it brought
me more experience and connections as a coach. It also definitely strengthened my will to interact with others, to teach and learn from them.
And honestly, backed by experienced professionals like Yoan and Guillaume who kept showing me the way, it felt like a wonderful trip.</p>
<p>In a more recent update of my life, I happened to become a co-organizer of the <a href="https://www.meetup.com/software-craft-luxembourg/" target="_blank" rel="noopener noreferrer">Software Craftsmanship Luxembourg meetup</a>
with Guillaume and <a href="https://www.linkedin.com/in/arthur-grailet-a647a1189/" target="_blank" rel="noopener noreferrer">Arthur Grailet</a>, for which we meet with other great individuals to share our understandings...
I am still learning the ropes, but being part of this community and forced to go out of my comfort zone is really something I missed from being a student.</p>
<a href="https://sathishkannan162.github.io/the-one-genius-lone-genius-myth/"><figure><img src="https://tinaeldevresse.eu/img/no-genius-only-scenius.jpeg" alt="No genius, only scenius" type="image"><figcaption class="legend_Ecw3"><p>There are no genius, only scenius!</p></figcaption></figure></a>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="from-dev-to-teacher--coach">From dev to teacher &amp; coach<a href="https://tinaeldevresse.eu/blog/sharing-is-caring#from-dev-to-teacher--coach" class="hash-link" aria-label="Direct link to From dev to teacher &amp; coach" title="Direct link to From dev to teacher &amp; coach">‚Äã</a></h2>
<p>Being a teacher is one thing. When you have to dive deep into JavaScript or explain how you can write efficient algorithms to people
who just recently left their school's bench, it really forces you to reflect.
But coaching people way older than you <em>in their own field</em>... this is new!üòÜ</p>
<p>I think that both positions bring me the feeling to be <em>what I think is a real IT consultant</em>: to help people concretely.
That obviously includes:</p>
<ul>
<li>to understand how they feel (often simply listen to them),</li>
<li>to help them optimize the way they work by pointing out where they can improve,</li>
<li>but also by showing them what they already do right!
And finally, the most important thing is... to discuss things, give pieces of advice based on the context and bring them new value.</li>
</ul>
<p>Teaching and coaching... these actions are actually quite close.
The idea is to build a story, narrate it and believe that people grasp the morality out of it.
If they don't, it is part of the job to attack from another angle in order to bring them what they require to go forward.</p>
<p>I truly like the jobs. You need to understand how people think, and how you can convey the right information (and emotion) to them.
You have to master your subject, and if not: be transparent and admit you don't know everything.
They don't know either anyway, so you can (and should) just look it up with them so that everyone levels up!</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a href="https://tinaeldevresse.eu/blog/sharing-is-caring#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">‚Äã</a></h2>
<p>Sometimes you have to go back to your roots to grow bigger üå≥</p>
<p>I look forward to the surprises life will put next on my way, and I am sure everybody (and especially I)
will learn more throughout the journey!</p>
<p>By the way, if you are looking for an Agile Technical Coach, hit me up on <a href="https://linkedin.com/in/tinael-devresse" target="_blank" rel="noopener noreferrer">LinkedIn</a>.</p>
<div class="formContainer_ssZr"><h3>Stay up to date, subscribe to my newsletter!</h3><div class="inputContainer_rIzC"><input class="input_xw7i" type="email" placeholder="Enter your email address" required="" autocomplete="email"><a class="submit_jbGj tooltip" rel="noopener" type="submit"><svg aria-hidden="true" focusable="false" data-prefix="far" data-icon="paper-plane" class="svg-inline--fa fa-paper-plane fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M440 6.5L24 246.4c-34.4 19.9-31.1 70.8 5.7 85.9L144 379.6V464c0 46.4 59.2 65.5 86.6 28.6l43.8-59.1 111.9 46.2c5.9 2.4 12.1 3.6 18.3 3.6 8.2 0 16.3-2.1 23.6-6.2 12.8-7.2 21.6-20 23.9-34.5l59.4-387.2c6.1-40.1-36.9-68.8-71.5-48.9zM192 464v-64.6l36.6 15.1L192 464zm212.6-28.7l-153.8-63.5L391 169.5c10.7-15.5-9.5-33.5-23.7-21.2L155.8 332.6 48 288 464 48l-59.4 387.3z"></path></svg><span class="tooltipText">Submit!</span></a></div></div>]]></content>
        <category label="development" term="development"/>
        <category label="coach" term="coach"/>
        <category label="agility" term="agility"/>
        <category label="IT" term="IT"/>
        <category label="craft" term="craft"/>
        <category label="software craftsman" term="software craftsman"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[What architecture do I use for my projects?]]></title>
        <id>https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture</id>
        <link href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture"/>
        <updated>2022-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I decided to talk about the architecture choice I take when developing my app!]]></summary>
        <content type="html"><![CDATA[<a href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture"><figure><img src="https://tinaeldevresse.eu/img/why-did-i-switch-to-clean-architecture.png" alt="My Love for Clean Architecture" type="image"><figcaption class="legend_Ecw3"></figcaption></figure></a>
<p>I decided to talk about the architecture choice I take when developing my apps!</p>
<!-- -->
<!-- -->
<hr>
<div class="center"><span class="italic">Just a quick reminder: the opinions expressed here are stricly my own. They do not represent the opinions or views of my current employer nor any of my previous ones.</span></div>
<hr>
<p>Not long ago, I have been asked the following by fellow developers:</p>
<blockquote>
<p>How do you structure your projects because when they evolve, the basic n-tier architecture becomes more complex and they tend to create messy solutions.</p>
</blockquote>
<p>I don't have all the answers but what I actually said is that when it comes to my own projects, I make a simple choice:</p>
<ul>
<li>If I am working on a basic CRUD app, I will definitely go for a 3-Tier architecture.</li>
<li>But if I need to build a more complex app requiring a strong business logic and which must scream its goal,
I will definitely use what Robert C. Martin called <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="noopener noreferrer">the Clean Architecture</a> in 2012.
Of course, my version is not strictly following what Uncle Bob describes in his blog as I have tailored it to my needs but let's talk about it.</li>
</ul>
<p>Nowadays though, I tend to be more inclined to use the latter. But <strong>what does the Clean Architecture bring me that I love and that n-tier does not?</strong></p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-n-tier-architecture">The N-Tier architecture<a href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture#the-n-tier-architecture" class="hash-link" aria-label="Direct link to The N-Tier architecture" title="Direct link to The N-Tier architecture">‚Äã</a></h2>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-it">What is it?<a href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture#what-is-it" class="hash-link" aria-label="Direct link to What is it?" title="Direct link to What is it?">‚Äã</a></h3>
<p>First of all, it would be a shame to talk about the Clean Architecture and not talk about what I have learnt during my years at school: the n-tier architecture.
This type of architecture is usually presented as and mixed up with one of its specific version: the 3-tier architecture.</p>
<p>This architecture places the data as the core of the application. The 3 layers are:</p>
<ol>
<li>the presentation layer, responsible of presenting the information to the outside ;</li>
<li>the logic layer, responsible of the business logic that should be applied on the data ;</li>
<li>the data layer, responsible of the data access.</li>
</ol>
<figure><img src="https://tinaeldevresse.eu/img/3-tier-architecture.jpg" alt="3-tier schema" type="image"><figcaption class="legend_Ecw3"></figcaption></figure>
<p>Of course, the "n" in the name means that you can actually have less or more than 3 tiers. The layers described above are just the common ground.
There are other types of comparable structures like the 2-tier architecture, the single tier, the 4-tier ...
When developing a project, you usually tailor the architecture to your needs. You could even subdivide the 3 common layers into sub-layers depending on your requirements.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pros--cons">Pros &amp; Cons<a href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture#pros--cons" class="hash-link" aria-label="Direct link to Pros &amp; Cons" title="Direct link to Pros &amp; Cons">‚Äã</a></h3>
<p>For the <strong>advantages</strong>, we can list the following:</p>
<ul>
<li>more secure ‚Äî The presentation layer (usually the UI or such) is not "directly" wired to the database. All connections to it are shielded by the logic layer.</li>
<li>easily maintainable ‚Äî at the time of its "creation", this archi allowed the developers to maintain it much more easily than the previous architectures did.</li>
<li>easy to reuse ‚Äî it is easier to reuse the logic of each layer.</li>
</ul>
<p>For the <strong>disadvantages</strong>, let's have a quick look too:</p>
<ul>
<li>increase in effort ‚Äî implementing new features takes time as you have to go through all tiers.
Changing a single thing in the database layer is reflected to the logic and presentation layers as they directly rely on it.</li>
<li>increase in complexity ‚Äî when it grows, it becomes more difficult to keep it clean, understandable and predict the impact of a change.</li>
<li>harder to test ‚Äî implementing tests is quite difficult as everything is highly coupled to the layer it points toward.</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="when-to-use-it">When to use it?<a href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture#when-to-use-it" class="hash-link" aria-label="Direct link to When to use it?" title="Direct link to When to use it?">‚Äã</a></h3>
<p>In my humble opinion, using the n-tier architecture is a good start when you need to develop the prototype of an idea because you need to showcase something quickly.
This will unfortunately tend to make things less great for the future though.</p>
<p>You could also use this archi when you need to build an easy CRUD app.
Speaking of such, it is often used when you simply want to query a database. I once did that for one of my employers.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-clean-architecture">The Clean Architecture<a href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture#the-clean-architecture" class="hash-link" aria-label="Direct link to The Clean Architecture" title="Direct link to The Clean Architecture">‚Äã</a></h2>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-it-1">What is it?<a href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture#what-is-it-1" class="hash-link" aria-label="Direct link to What is it?" title="Direct link to What is it?">‚Äã</a></h3>
<figure><img src="https://tinaeldevresse.eu/img/clean-architecture.jpg" alt="Onion schema of CA" type="image"><figcaption class="legend_Ecw3"></figcaption></figure>
<p>This architecture puts the Domain at the center, and in charge of everything. It also requires more intentional designs as you do not rely on your database directly.
Built with the <a href="https://martinfowler.com/bliki/CQRS.html" target="_blank" rel="noopener noreferrer">CQRS pattern</a>, I consider it the best way to write a software with maintainability and simplicity in mind.</p>
<p>Historical fact: the 3-Tiered architecture came in 1992 thanks to John J. Donovan and was followed by others afterwards:</p>
<ul>
<li>Hexagonal Architecture / Ports &amp; Adapters (2005, Alistair Cockburn),</li>
<li>Onion Architecture (2008, Jeffrey Palermo),</li>
<li>Clean Architecture (2012, Robert C. Martin).</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pros--cons-1">Pros &amp; Cons<a href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture#pros--cons-1" class="hash-link" aria-label="Direct link to Pros &amp; Cons" title="Direct link to Pros &amp; Cons">‚Äã</a></h3>
<p>For the <strong>advantages</strong>, we can list the following:</p>
<ul>
<li>less coupled code, better testability ‚Äî as the code is less coupled due to using abstractions everywhere you can, you can easily mock dependencies and unit test your components.
It also facilitates the development in each layer as they are not highly coupled together, allowing teams to work in parallel on each layer.</li>
<li>separation of concerns ‚Äî the architecture kind of forces you to think about your use cases and dependencies.
The UI also does not care about how your database looks, nor does it care about the packages you use to generate a PDF for example...</li>
<li>better features exposition</li>
<li>better application of SOLID principles</li>
<li>better evolutivity</li>
</ul>
<p>For the <strong>disadvantages</strong>, we can list the following:</p>
<ul>
<li>increase in time to build from scratch ‚Äî you need to setup more things before starting to develop a valuable feature for the client.</li>
<li>increase in code ‚Äî you need more files (classes and interfaces) than in an n-tier architecture.</li>
<li>possible loss of optimization ‚Äî being closer to implementations might grant you better performances. You would lose this in profit of looser coupling which IMHO is a good trade-off.</li>
</ul>
<p>Editor's Note: Honnestly, reading this again... I don't feel like these are real disadvantages.
They can be easily overcome with experience, and will make you gain time on the long run, especially if you decide to work with tests (which you should if you want to produce good code!).</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="when-to-use-it-1">When to use it?<a href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture#when-to-use-it-1" class="hash-link" aria-label="Direct link to When to use it?" title="Direct link to When to use it?">‚Äã</a></h3>
<p>When you need to develop a complex software, that you want to test your features and want to deliver something valuable that will not increase the buglog once in production.
It can also be mixed with methodologies that make it a strong reliability like <a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener noreferrer">DDD</a> and <a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank" rel="noopener noreferrer">TDD</a>.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="so-why-do-i-prefer-ca-over-n-tier">So why do I prefer CA over N-Tier?<a href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture#so-why-do-i-prefer-ca-over-n-tier" class="hash-link" aria-label="Direct link to So why do I prefer CA over N-Tier?" title="Direct link to So why do I prefer CA over N-Tier?">‚Äã</a></h2>
<p>You might know now but I am tired of developing crappy things, I'm tired of working in a company where you get told to "develop fast and we will improve it later".
Later never comes.</p>
<p>I am so tired of such way of working that I fell in love with 3 things:</p>
<ol>
<li>Clean Architecture, and</li>
<li>Test-Driven Development, and</li>
<li><a href="https://en.wikipedia.org/wiki/Software_craftsmanship" target="_blank" rel="noopener noreferrer">Software Craftsmanship</a>.</li>
</ol>
<p>But more seriously, I haven't explained <em>why</em> I like it... In a few words, let me tell you.
You need to know that developing an application without tests, it's like developing with your eyes closed: you do mistakes.
I then started digging this part of my job I was neglecting at the time: testing. Thanks to my professional experience at Pwc Luxembourg, I met wonderful people who taught me a lot of new things.</p>
<p>That was when I've been asked to write an application following a particular architecture... And everything got solved once I practiced.</p>
<p>Developing with Clean Archi, for me, it is the real culmination of software development where the technical "parts" can finally be changed without having to rework something else.
The truth is, I learnt so much with Clean Architecture:</p>
<ul>
<li>I understood the real deal that Dependency Injection represents ;</li>
<li>I succeeded in applying SOLID principles better than all the other times I tried, in vain ;</li>
<li>I understod that I had to name my interfaces independantly of the implementation that could ensue from it since I could potentially have 3 different implementations of <code>IPdfGenerator</code> ;</li>
<li>I understood that testing <em>is</em> fun ;</li>
<li>I understood that writing apps without bugs is possible and should be common.</li>
</ul>
<p>And I went to IT school! They explained what dependency injection, SOLID principles, clean code... are, they taught me how to prepare for a development and avoid the majority of bugs...
But that doesn't mean I haven't written horrible code or buggy apps or patched a feature and broken something else in the process.</p>
<p>So, I highly encourage you to learn more about these 3 topics I listed above. The rest should come...
They represent what I would love to call <em>the best mindset</em> for the next generation of developers.</p>
<p>I would also recommend to learn more by looking at the following resources:</p>
<ul>
<li>The presentation of Guillherme Ferreira on <a href="https://ndcporto.com/agenda/the-grand-unified-theory-of-clean-architecture-and-test-pyramid-0b9p/6537f85dc598" target="_blank" rel="noopener noreferrer">The Grand Unified Theory of Clean Architecture and Test Pyramid</a> at NDC Porto ;</li>
<li><a href="https://www.jug.ch/events/slides/220201_Optivem_TDD_and_Clean_Architecture_Driven_by_Behaviour.pdf" target="_blank" rel="noopener noreferrer">Valentina Cupaƒá's slides</a> about TDD and Clean Architecture driven by behaviour ;</li>
<li>A blog post relating an <a href="https://medium.com/codex/introduction-to-clean-architecture-2437c6987ec" target="_blank" rel="noopener noreferrer">introduction to CA</a> ;</li>
<li>The example of such structure that is <a href="https://github.com/jasontaylordev/CleanArchitecture" target="_blank" rel="noopener noreferrer">Jason Taylor's Clean Architecture Template</a>!</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a href="https://tinaeldevresse.eu/blog/why-did-i-switch-to-clean-architecture#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">‚Äã</a></h2>
<p>What finally makes the n-tier architecture obsolete is that it is actually <em>data-centric</em> unlike the clean archi that is <em>domain-centric</em> (logic).
It took us time to understand that what gives value to our clients is not the data, but the business logic that allows to process that data!</p>
<p>If you are still interested in learning more on the topic, I also happened to stumble upon these online resources:</p>
<ul>
<li><a href="https://www.digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design" target="_blank" rel="noopener noreferrer">Samuel Oloruntoba's explanations</a> of the SOLID principles ;</li>
<li><a href="https://blog.ploeh.dk/2013/12/03/layers-onions-ports-adapters-its-all-the-same/" target="_blank" rel="noopener noreferrer">Mark Seemann's article</a> on the topic of adapters ;</li>
<li><a href="https://dev.to/seangwright/comment/ccfb" target="_blank" rel="noopener noreferrer">Sean G. Wright comment</a> on "Clean architecture - Your approach" ;</li>
<li>The meetup group of <a href="https://www.meetup.com/en-US/software-craft-luxembourg/" target="_blank" rel="noopener noreferrer">Software Craftsmanship Luxembourg</a> ;</li>
<li>The meetup group of <a href="https://www.meetup.com/en-US/techexcellence/" target="_blank" rel="noopener noreferrer">Tech Excellence</a>.</li>
</ul>
<p>And you, what architecture do you use for your projects?</p>
<div class="formContainer_ssZr"><h3>Stay up to date, subscribe to my newsletter!</h3><div class="inputContainer_rIzC"><input class="input_xw7i" type="email" placeholder="Enter your email address" required="" autocomplete="email"><a class="submit_jbGj tooltip" rel="noopener" type="submit"><svg aria-hidden="true" focusable="false" data-prefix="far" data-icon="paper-plane" class="svg-inline--fa fa-paper-plane fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M440 6.5L24 246.4c-34.4 19.9-31.1 70.8 5.7 85.9L144 379.6V464c0 46.4 59.2 65.5 86.6 28.6l43.8-59.1 111.9 46.2c5.9 2.4 12.1 3.6 18.3 3.6 8.2 0 16.3-2.1 23.6-6.2 12.8-7.2 21.6-20 23.9-34.5l59.4-387.2c6.1-40.1-36.9-68.8-71.5-48.9zM192 464v-64.6l36.6 15.1L192 464zm212.6-28.7l-153.8-63.5L391 169.5c10.7-15.5-9.5-33.5-23.7-21.2L155.8 332.6 48 288 464 48l-59.4 387.3z"></path></svg><span class="tooltipText">Submit!</span></a></div></div>]]></content>
        <category label="development" term="development"/>
        <category label="structure" term="structure"/>
        <category label="architecture" term="architecture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unit Testing]]></title>
        <id>https://tinaeldevresse.eu/blog/unit-testing</id>
        <link href="https://tinaeldevresse.eu/blog/unit-testing"/>
        <updated>2022-01-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Today's article is done in joint effort with my former colleague and mentor <a href="https://www.linkedin.com/in/guillaumefaas/" target="_blank" rel="noreferrer noopener nofollow">Guillaume Faas</a> (üîπ) in the form of an interview of a developer. Please join me to thank him for his incredible involvement in the writing of this post! We both hope you are gonna love it as much as we loved writing it.]]></summary>
        <content type="html"><![CDATA[<a href="https://tinaeldevresse.eu/blog/unit-testing"><figure><img src="https://tinaeldevresse.eu/img/unit-testing.jpg" alt="Unit tests" type="image"><figcaption class="legend_Ecw3"></figcaption></figure></a>
<p>Today's article is done in joint effort with my former colleague and mentor <a href="https://www.linkedin.com/in/guillaumefaas/" target="_blank" rel="noreferrer noopener nofollow">Guillaume Faas</a>
(üîπ) in the form of an interview of a developer.</p>
<p>Please join me to thank him for his incredible involvement in the writing of this post! We both hope you are gonna love it as much as we loved writing it.</p>
<!-- -->
<!-- -->
<hr>
<div class="center"><span class="italic">Just a quick reminder: the opinions expressed here are stricly my own. They do not represent the opinions or views of my current employer nor any of my previous ones.</span></div>
<hr>
<p><em>tldr; Do katas with the "Test Driven Development" methodology!</em></p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="presentation">Presentation<a href="https://tinaeldevresse.eu/blog/unit-testing#presentation" class="hash-link" aria-label="Direct link to Presentation" title="Direct link to Presentation">‚Äã</a></h2>
<p>üî∏ Hey Guillaume ! Can you introduce yourself please?</p>
<p>üîπ Hello Tina√´l! Thank you for inviting me to speak on your blog. My name is Guillaume Faas and I am a .NET expert / Software Craftsman, currently working at <a href="https://squaremiled.com/" target="_blank" rel="noopener noreferrer">Squaremiled S.A.</a>.
I've been building softwares since 10 years or so, in various environments and business sectors.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="topic">The topic!<a href="https://tinaeldevresse.eu/blog/unit-testing#topic" class="hash-link" aria-label="Direct link to The topic!" title="Direct link to The topic!">‚Äã</a></h2>
<p>üî∏ What are we going to talk about today?</p>
<p>üîπ What do you think? It seems someone did not read the post's title. We are going to talk about <strong>unit testing</strong>!</p>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="first-encounter"></p><p>üî∏ When did you first encounter unit testing?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#first-encounter" class="hash-link" aria-label="Direct link to first-encounter" title="Direct link to first-encounter">‚Äã</a><p></p>
<p>üîπ It was a long time ago in a galaxy far, far away... I barely had a few years of experience.
I've been working in the same company for most of my career and, compared to my day-to-day, I thought I had seen it all.
I started looking online in guideliens, best practices, patterns and so on... I came across a lot of exciting and above all new topics.
I seemed like I stepped in a new world that had nothing to do with my daily life in which I was stuck. The <em>testing</em> was obviously one of those topics.
However, I quickly realised that I had to progress in other subjets before I could introduce tests in my projects. It took me quite a long time before I was really fit to work in a test-driven approach.</p>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-it"></p><p>üî∏ Ok! However, just not to lose our readers... can you explain what a unit
test is please?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#what-is-it" class="hash-link" aria-label="Direct link to what-is-it" title="Direct link to what-is-it">‚Äã</a><p></p>
<p>üîπ Yes, of course! A unit test is a test that verifies a <em>unit of code</em>. This concept of unit of code varies according to the testing schools.
The London (or Mockist) School will see it as the smallest chunk of code so we are talking about a class or a method.
On the other hand, the Detroit (or Classicist) School will see it as a behavior so a group of classes or methods.
For the most curious of you, here's an <a href="https://medium.com/@adrianbooth/test-driven-development-wars-detroit-vs-london-classicist-vs-mockist-9956c78ae95f" target="_blank" rel="noopener noreferrer">article</a> which gives details on the differences between both schools. I want to clarify that no school is better than the other, each one having its pros and cons.
It's only a matter of preference and compromise.
The main difference is mainly the size of your <em>System Under Test</em> (SUT) and the relationship between the different collaborators.</p>
<p>But in the end, a unit test is simply <strong>a piece of code validating that another piece of code has the expected result and/or side effect against a given scenario</strong>.</p>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="hierarchy-position"></p><p>üî∏ Alright. Where is it in this "test hierarchy"?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#hierarchy-position" class="hash-link" aria-label="Direct link to hierarchy-position" title="Direct link to hierarchy-position">‚Äã</a><p></p>
<p>üîπ It looks like the Agile Testing Pyramid but from left to right instead of bottom to top.
The more on the left, the smaller your scope is and the most numerous and faster your tests will be.
If you read it the other way and apply a reverse logic, it works too.</p>
<p>We are on the "unit" part for this topic since there is technically nothing smaller than a unit. A unit test should be executed on a standalone basis in a sandboxed environment.
That is, a unit test has no impact on the outside of its scope, and if you run several of them in parallel, they must not have any side effect between them.</p>
<p>This finally means that in a unit test: we avoid reaching a database, making HTTP requests, accessing file system, etc. In the same way, we are not going to contact other dependencies of the solution.
We strictly stay "internal" to the unit.</p>
<figure><img src="https://tinaeldevresse.eu/img/software-testing-types.png" alt="Types of Software Testing" type="image"><figcaption class="legend_Ecw3"></figcaption></figure>
<p>Here are a few points on the <em>functional testing</em> part:</p>
<ul>
<li>unit testing is to check that a component works well. It is the fastest, we will talk about "fast feedback loop" ;</li>
<li>integration testing is to check that several components work well together ;</li>
<li>user acceptance testing consists of verifying the whole application while avoiding contact with external dependencies (eg: requests to external providers).
This is the most representative test, probably the one that has the most value on the product scale as it validates business requirements.</li>
</ul>
<p>Note that you don't have to implement them all. We could have a test suite only composed of tests from a single category.
But it should be borne in mind that our test suite will not be the most effective.</p>
<p></p><p>üî∏ Nice! But why is testing not used everywhere in the profesionnal world?</p><p></p>
<p>üîπ In reality, a large part of developers write little to no tests. In addition, integration tests are less common than unit tests because they are more complex to write.
In the end, this task is often seen as a chore or an extra step that we will only do if we have time.</p>
<figure><img src="https://tinaeldevresse.eu/img/integration-tests.gif" alt="GIF on integration tests" type="image"><figcaption class="legend_Ecw3"></figcaption></figure>
<p>Uncle Bob also spoke about it at a conference in London in 2018:</p>
<figure><div class="container_KXSz"><iframe type="html" width="560" height="315" src="https://www.youtube.com/embed/17vTLSkXTOo?start=552&amp;end=720" title="YouTube video player of SC London Conference 2018" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div><figcaption class="legend_Ecw3"></figcaption></figure>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="objective"></p><p>üî∏ What is the objective of unit testing and when should it be applied?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#objective" class="hash-link" aria-label="Direct link to objective" title="Direct link to objective">‚Äã</a><p></p>
<p>üîπ The goal is quite simple: it's to show that a method works as expected. That is, you are going to have an expected behavior. For example, a method <code>getSomething</code> should return you something.
You are thus going to test different scenarios and check that the method always behaves the right way.</p>
<p>As for the "when", it's even simpler: you need to apply unit testing whenever you have some logic somewhere.</p>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pros-and-cons"></p><p>üî∏ Alrighty! What are the pros and cons of such thing?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#pros-and-cons" class="hash-link" aria-label="Direct link to pros-and-cons" title="Direct link to pros-and-cons">‚Äã</a><p></p>
<p>üîπ As previously said, you write code to test code. Seen like this, it surely looks like additional workload but there are realy interests behind!</p>
<ol>
<li>The unit test acts as a <strong>safety net against regressions</strong>.</li>
</ol>
<p>The refactoring stage systematically occurs in a projet. The problem is, when you start changing something, there is always <strong>a risk of regression</strong>.
We talk about regression when something that used to work does not anymore due to some changes.
It's precisely here that a unit test intervene: it guarantees that your components always work as expected. If anything does not work anymore after a refactoring, the test suite is going to display erroneous code with a beautiful red dot.
And that, from the point of view of a developer, it's huge! It means you can be much more relaxed and spend less time checking that your changes did not have undesirable effect on the rest of the features.</p>
<ol start="2">
<li>Writing tests improves the <strong>code quality</strong> of your app.</li>
</ol>
<p>It is related to the above that we have just discussed. It is likely that the readers have already encountered a similar situation:
when talking about refactoring to a Product Owner or a Product Manager, the first fear is always that is not working anymore.
If you are covered by a test suite, you are not afraid of refactoring. It's even the opposite, <strong>you are encouraged to refactor regularly</strong> while being protected.</p>
<ol start="3">
<li>A test suite becomes what we call <strong>a living documentation</strong>.</li>
</ol>
<p>When we talk about documentation, we might all have commentaries in mind. The problem is that they are never up to date with the rest of the code. The code evolves, the documentation does not.
However, your unit test will always be up to date. If it wasn't, your test suite wouldn't give you the green light to go further.</p>
<p>It's even more interesting when^in the context of the arrival of a new developer on the project. Rather than reading all the code of a method to know what it does, they can just look at the different tests for that specific method.
Each behavior will be represented by a test with an explicit naming on the scenario and expected result (eg: <code>GetItem_ShouldReturnNotFoundResult_GivenItemIsMissing</code>). <strong>It makes the onboarding process easier!</strong></p>
<ol start="4">
<li>It <strong>reduces the bug detection time</strong>.</li>
</ol>
<p>We mentioned the concept of "short feedback loop" earlier. Unit tests are really fast to execute, they give an almost instantaneous feedback on the health of the solution.
This means that we need to regularly execute them. Let's say we have a button (or a shortcut) that gives us a Green/Red status in a few seconds. Activating this button must become systematic.</p>
<p>It already has an interest for us developers but that's not all. We'll talk about it later!</p>
<ol start="5">
<li>It is not a direct advantage but more like a side effect: <strong>testing makes you better</strong>.</li>
</ol>
<p>To ensure you write tests that provide real value, there are certain principles that you need to follow. You must always have a certain layer of abstraction to <em>mock</em> your dependencies, you must be able to inject them, you must limit the responsibilities of your components, etc.
In fact, you will force yourself to apply several principles regularly (eg: SOLID). Suddenly, it forces you to break your components, to decouple them, to think about their interactions and responsibilities. In short, to think and ask yourself a lot of questions.
Casually, we are talking about <em>code design</em>! And so, action-reaction: you get better over time. Sounds very "Happy End" but you know where I'm going with this.</p>
<p>üî∏ And as it is not that much introduced in companies, it's kinda "new" and motivates to learn more!</p>
<p>üîπ I agree with you on the novelty aspect but it only remains present when the subject is discovered. And there's an interpretive part to it all: some (like you) see it as something interesting. Others see it as a chore or extra pressure.
You will always find people resistant to testing for a variety of reasons. Perhaps we will have the opportunity to address the reasons that are generally mentioned...</p>
<p>To get back to the question, here are the cons that come to my mind:</p>
<ol>
<li>Already mentioned, but there are pre-requisites: you have to understand the foundation of the Object-Oriented, dependency injection, <a href="https://www.digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design" target="_blank" rel="noopener noreferrer">SOLID</a> principles, etc.</li>
<li>The fact that there are few projects with real test suites makes learning less accessible. The same goes for a coach passionate about this subject.</li>
<li>There's a fairly steep learning/progression curve. Everyone goes through a phase of frustration at the beginning because we are not comfortable and we have the impression of being slower.
We must resist and persevere because the tests will actually make us go faster in the long go. We will talk about it with the TDD approach.</li>
<li>It requires preparation: you have to think about the project's architecture, the relationships between the different components, etc. Seen like this, it isn't really a disadvantage but we can't (won't anymore?) go headlong in a development without a minimum of thought.</li>
<li>There is a lack of comprehension on the side of other teams involved in the proect development, especially non-IT's. We always fall back on discussions about the "Return On Investment" (ROI) or the impact on velocity.</li>
</ol>
<p>We often hear that "it takes time" or "it will be planned later" or "developers don't have time" but those arguments are not really valid.
Indeed, the first one clearly indicates a lack of long term vision and understanding of testing. Because "later" never happens but above all, writing the tests at the end of a product's development doesn't make any sense. We lose all benefits of testing. I already said it but we will talk about it with the TDD approach.
Then, the second indicates an organizational problem. The tests should be included in the time estimates of developping a feature and not as additional work to be done.</p>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="test-coverage">üî∏ What about the test coverage?<a href="https://tinaeldevresse.eu/blog/unit-testing#test-coverage" class="hash-link" aria-label="Direct link to üî∏ What about the test coverage?" title="Direct link to üî∏ What about the test coverage?">‚Äã</a></p>
<p>üîπ Testing is great, we feel the benefits. However, we is also necessary to make a status on the state of the test suite. This is when we start talking about "code coverage". It is an informative metric about your app's test coverage process.
I really insist on the "informative" side. It would be a mistake to measure the quality of the test suite based on its coverage. It is a metric of quantity, not quality.
I have already read articles about companies that have incorporated the value of code coverage into developer goals and this has prompted developers to use mock tests to boost the coverage.</p>
<p>The only way to check the quality of a test suite of a project is to ask yourself a few questions:</p>
<ul>
<li>Does the general feature development time stay approximately the same over time?</li>
<li>Does the quantity of bugs found in production decrease over time?</li>
<li>Do you easily manage to welcome new resource within the development team?</li>
<li>Do the developers trust their test suite? Is it representative of the state of health of the solution? Does a green circle really guarantee that a component is working?</li>
</ul>
<p>If you are able to answer "yes" to all these questions, congrats! You can be proud of the test suite that you have put in place.
The problem? It is really difficult to have an answer to all these questions when you have to report <em>day one</em>... You also notice that the first three refer to <strong>time</strong>.</p>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cost"></p><p>üî∏ Well... Cost wise, where are we? Because ultimately, writing a test means
writing code. It costs!</p><a href="https://tinaeldevresse.eu/blog/unit-testing#cost" class="hash-link" aria-label="Direct link to cost" title="Direct link to cost">‚Äã</a><p></p>
<p>üîπ I see where you are going with this. No, it does not cost more unless you charge to characters!
Even if you write more code, you really win and not only on the time aspect. Did I tell you we had to talk about the TDD approach? Because it even saves you time in short term. Anyway!</p>
<p>Developing a feature may take you a little longer, knowing that it will mostly depend on your ease to write tests.
On the other hand, it will especially "save your life" a lot of times because you will avoid a lot of bugs which, in normal times, would have arrived much later in your process, during user testing on a QA environment or in production.</p>
<p>But you wanted to talk about money! <strong>The later a bug is discovered, the more it costs</strong>:</p>
<figure><a href="https://deepsource.io/blog/exponential-cost-of-fixing-bugs/" target="_blank"><img src="https://tinaeldevresse.eu/img/relative-costs-bugs-fixing.png" alt="Cost of bug fix" type="image" url="https://deepsource.io/blog/exponential-cost-of-fixing-bugs/"></a><figcaption class="legend_Ecw3"><p>Cost of bug fix based on the moment it was detected, sourced from <a href="https://deepsource.io/blog/exponential-cost-of-fixing-bugs/">DeepSource</a>!</p></figcaption></figure>
<p>And is totally normal.</p>
<p>We can talk again about the "fast feedback loop": if a bug is found by a unit test, it's in local, on your machine, just after a change (don't forget to rebuild and rerun your test suite!). The bug is quickly identified and fixed.</p>
<p>In contrast, a bug that goes to production... is discovered by a user who must report the problem to your product team who must analyze the feedback and open a ticket in your backlog.
This ticket will be prioritized by your Product Owner to be included in the next iteration and then it will be assigned to a developer. Assuming that it is not you, there will be an investigation phase (reproduction of the bug), a bug correction phase and after that it goes through all environments and be validated by Quality Assurance Users.</p>
<p>I deliberately took an extreme case scenario to show the worst possible but it's also the best way to be explicit about the problem.
The important thing to remember is that <strong>a test can save a lot of people a lot of time, no matter how simple it is</strong>.</p>
<p><em>Ed: to learn more about the reasons that softwares have bugs, do not hesitate to consult <a href="https://www.softwaretestinghelp.com/why-does-software-have-bugs" target="_blank" rel="noopener noreferrer">this page</a> and <a href="https://www.google.com/search?q=why+do+softwares+have+bugs" target="_blank" rel="noopener noreferrer">others on the web</a>!</em></p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="details">In depth<a href="https://tinaeldevresse.eu/blog/unit-testing#details" class="hash-link" aria-label="Direct link to In depth" title="Direct link to In depth">‚Äã</a></h2>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="black-and-white-boxes"></p><p>üî∏ Ok! What about we talk about black box and white box testing now?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#black-and-white-boxes" class="hash-link" aria-label="Direct link to black-and-white-boxes" title="Direct link to black-and-white-boxes">‚Äã</a><p></p>
<p>üîπ I like diagrams, do you like diagrams? Diagrams are great!</p>
<figure><img src="https://tinaeldevresse.eu/img/black-white-box-testing.png" alt="Black and white box testing" type="image" style="border:.5em solid black"><figcaption class="legend_Ecw3"><p>The differences between black and white box testing</p></figcaption></figure>
<p><strong>Black box testing</strong> consists in giving an input to the SUT and check the output. It's that simple: we don't take into account things happening inside the method.
There's an accurate case scenario where this type of testing is mandatory: pure methods. Those having no dependencies or shared variables have no side effect.
It's therefore obvious to use black box testing. It makes the test extremely robust because nothing impacts its result.</p>
<p>Let's take a <code>Sum</code> method from a <code>Calculator</code> class as an example. We are exactly on the scenario mentioned above:</p>
<div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">tests/CalculatorTests.cs</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token attribute class-name">TestClass</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">CalculatorTests</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">[</span><span class="token attribute class-name">TestMethod</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token return-type class-name keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Sum_Should_ReturnTheSumOfTheTwoNumbers</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token class-name">Calculator</span><span class="token plain"> calculator </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token class-name keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> calculator</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		Assert</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">AreEqual</span><span class="token punctuation" style="color:#393A34">(</span><span class="token named-parameter punctuation" style="color:#393A34">expected</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token named-parameter punctuation" style="color:#393A34">actual</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We don't know the method's implementation, but we wrote a test. We give it input data, and check the output.
For the other scenarios we haven't talked about yet, I find it a shame to stop there.
It's a personal feeling, but I find <strong>white box testing</strong> more relevant as a <em>mockist</em>.</p>
<p>So yeah, on the other hand, we thus have <strong>white box testing</strong>. At first sight, it is the same process: we give an input and check the output.
But we are also going to check what's going on <em>inside</em> the SUT: check that it called its dependencies correctly, that the value has been correctly cached or saved in a repository, that an event has been emitted, etc.</p>
<p>This allows us to check each <strong>behavior</strong> and their <strong>side effects</strong>.</p>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="how-to-write"></p><p>üî∏ The most awaited question ever... How do we write good unit tests?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#how-to-write" class="hash-link" aria-label="Direct link to how-to-write" title="Direct link to how-to-write">‚Äã</a><p></p>
<p>üîπ I don't think there are good or bad unit tests... No, just joking!
You need to think on what to do before actually doing it. That can sound silly but just think before you do.
That's what I was explaining when I was talking about the fact that testing makes you better.
If you want to write efficient tests, you need to think on the way your components are going to communicate with each other.
Actually, your tests will be efficient once they are easy to do. And if you realize they are not, there is something wrong with your code.</p>
<p>eg: I've got a service that has to create a user. <strong>Before writing my test</strong>, I have to ask myself a few questions:
what is the responsability of my service? Is it responsible or sending an HTTP request to an external provider to get information?
Is it responsibile for database persistence? Is it responsible of the logging?</p>
<p><strong>Divider and Conquer</strong>: a dependency here, one there, another there... Finally, what's left in your service?
The orchestration of a process delegated to different dependencies (eg: http client, repository, logger, etc.) and possibly a modification of the state of an entity. That's it.</p>
<p>In the end, a "good" test must:</p>
<ul>
<li>protect you against regressions ;</li>
<li>be resistant to refactoring ;</li>
<li>give you a quick feedback ;</li>
<li>be maintainable.</li>
</ul>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="tips-to-start"></p><p>üî∏ What about you give us some tips to start our journey?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#tips-to-start" class="hash-link" aria-label="Direct link to tips-to-start" title="Direct link to tips-to-start">‚Äã</a><p></p>
<p>üîπ I recommend people who want to start testing to start with the <strong>Test Driven Development</strong> approach.
Writing the test of a method after its implementation is not really the goal because you already know the implementation so your test will be highly coupled to your implementation.
In addition, your code already works so the test would probably be seen as a time loss. But above all: we don't benefit of any advantage of testing during the implementation phase.</p>
<p>You are not alone. There are tons of resources available to help you out.
Here are some books that I wish I have read early in my career:</p>
<ul>
<li>"Test Driven Development - By Example" by Kent Beck ;</li>
<li>"Unit Testing - Principles, Practices and Patterns" by Vladimir Khorikov.</li>
</ul>
<p>And here's a website filled with tips and tricks on TDD with a large number of katas to progress: <a href="http://www.tddbuddy.com/" target="_blank" rel="noopener noreferrer">TDD Buddy</a>.</p>
<p>Speaking of katas, do katas. Do a lot of katas and do them with other (pair and/or mob programming) if you can.
It is fun and very educational, especially when starting with simple exercises and gradually increasing the difficulty until you end up with situations similar to what you can find in real projects.
In addition to TDD Buddy, I would also suggest people to check out <a href="https://www.codewars.com/" target="_blank" rel="noopener noreferrer">Code Wars</a> if you are hungry for inspiration.
And without necessarily doing self-promotion, you can also find some katas on my <a href="https://github.com/Tr00d/" target="_blank" rel="noopener noreferrer">GitHub profile</a>.</p>
<p>Last but not least piece of advice to start testing: we can refer to what is called the triple A (AAA), which means "Arrange, Act, Assert", in order to make the tests more clear and organized.
The goal is to divide a unit test in 3 distinct parts:</p>
<ol>
<li><strong>arrange</strong>: this is the scenario, the part where you prepare the input data of your method ;</li>
<li><strong>act</strong>: it is the action, the fact of carrying out the call to the method that you are going to test ;</li>
<li><strong>assert</strong>: this is the behavior check, the part where you check the output or the side effects.</li>
</ol>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="bad-smells"></p><p>üî∏ What are the "bad smells" in unit testing?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#bad-smells" class="hash-link" aria-label="Direct link to bad-smells" title="Direct link to bad-smells">‚Äã</a><p></p>
<p>üîπ I see a few of them...</p>
<ul>
<li>an "arrange" part that has like 15 lines... It is way too complicated. We clearly see that the tested method does too many things because the scenario is tough to prepare!</li>
<li>We say that <strong>a test should have one and only one reason to fail</strong>. A test should contain a single assertion.</li>
<li>The fact that you have trouble writing unit tests, not because you don't have the necessary knowledge but rather in relation to the code to be tested... this means there is a problem at the level of your component.
So take a step back and think about the responsibilities.</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="to-go-further">To go further<a href="https://tinaeldevresse.eu/blog/unit-testing#to-go-further" class="hash-link" aria-label="Direct link to To go further" title="Direct link to To go further">‚Äã</a></h2>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="libraries"></p><p>üî∏ Do you have interesting libraries in mind to ease our work?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#libraries" class="hash-link" aria-label="Direct link to libraries" title="Direct link to libraries">‚Äã</a><p></p>
<p>üîπ Yes. We can consider 3 groups of libraries:</p>
<ol>
<li>testing ones which allow to generate tests ;</li>
<li>mocking ones which allow to overload the behavior of your dependencies and monitor them ;</li>
<li>data generation ones.</li>
</ol>
<p>For me:</p>
<table><thead><tr><th style="text-align:center"><strong>Test Frameworks</strong></th><th style="text-align:center"><strong>Mocking Libraries</strong></th><th style="text-align:center"><strong>Data Generation Libraries</strong></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.nuget.org/packages/MSTest.TestFramework/" target="_blank" rel="noopener noreferrer">MSTest</a></td><td style="text-align:center"><a href="https://www.nuget.org/packages/Moq/" target="_blank" rel="noopener noreferrer">Moq</a></td><td style="text-align:center"><a href="https://www.nuget.org/packages/AutoFixture/" target="_blank" rel="noopener noreferrer">AutoFixture</a></td></tr><tr><td style="text-align:center"><a href="https://www.nuget.org/packages/NUnit/" target="_blank" rel="noopener noreferrer">NUnit</a></td><td style="text-align:center"><a href="https://www.nuget.org/packages/Ninject/" target="_blank" rel="noopener noreferrer">NInject</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://www.nuget.org/packages/xunit/" target="_blank" rel="noopener noreferrer">XUnit</a></td><td style="text-align:center"><a href="https://www.nuget.org/packages/WireMock.Net/" target="_blank" rel="noopener noreferrer">WireMock</a></td><td style="text-align:center"></td></tr></tbody></table>
<p>üî∏ I would like to retain the attention of the readers on this particular point... but there are librairies for the front-end too. In fact, unit testing is not reserved for back-end developers.
We'll mention <a href="https://www.npmjs.com/package/jest" target="_blank" rel="noopener noreferrer">Jest</a>, <a href="https://www.npmjs.com/package/mocha" target="_blank" rel="noopener noreferrer">Mocha</a>, <a href="https://www.npmjs.com/package/cypress" target="_blank" rel="noopener noreferrer">Cypress</a> and <a href="https://www.npmjs.com/package/jasmine" target="_blank" rel="noopener noreferrer">Jasmine</a> as wellknown librairies for JavaScrit applications.</p>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-tdd"></p><p>Well anyways! You can't stop mentioning it so here it is: what is Test
Driven Development (TDD)?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#what-is-tdd" class="hash-link" aria-label="Direct link to what-is-tdd" title="Direct link to what-is-tdd">‚Äã</a><p></p>
<p>üîπ Glad you finally asked! It's not like I gave you multiple openings... TDD is joy, happiness, the ultimate answer to the meaning of life, it's all of that!
No, just kidding. In fact, it's more of a way of putting tests at the center of what you do. We talked about positive points of unit testing, and we also said that we would lose them by doing tests at the end, but we did not go into details.</p>
<p>The best way to benefit all the advantages of doing tests is to do them first but it is not just that. It doesn't mean first doing all the tests and then implementing all the methods.
No, there's a kind of iterative aspect which we also find in Agility. You go <em>step by step</em> (baby steps), you add new behaviors ensuring the previously added ones still work. The safety net grows little by little naturally.
We can even present this differently: think about a ladder. It will always be easier to climb it step by step instead of three by three.</p>
<p>I would add that contrary to popular belief, TDD does not make the development time longer.
For example, it is not necessary to run the whole solution to know that the code is working because it has been developed entirely on a tests basis.</p>
<figure><img src="https://tinaeldevresse.eu/img/test-driven-development.png" alt="Cycle du TDD" type="image" style="border:.5em solid black"><figcaption class="legend_Ecw3"><p>The TDD cycle</p></figcaption></figure>
<p>First thing first, you need to write <strong>one</strong> unit test. This test should normally <em>have to</em> fail since no implementation has been written for it to pass.
The second step is to write the code which will make the test go green (pass). It is very important that this <em>passage</em> from red to green must be <strong>as short as possible</strong>.
It's the moment when we have the right to write "ugly" code (hardcoding a value, to duplicate code, to paste a response from StackOverflow, etc.). It may seem weird at first but there is a real benefit: checking that adding a new behavior is possible without breaking everything that has been done before.
The next step is the refactoring phase. We did write some horrible code, so now we need to make it clean. I spoke about refactoring being easier and safer: here we are! We have our "green light" and the behavior is guaranteed as long as the light remains green. We have our fast feedback loop at hand (or click, or shortcut) to know if everything's OK. Got it?
And after that, we reach the end of the cycle. That means one thing: we start over again.</p>
<p>üî∏ I'm gonna give a little example so that everyone fits! I am going to do it with a string length calculator because it's easy to do.
So, we start by writing a unit test:</p>
<div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">tests/StringCalculatorTests.cs</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token attribute class-name">TestClass</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">StringCalculatorTests</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">[</span><span class="token attribute class-name">TestMethod</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token return-type class-name keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Length_ShouldReturn_CorrectLength</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token class-name">StringCalculator</span><span class="token plain"> calculator </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token class-name keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> calculator</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Length</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"string"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// "string" is 6 characters long, right?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		Assert</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">AreEqual</span><span class="token punctuation" style="color:#393A34">(</span><span class="token named-parameter punctuation" style="color:#393A34">expected</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token named-parameter punctuation" style="color:#393A34">actual</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The test fails because I haven't created the <code>StringCalculator</code> class yet. Next step!</p>
<div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">src/StringCalculator.cs</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">StringCalculator</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token return-type class-name keyword" style="color:#00009f">int</span><span class="token plain"> Length </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name keyword" style="color:#00009f">string</span><span class="token plain"> str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// hardcoding the value for the shortest test resolution possible</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here, I'm passing at the green stage. So now, only the blue one remains.</p>
<p>üîπ I would like to say that this is a very ugly code because you hardcoded the value. And this is great! It's the goal!</p>
<p>üî∏ Now the longest: carry out a code refactinrg which allows us to meet the requested need (calculate the length of a string) without breaking the test:</p>
<div class="language-csharp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">src/StringCalculator.cs</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-csharp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">StringCalculator</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token return-type class-name keyword" style="color:#00009f">int</span><span class="token plain"> Length </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name keyword" style="color:#00009f">string</span><span class="token plain"> str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> str</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// cleanest way to return the length of a string in C#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Voil√†! We can now start the writing of another unit test.</p>
<p>üîπ It's a really simple example but you did it. It should be noted that there are some rules to respect with TDD but I could talk about it for hours so we will stop here!</p>
<p class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-tcr"></p><p>üî∏ Nice! By the way, I heard you recently learnt about "Test &amp;&amp;
Commit || Revert" (TCR). What is it?</p><a href="https://tinaeldevresse.eu/blog/unit-testing#what-is-tcr" class="hash-link" aria-label="Direct link to what-is-tcr" title="Direct link to what-is-tcr">‚Äã</a><p></p>
<p>üîπ Exact, I had the chance to get to know about this practice via a workshop. To schematize, let's say it is an extreme vision of TDD. The best way to apply it is with a separated script.
This script will analyze your solution at each save and then execute your test suite. If all the tests pass, it creates a commit representing a stable state of your branch (Test &amp;&amp; Commit).
If a single test does not pass anymore, it will roll back to the former commit (Revert), which is stable.
This forces you to go in baby steps, and one thing is highlighted: it is your last change which broke something.</p>
<p>At the beginning, you go through a frustration phase because you lose some code but precisely this encourages you to go forward little step by step to limit your losses. The smaller your steps are, the less you risk to lose. It's a great teaching in addition to TDD.
When you become relatively comfortable with all of this, you notice that you go faster and faster and above all: you always have a working branch.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a href="https://tinaeldevresse.eu/blog/unit-testing#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">‚Äã</a></h2>
<p>üî∏ Do you have a last word for this interview?</p>
<p>üîπ "Victoriae mundis et mundis lacrima", which does not make any sense but I feel it's relatively cool.
More seriously, we have been discussing for a while now but we've only scratched the surface. There are still a lot of things to discuss about testing. I would urge your readers to be curious and the topic and to read <strong>and</strong> practice.
And do not hesitate to ask for help around you!</p>
<p>And now, are you interested in testing?</p>
<figure><img src="https://tinaeldevresse.eu/img/developers-deliver-working-solutions.jpg" alt="Developers deliver working solutions, not testable code" type="image" style="width:50%;border:.1em grey solid"><figcaption class="legend_Ecw3"></figcaption></figure>
<div class="formContainer_ssZr"><h3>Stay up to date, subscribe to my newsletter!</h3><div class="inputContainer_rIzC"><input class="input_xw7i" type="email" placeholder="Enter your email address" required="" autocomplete="email"><a class="submit_jbGj tooltip" rel="noopener" type="submit"><svg aria-hidden="true" focusable="false" data-prefix="far" data-icon="paper-plane" class="svg-inline--fa fa-paper-plane fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M440 6.5L24 246.4c-34.4 19.9-31.1 70.8 5.7 85.9L144 379.6V464c0 46.4 59.2 65.5 86.6 28.6l43.8-59.1 111.9 46.2c5.9 2.4 12.1 3.6 18.3 3.6 8.2 0 16.3-2.1 23.6-6.2 12.8-7.2 21.6-20 23.9-34.5l59.4-387.2c6.1-40.1-36.9-68.8-71.5-48.9zM192 464v-64.6l36.6 15.1L192 464zm212.6-28.7l-153.8-63.5L391 169.5c10.7-15.5-9.5-33.5-23.7-21.2L155.8 332.6 48 288 464 48l-59.4 387.3z"></path></svg><span class="tooltipText">Submit!</span></a></div></div>]]></content>
        <category label="test" term="test"/>
        <category label="unit test" term="unit test"/>
        <category label="programming" term="programming"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is a Container?]]></title>
        <id>https://tinaeldevresse.eu/blog/what-is-a-container</id>
        <link href="https://tinaeldevresse.eu/blog/what-is-a-container"/>
        <updated>2021-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello! Today, we are talking about two things&#58; 1. the last update of the Docusaurus library which now allows m..]]></summary>
        <content type="html"><![CDATA[<a href="https://tinaeldevresse.eu/blog/what-is-a-container"><figure><img src="https://tinaeldevresse.eu/img/what-is-a-container.jpg" alt="What is a Container" type="image"><figcaption class="legend_Ecw3"></figcaption></figure></a>
<p>Hello! Today, we are talking about two things:</p>
<ol>
<li>the last update of the Docusaurus library which now allows me to provide you with my blog in 2 languages!</li>
<li>the containers and their usefulness in software development.</li>
</ol>
<!-- -->
<!-- -->
<hr>
<div class="center"><span class="italic">Just a quick reminder: the opinions expressed here are stricly my own. They do not represent the opinions or views of my current employer nor any of my previous ones.</span></div>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="docusaurus">Docusaurus<a href="https://tinaeldevresse.eu/blog/what-is-a-container#docusaurus" class="hash-link" aria-label="Direct link to Docusaurus" title="Direct link to Docusaurus">‚Äã</a></h2>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-it">What is it?<a href="https://tinaeldevresse.eu/blog/what-is-a-container#what-is-it" class="hash-link" aria-label="Direct link to What is it?" title="Direct link to What is it?">‚Äã</a></h3>
<p><a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">Docusaurus</a> is an open-source optimized website generator packaging several interesting features for online content creators:</p>
<ul>
<li>documentation and blog posts in <a href="https://www.markdownguide.org/getting-started/" target="_blank" rel="noopener noreferrer">Markdown</a> ;</li>
<li>internationalization ;</li>
<li>versioning ;</li>
<li>content search highly adapted (thanks to the integration of <a href="https://www.algolia.com/" target="_blank" rel="noopener noreferrer">Algolia</a>).</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-docusaurus">Why Docusaurus?<a href="https://tinaeldevresse.eu/blog/what-is-a-container#why-docusaurus" class="hash-link" aria-label="Direct link to Why Docusaurus?" title="Direct link to Why Docusaurus?">‚Äã</a></h3>
<p>Indeed, you might ask the question. Why choosing Docusaurus when there are plenty of other site generators such as Wix, Shopify, Weebly, ... or more axed on a developer mindset such as Next.js, Hugo, Gatsby, and so on...</p>
<p>Well, I kind of discovered it by pure chance when looking for a documentation generator for .NET (by the way, I found it: <a href="https://dotnet.github.io/docfx/" target="_blank" rel="noopener noreferrer">Docfx</a>).
However, I personnaly chose Docusaurus for my personal projects for 3 reasons: it is...</p>
<ol>
<li><a href="https://github.com/facebook/docusaurus" target="_blank" rel="noopener noreferrer">open-source</a> (it means I can contribute, consult its source code, etc.),</li>
<li>developed in React (I love this library),</li>
<li>easy to use (in around 3 minutes, you can have a functional and customized website).</li>
</ol>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="this-website-is-generated-with-docusaurus">This website is generated with Docusaurus<a href="https://tinaeldevresse.eu/blog/what-is-a-container#this-website-is-generated-with-docusaurus" class="hash-link" aria-label="Direct link to This website is generated with Docusaurus" title="Direct link to This website is generated with Docusaurus">‚Äã</a></h3>
<p>If you haven't noticed it yet, this blog is generated with Docusaurus v2. You can even find the source code here on <a href="https://github.com/hunteroi/tinaeldevresse.eu" target="_blank" rel="noopener noreferrer">Github</a>.
If you see any typo, please open an issue!</p>
<p>Okay, let's move on to the next and main topic: our introduction to containers.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-containers">The containers<a href="https://tinaeldevresse.eu/blog/what-is-a-container#the-containers" class="hash-link" aria-label="Direct link to The containers" title="Direct link to The containers">‚Äã</a></h2>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-are-we-talking-about">What are we talking about?<a href="https://tinaeldevresse.eu/blog/what-is-a-container#what-are-we-talking-about" class="hash-link" aria-label="Direct link to What are we talking about?" title="Direct link to What are we talking about?">‚Äã</a></h3>
<p>One of the many problems in software development is that we are highly coupled to the machine on which we write code.
Whether it is for development or when it comes to deploy a web service for clients, there is always a machine somewhere hosting the app.
And the issue is that the systems and configurations are different..!</p>
<figure><img src="https://tinaeldevresse.eu/img/it-works-on-my-machine.jpg" alt="It Works On My Machine - meme" type="image"><figcaption class="legend_Ecw3"></figcaption></figure>
<p>A container is a standard unit of software packaging code and its dependencies to quickly and reliably run an application from one isolated environnement to another.
It's just like you let the client use your own computer.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-are-the-differences-with-a-virtual-machine">What are the differences with a Virtual Machine?<a href="https://tinaeldevresse.eu/blog/what-is-a-container#what-are-the-differences-with-a-virtual-machine" class="hash-link" aria-label="Direct link to What are the differences with a Virtual Machine?" title="Direct link to What are the differences with a Virtual Machine?">‚Äã</a></h3>
<p>It is true that containers are often compared to virtual machines (VM) in that they have the same goal: run an app in an embedded environment.
The big difference between each is that a container makes use of the host machine operating system (OS) whereas a VM loads its own OS.</p>
<p>In fact, a machine with Docker installed brings the following advantages:</p>
<ul>
<li>lightweightness and speed,</li>
<li>portability and standardization, thus cross-platform (at some extent).</li>
</ul>
<p>In reality, it is understandable. Let's take a look at this drawing:</p>
<figure><img src="https://tinaeldevresse.eu/img/container_against_VM.png" alt="Container VS Virtual Machine" type="image"><figcaption class="legend_Ecw3"></figcaption></figure>
<p>It is a schema comparing a server with Docker installed to a server that handles VMs.
Thanks to my excellent drawing skills, we can quickly understand why Docker offers lightweight and speed as assets: Docker is based on the host machine's installed OS and reuses its binaries.
This means that the machine only has to load the containers packaging code, environment variables, etc. (so to speak, a few light things).</p>
<p>On the other hand, a system which uses VMs has a hypervisor which handles everything. This hypervisor indeed uses the host machine's installed OS.
However, each VM ships with its own OS and binaries.</p>
<p>In conclusion, we can have a machine easily running 500 containers with a single OS. But it's not the same story with 500 VMs...
Eventhough it's actually more complex to efficiently manage several containers simultaneously.</p>
<p>Yet, the power of Docker can also reveal itself as a weakness: it is not possible to run a container which depends on Windows on a Linux machine (and vice versa).</p>
<p>Another important problem that arises when using Docker is obviously the security!
The containers may be isolated... but if even one of them is compromised, it is likely that the whole machine (and thus the entire set of containers) represents a threat.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="how-does-it-work">How does it work?<a href="https://tinaeldevresse.eu/blog/what-is-a-container#how-does-it-work" class="hash-link" aria-label="Direct link to How does it work?" title="Direct link to How does it work?">‚Äã</a></h3>
<p>I'm gonna lay the foundations, so that we speak with the same language. By the way, I am referencing Docker specically.
It is made up of 3 components:</p>
<ol>
<li>the software, called Docker daemon, is a process managing Docker containers and resulting objects (eg: Docker Engine, ...)</li>
<li>the objects, themselves seperated in 3 categories, are entities which allow to build an application with Docker:<!-- -->
<ul>
<li>a <strong>container</strong> is a standard environment running an application.</li>
<li>an <strong>image</strong> is a read-only template used to build a container. We can then say that an instance of an image is a container.</li>
<li>a <strong>service</strong> is a system which orchestrates the operations of several containers managed by multiple daemons. It is also called a <em>swarm</em> (a set of Docker daemons which communicate via Docker - eg: Docker Swarm, Kubernetes, ...).</li>
</ul>
</li>
<li>the registries are repositories for Docker images (eg: Docker Hub, Google Cloud Platform, ...)</li>
</ol>
<p>To create a container, you must follow some principles:</p>
<ul>
<li>a container only runs one process ;</li>
<li>a container is immutable (it means that with the same environment variables, the container will run the <em>same process</em>) ;</li>
<li>a container is disposable (it means that we can remove it, change it, ... as we like).</li>
</ul>
<p>These 3 principles are just the most important in my humble opinion, but you may find the complete methodology on <a href="https://12factor.net/" target="_blank" rel="noopener noreferrer">"The Twelve Factors"</a> website.</p>
<p>Once you have an image locally (whether you took it from a registry or built it locally), you can create a container. I could show it to you, but as I don't reinvent the wheel, you will find a small video which explains it very well!</p>
<figure><div class="container_KXSz"><iframe align="center" type="html" width="560" height="315" src="https://www.youtube.com/embed/iqqDU2crIEQ" title="YouTube video player of Docker tutorial" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div><figcaption class="legend_Ecw3"></figcaption></figure>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-would-you-use-docker-or-any-of-its-competitors">Why would you use Docker or any of its competitors?<a href="https://tinaeldevresse.eu/blog/what-is-a-container#why-would-you-use-docker-or-any-of-its-competitors" class="hash-link" aria-label="Direct link to Why would you use Docker or any of its competitors?" title="Direct link to Why would you use Docker or any of its competitors?">‚Äã</a></h3>
<p>The principle of containerisation brings significant benefits. Here's a non-exhaustive list:</p>
<ul>
<li>faster &amp; easier onboarding of new human resources ;</li>
<li>certitude that you and your colleagues work on the same environment (including the same version of tools) ;</li>
<li>enforcement of the "Do Not Reinvent The Wheel" principle since an access to open-source images is possible ;</li>
<li>faster building and destroying compared to VM ;</li>
<li>consistency environmenet and isolation ;</li>
<li>broad compatibility (the development machine OS does not matter, so everyone can work on their favorite station).</li>
</ul>
<p>Containerizing applications is more and more common. We can even find a reason for this evolution in the growth undergone by the <a href="https://en.wikipedia.org/wiki/Devops" target="_blank" rel="noopener noreferrer">DevOps</a> movement.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a href="https://tinaeldevresse.eu/blog/what-is-a-container#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">‚Äã</a></h2>
<p>If you constantly have problems of environment configuration, if you must always wait at least 1 week to deploy a test in a client environment, if it is always complicated to onboard new people on a project... then you might consider using containers in your daily life.
That said, I must say we have just scratched the surface of possibilities offered by Docker. I highly suggest you to keep documenting yourself on the topic.</p>
<p>And if you're looking for online documentation generation or you wish to start writing a blog, check out Docusaurus! üòÅ</p>
<div class="formContainer_ssZr"><h3>Stay up to date, subscribe to my newsletter!</h3><div class="inputContainer_rIzC"><input class="input_xw7i" type="email" placeholder="Enter your email address" required="" autocomplete="email"><a class="submit_jbGj tooltip" rel="noopener" type="submit"><svg aria-hidden="true" focusable="false" data-prefix="far" data-icon="paper-plane" class="svg-inline--fa fa-paper-plane fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M440 6.5L24 246.4c-34.4 19.9-31.1 70.8 5.7 85.9L144 379.6V464c0 46.4 59.2 65.5 86.6 28.6l43.8-59.1 111.9 46.2c5.9 2.4 12.1 3.6 18.3 3.6 8.2 0 16.3-2.1 23.6-6.2 12.8-7.2 21.6-20 23.9-34.5l59.4-387.2c6.1-40.1-36.9-68.8-71.5-48.9zM192 464v-64.6l36.6 15.1L192 464zm212.6-28.7l-153.8-63.5L391 169.5c10.7-15.5-9.5-33.5-23.7-21.2L155.8 332.6 48 288 464 48l-59.4 387.3z"></path></svg><span class="tooltipText">Submit!</span></a></div></div>]]></content>
        <category label="container" term="container"/>
        <category label="docker" term="docker"/>
        <category label="docusaurus" term="docusaurus"/>
        <category label="i18n" term="i18n"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deployment Environments]]></title>
        <id>https://tinaeldevresse.eu/blog/deployment-environments</id>
        <link href="https://tinaeldevresse.eu/blog/deployment-environments"/>
        <updated>2021-01-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[At school, teachers usually focus on languages, algorithmic & clean code. One of the things computer science students don't learn during their studies is deployment environments. In my opini...]]></summary>
        <content type="html"><![CDATA[<a href="https://tinaeldevresse.eu/blog/deployment-environments"><figure><img src="https://tinaeldevresse.eu/img/deployment-environments.png" alt="Deployment Environments" type="image"><figcaption class="legend_Ecw3"></figcaption></figure></a>
<p>At school, teachers usually focus on languages, algorithmic &amp; clean code. One of the things computer science students don't learn during their studies is deployment environments.
In my opinion, this is an important knowledge when starting to work for bigger companies as they tend to add more layers to their environments pipeline.</p>
<!-- -->
<!-- -->
<hr>
<div class="center"><span class="italic">Just a quick reminder: the opinions expressed here are stricly my own. They do not represent the opinions or views of my current employer nor any of my previous ones.</span></div>
<hr>
<p>This article is more accurate and targets a certain field of people. I hope you'll find it interesting! I am eager to read your opinion on the social medias.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-a-deployment-environment">What is a deployment environment?<a href="https://tinaeldevresse.eu/blog/deployment-environments#what-is-a-deployment-environment" class="hash-link" aria-label="Direct link to What is a deployment environment?" title="Direct link to What is a deployment environment?">‚Äã</a></h2>
<p>If you are here, it is probably because you are wondering what is a deployment environment (not to confuse with a development environment which is a whole other topic).
<strong>An environment in the world of software deployment is ¬´ a computer system in which a program or software component is deployed and executed ¬ª.</strong> It isn't me saying this, it's <a href="https://en.wikipedia.org/wiki/Deployment_environment" target="_blank" rel="noopener noreferrer">Wikipedia</a>. But this definition is pretty good, I must say.</p>
<p>As software systems, development processes and computer resources tend to be more distributed, they also become more complex and specialized.
When working on a project, you typically go through a <em>cycle</em> of development, testing and release often evolving on different platforms with different resources and growing complexity.
This is what we call "release management". This process allows rollout (which means "deploy something to environment"), testing and rollback if necessary (which means "remove the newly deployed version").</p>
<p>For the sake of understanding the rest of this post, I will briefly explain what are the different steps of product development an application usually goes through. Let me introduce you to the usual stages:</p>
<ol>
<li>Analyze the problem and come up with a digital solution.</li>
<li>[A lot of market stuff here involving solution validation, market research, etc.]</li>
<li>Design the software.</li>
<li>Implement it (development of features that solve the problem and/or add more value).</li>
<li>Test it.</li>
<li><strong>Deploy it</strong> (today's article is focused on this particular point)</li>
<li>Maintain it / fix its bugs.</li>
</ol>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-can-deployment-be-difficult-">Why can deployment be difficult ?<a href="https://tinaeldevresse.eu/blog/deployment-environments#why-can-deployment-be-difficult-" class="hash-link" aria-label="Direct link to Why can deployment be difficult ?" title="Direct link to Why can deployment be difficult ?">‚Äã</a></h2>
<p>You know that cycle I am talking about? Well it occurs from the 3rd stage to the 7th, more or less.
What is important to understand in this cycle is that we usually deploy different versions of the software on different machines, at different stages of the development process and following different requirements.
When you start developing an application, you already know your process management (I hope so, aha!). And in a lot of cases, you go with the <a href="https://en.wikipedia.org/wiki/Agile_software_development" target="_blank" rel="noopener noreferrer">Agile methodology</a>.</p>
<figure><img src="https://tinaeldevresse.eu/img/agile-methodology-process.jpg" alt="Agile process" type="image"><figcaption class="legend_Ecw3"><p>Made by <a href="https://www.shutterstock.com/g/Tartila" target="_blank">Tartila</a></p></figcaption></figure>
<p>I would like to point out that the cycle hides another one when you're in the industry: you have to move the different versions of your application from environments to environments. But an environment is not only a machine where your application runs! It often also means different data, different limits, different goals, different processes, and much more things with the "different" adjective.
Basically, while your application is growing at a certain step (let's call it the youngest version), you have a few older versions before that need to move. If your company don't have sysadmins or that you work with the Cloud, the developer usually has to manage this rollouts and possible rollbacks (not to remind you that you don't just move the app).</p>
<figure><img src="https://tinaeldevresse.eu/img/small-fix.jpg" alt="Dont Deploy On Friday" type="image"><figcaption class="legend_Ecw3"></figcaption></figure>
<p>While I'm pretty sure you now know how much complex it can get, let me point out that automation tools exist to ease our work (and thanks God!).</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-different-types-of-environment">The different types of environment<a href="https://tinaeldevresse.eu/blog/deployment-environments#the-different-types-of-environment" class="hash-link" aria-label="Direct link to The different types of environment" title="Direct link to The different types of environment">‚Äã</a></h2>
<p>Every organization has its own way of dealing with this topic, and usually it's even scoped on the project as all softwares don't rely on the same hardware &amp; business requirements.</p>
<p>Let me introduce you to some of the standard environments you might encounter.</p>
<table><thead><tr><th>Name</th><th>Used by</th><th>Data</th></tr></thead><tbody><tr><td>Local</td><td>You</td><td>No client data</td></tr><tr><td><strong>Dev</strong>elopment</td><td>Developers</td><td>No client data</td></tr><tr><td><strong>Test</strong>ing</td><td>QA engineers</td><td>No client data</td></tr><tr><td><strong>Staging</strong></td><td>QA engineers and/or clients</td><td>Limited production data</td></tr><tr><td><strong>Prod</strong>uction</td><td>End customers</td><td>Full production data</td></tr></tbody></table>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-local-environment">The local environment<a href="https://tinaeldevresse.eu/blog/deployment-environments#the-local-environment" class="hash-link" aria-label="Direct link to The local environment" title="Direct link to The local environment">‚Äã</a></h3>
<p>This is <em>your computer</em>. The first place where all the work happens to be done. It's broken 80% of the time.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="goals">Goals<a href="https://tinaeldevresse.eu/blog/deployment-environments#goals" class="hash-link" aria-label="Direct link to Goals" title="Direct link to Goals">‚Äã</a></h4>
<ul>
<li>Work on your own tasks</li>
<li>See the result and make your merry way</li>
<li>Run the first battery of tests before sending your code to your colleagues</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-development-environment">The development environment<a href="https://tinaeldevresse.eu/blog/deployment-environments#the-development-environment" class="hash-link" aria-label="Direct link to The development environment" title="Direct link to The development environment">‚Äã</a></h3>
<p>This is the place where all developers' work lies. It is acceptable to be broken (although you should avoid it if you don't like to have your colleagues complaining about "dev being down").
Nobody but the team engaged in building the product should ever access this environment.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="goals-1">Goals<a href="https://tinaeldevresse.eu/blog/deployment-environments#goals-1" class="hash-link" aria-label="Direct link to Goals" title="Direct link to Goals">‚Äã</a></h4>
<ul>
<li>Run and test with development data</li>
<li>Verify that your code works well with everyone else's</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-testing-environment">The testing environment<a href="https://tinaeldevresse.eu/blog/deployment-environments#the-testing-environment" class="hash-link" aria-label="Direct link to The testing environment" title="Direct link to The testing environment">‚Äã</a></h3>
<p>Also called QA (for Quality Assurance), this is where the rest of your company enters the game. This environment is basically the last step before releasing the newly developed features to real end users.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="goals-2">Goals<a href="https://tinaeldevresse.eu/blog/deployment-environments#goals-2" class="hash-link" aria-label="Direct link to Goals" title="Direct link to Goals">‚Äã</a></h4>
<ul>
<li>Check for any issue that previous manual and automated tests did not catch</li>
<li>Prove that specific criteria are met (usually, validating the technical side of the feature)</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-staging-environment">The staging environment<a href="https://tinaeldevresse.eu/blog/deployment-environments#the-staging-environment" class="hash-link" aria-label="Direct link to The staging environment" title="Direct link to The staging environment">‚Äã</a></h3>
<p>This environment has a lot of names. People call it "pre-production" or even User Acceptance Testing (UAT).
It is usually meant to simulate Production in as many ways as possible. It can be used to demo new features, ask for feedback from selected users validating the end to end business flow and train clients on upcoming changes.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="goals-3">Goals<a href="https://tinaeldevresse.eu/blog/deployment-environments#goals-3" class="hash-link" aria-label="Direct link to Goals" title="Direct link to Goals">‚Äã</a></h4>
<ul>
<li>Prevent releasing bugs to production</li>
<li>Validate end to end business flow</li>
<li>Train high-touch clients on new changes</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-production-environment">The production environment<a href="https://tinaeldevresse.eu/blog/deployment-environments#the-production-environment" class="hash-link" aria-label="Direct link to The production environment" title="Direct link to The production environment">‚Äã</a></h3>
<p>This is the sacred environment which you should never break. Real customers are using it. If you break it, you lose money. Got it?</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="goals-4">Goals<a href="https://tinaeldevresse.eu/blog/deployment-environments#goals-4" class="hash-link" aria-label="Direct link to Goals" title="Direct link to Goals">‚Äã</a></h4>
<ul>
<li>Be the last depositary of all other environments.</li>
<li>Give the customers the solution to their problem(s) on a specific topic</li>
<li>Be reliable, bug free, always up and running</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="how-to-choose-your-environments-pipeline">How to choose your environments pipeline?<a href="https://tinaeldevresse.eu/blog/deployment-environments#how-to-choose-your-environments-pipeline" class="hash-link" aria-label="Direct link to How to choose your environments pipeline?" title="Direct link to How to choose your environments pipeline?">‚Äã</a></h2>
<p>You don't randomly choose between carved-in-stone pipelines that will answer all your needs. Pipelines are specially built for <em>the project to be deployed</em>.
I have seen a few things here and there, and there are a lot of hosting companies like Heroku which offer help to set up your deployment pipeline.</p>
<p>The following figure shows a few pipelines I heard of, have been working with or am actually using. Let's say each pipeline is the default one for companies A, B &amp; C.</p>
<figure><img src="https://tinaeldevresse.eu/img/deployment-environments.svg" alt="Deployment Environments" type="img"><figcaption class="legend_Ecw3"><p>Schema of companies A, B &amp; C 's deployment pipelines</p></figcaption></figure>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="company-a">Company A<a href="https://tinaeldevresse.eu/blog/deployment-environments#company-a" class="hash-link" aria-label="Direct link to Company A" title="Direct link to Company A">‚Äã</a></h3>
<p>This corporation uses a well-known design called the DTAP approach standing for Development - Testing - Acceptance - Production.
This is the most standard pipeline you can have. It is usually used (not as is, but largely edited) in big companies.</p>
<p>However, the schema for this company has a few particularities I want to talk about : the number of running instances in each environment.
The schema shows that you can choose between having a single instance of your application or several ones running at a stage of the process.</p>
<p>Obviously, choosing to host several instances at the same time costs more and has its cons but brings a few advantages :</p>
<ul>
<li>You can deploy specific features on a specific instance.</li>
<li>It allows your development team to work in smaller groups (e.g.: team 1 works on list 1 of features in instance 1; team 2 on list 2 in instance 2; ...).</li>
<li>It's cool to see when your instance runs smoothly and the others are down because they fucked up (don't get blind though, you'll get by that damn road as well).</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="company-b--company-c">Company B &amp; Company C<a href="https://tinaeldevresse.eu/blog/deployment-environments#company-b--company-c" class="hash-link" aria-label="Direct link to Company B &amp; Company C" title="Direct link to Company B &amp; Company C">‚Äã</a></h3>
<p>These companies got rid of the "test" environment. This happens when you can afford to test your flow along with everything else in either your development environment or your staging environment. It is also a possibility for small teams.</p>
<p>The only difference between these two are the number of instances running at each stage. When building a small project, you usually go for company C's plan as there are less steps to do in order to deploy and go from one environment to another.</p>
<p>In my humble opinion, I like the schema C but I'd rather simplify it again. For example, when I work on a Discord bot (<a href="https://discord.com/" target="_blank" rel="noopener noreferrer">if you don't know Discord, check it out</a>), I use :</p>
<ul>
<li>my local environment running locally and connecting to Cloud resources (such as a database and Discord's web service),</li>
<li>the dev/staging environment (<em>yep, it's a single env</em>) running the beta version of the bot, and</li>
<li>the production environment which hosts the final version of the bot available for Discord users.</li>
</ul>
<p>I cannot give you some sacred deployment approach dipped in magic sauce that will perfectly work for all your projects because it does not exist.
You must come up with your own custom plan. But these defaults should at least guide you for a bit!</p>
<p><strong>And you guys, what does your favorite deployment pipeline look like?</strong></p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a href="https://tinaeldevresse.eu/blog/deployment-environments#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">‚Äã</a></h2>
<p>Deployment environments are a big story and this article only has the purpose to gently half-open a door.
As the DevOps trend is more and more intriguing in the eyes of companies, it is a plus to have experience with such things.</p>
<p>I hope you will fully open the doors I wish to show you. Until then, see you next time!</p>
<div class="formContainer_ssZr"><h3>Stay up to date, subscribe to my newsletter!</h3><div class="inputContainer_rIzC"><input class="input_xw7i" type="email" placeholder="Enter your email address" required="" autocomplete="email"><a class="submit_jbGj tooltip" rel="noopener" type="submit"><svg aria-hidden="true" focusable="false" data-prefix="far" data-icon="paper-plane" class="svg-inline--fa fa-paper-plane fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M440 6.5L24 246.4c-34.4 19.9-31.1 70.8 5.7 85.9L144 379.6V464c0 46.4 59.2 65.5 86.6 28.6l43.8-59.1 111.9 46.2c5.9 2.4 12.1 3.6 18.3 3.6 8.2 0 16.3-2.1 23.6-6.2 12.8-7.2 21.6-20 23.9-34.5l59.4-387.2c6.1-40.1-36.9-68.8-71.5-48.9zM192 464v-64.6l36.6 15.1L192 464zm212.6-28.7l-153.8-63.5L391 169.5c10.7-15.5-9.5-33.5-23.7-21.2L155.8 332.6 48 288 464 48l-59.4 387.3z"></path></svg><span class="tooltipText">Submit!</span></a></div></div>]]></content>
        <category label="deployment" term="deployment"/>
        <category label="environment" term="environment"/>
        <category label="application environment" term="application environment"/>
        <category label="environment pipeline" term="environment pipeline"/>
        <category label="CI/CD" term="CI/CD"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[What Makes a Good Developer?]]></title>
        <id>https://tinaeldevresse.eu/blog/what-makes-a-good-developer</id>
        <link href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer"/>
        <updated>2020-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hey there! Welcome to my new blog website. For my first start here, I'd like to introduce you to the key points which I think are the most important for a develop...]]></summary>
        <content type="html"><![CDATA[<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer"></a><figure><a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer"><img src="https://tinaeldevresse.eu/img/what-makes-a-good-developer.jpg" alt="What Makes a Good Developer" type="image"></a><figcaption class="legend_Ecw3"><a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer"></a><p><a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer">Photo by </a><a target="_blank" href="https://unsplash.com/@anniespratt" rel="noreferrer noopener nofollow">Annie Spratt</a> on <a target="_blank" href="https://unsplash.com/photos/QckxruozjRg" rel="noreferrer noopener nofollow">Unsplash</a></p></figcaption></figure>
<p>Hey there! Welcome to my new blog website. For my first start here, I'd like to introduce you to the key points which I think are the most important for a developer in their daily job!</p>
<!-- -->
<!-- -->
<hr>
<div class="center"><span class="italic">Just a quick reminder: the opinions expressed here are stricly my own. They do not represent the opinions or views of my current employer nor any of my previous ones.</span></div>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="1-think-before-write">1. Think before write<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#1-think-before-write" class="hash-link" aria-label="Direct link to 1. Think before write" title="Direct link to 1. Think before write">‚Äã</a></h2>
<p>I sometimes see young developers jump right into programming their application without even according themself a moment to think about it. Of course, it will work for little easy programs with a few features. But as soon as it comes to building an entire application with different complex layers, it is mandatory to spend your time to take notes, analyze, draw schemas and make researches before writing anything.</p>
<figure><img src="https://tinaeldevresse.eu/img/looking.gif" alt="Looking Logan Lerman GIF" type="image"><figcaption class="legend_Ecw3"></figcaption></figure>
<p>A lot of applications are somehow unmaintenable due to poor or lack of analysis. And trust me, I have seen many projects falling apart because of that. <strong>Beware, fellow developers!</strong> You always want the best for your work.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="2-communicate">2. Communicate<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#2-communicate" class="hash-link" aria-label="Direct link to 2. Communicate" title="Direct link to 2. Communicate">‚Äã</a></h2>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="21-get-to-know-your-client">2.1. Get to know your client<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#21-get-to-know-your-client" class="hash-link" aria-label="Direct link to 2.1. Get to know your client" title="Direct link to 2.1. Get to know your client">‚Äã</a></h3>
<p>Everything you build for your client should be the result of a need. To identify the best way to create the product <em>they</em> want, you should get to know your client. Learn what they do, how they do it and ask them questions on how they feel about it. If you want to make your client happy, you first need to know what can make them happy! <!-- -->üòâ</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="22-talk-with-your-team">2.2. Talk with your team<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#22-talk-with-your-team" class="hash-link" aria-label="Direct link to 2.2. Talk with your team" title="Direct link to 2.2. Talk with your team">‚Äã</a></h3>
<p>It's true that you gonna spend most of your time in front of your computer. But don't underestimate the social side of your job! As a developer, collaborating with your team is really important.
Who do you ask if you face problems? How should you proceed when you discover a bug in production? What do you do when you want to take a break from work? Each company has its way to deal with specific situations.
Talking with your colleagues opens you to know more about your company and the context within which you are developing.</p>
<p>It also makes it easier to work on a project's development with everyone. When you talk with your colleagues, you guarantee that you're not working on something which is already done or being developed by someone else at the moment.
It is also a good thing to talk with the other developers if you have any blocking points as they might have experienced it before you. Being able to tackle problems quickly and release in the time allocated is a critical point for your developer career. It's your responsability to be productive and accurately estimate the time needed to complete tasks and complete them in the expected time.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="3-follow-established-practices">3. Follow established practices<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#3-follow-established-practices" class="hash-link" aria-label="Direct link to 3. Follow established practices" title="Direct link to 3. Follow established practices">‚Äã</a></h2>
<p>This point is kind of related to the previous. As soon as you identify standards and best practices used within the company, you can work efficiently in compliance with what is expected from you. Talk with your team, ask questions, check all the things you can and agree on common conventions. This is not only important for the future of the current project you are assigned to, but also for your own career and reputation.</p>
<p>Although, don't fear to look for ways to improve the process if you think it can increase the productivity and the efficiency of everyone.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="4-be-lazy">4. Be lazy<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#4-be-lazy" class="hash-link" aria-label="Direct link to 4. Be lazy" title="Direct link to 4. Be lazy">‚Äã</a></h2>
<p>The first principle you should always follow when doing your dev job is to be lazy. But watch out, I'm not saying that you should chill out any time of the day.
Nah! I mean that you should <strong>focus on delivering the minimum viable asked product</strong>. Don't implement something that hasn't been asked by the client because "it will be useful one day". That's bullshit. You are most likely to have an unused code which nobody wants to remove because they don't know its purpose and if its removal is going to break anything. Ew.</p>
<figure><img src="https://tinaeldevresse.eu/img/dont-reinvent-the-wheel.png" alt="theres no need to reinvent the wheel - meme" type="image"><figcaption class="legend_Ecw3"></figcaption></figure>
<p><code>Don't Reinvent The Wheel</code> is a beautiful example of being lazy. Don't spend your time doing something someone has already been doing far better than you. Just use their work! If you need to change a few things, you can still come back and edit it later.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="5-write-code">5. Write code<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#5-write-code" class="hash-link" aria-label="Direct link to 5. Write code" title="Direct link to 5. Write code">‚Äã</a></h2>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="51-write-clean--working-code">5.1. Write clean &amp; working code<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#51-write-clean--working-code" class="hash-link" aria-label="Direct link to 5.1. Write clean &amp; working code" title="Direct link to 5.1. Write clean &amp; working code">‚Äã</a></h3>
<p>This could sound silly but you are paid to <strong>make things work</strong>. But don't just throw instructions in a file and hope that they work properly. The sooner you make things good, the better the application will be.
Navdeep Singh wrote a story about <a href="https://medium.com/better-programming/good-code-vs-bad-code-35624b4e91bc" target="_blank" rel="noopener noreferrer" title="Good Code vs Bad Code">why writing good code matters, and how to do it</a>. Check it out, it's neat!</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="52-write-easily-maintenable--enhanceable-code">5.2. Write easily maintenable &amp; enhanceable code<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#52-write-easily-maintenable--enhanceable-code" class="hash-link" aria-label="Direct link to 5.2. Write easily maintenable &amp; enhanceable code" title="Direct link to 5.2. Write easily maintenable &amp; enhanceable code">‚Äã</a></h3>
<p>It's cool to have a code that works and does what it's expected to do.
However even if your code is understood by the computer, is it by humans? At some point, there will be another developer who will have to read your code and edit it. And it should be crystal clear for them.</p>
<p>Always think about how obvious your code is when writing it. Company's standards and best practices won't help you write understandable code. It's more or less the same situation when you're explaining your job to someone who's not IT: you <strong>make things simple</strong>.
Keep in mind that you are actually writing a part of an app that will someday be refactored by someone else. And you obviously don't want people to curse you when they stumble on your code.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="53-test-your-code">5.3. Test your code<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#53-test-your-code" class="hash-link" aria-label="Direct link to 5.3. Test your code" title="Direct link to 5.3. Test your code">‚Äã</a></h3>
<p>Why should you test your code? You're sure it works fine but still! You really don't know your end users...</p>
<figure><img src="https://tinaeldevresse.eu/img/people-using-your-stuff-meme.jpg" alt="When you get to see people using your program - meme" type="image" style="margin:0 auto"><figcaption class="legend_Ecw3"></figcaption></figure>
<p>I highly recommend project's managers to use the <a href="https://medium.com/hackernoon/introduction-to-test-driven-development-tdd-61a13bc92d92" target="_blank" rel="noopener noreferrer"><strong>T</strong>est-<strong>D</strong>riven <strong>D</strong>evelopment</a> methodology for their projects.
Testing in software development is in my humble opinion the most important step in the process of product development. And there are many reasons to support this fact. Here are a few examples:</p>
<ul>
<li><strong>it ensures the product quality</strong>: it prevents introducing avoidable bugs in the production environment;</li>
<li><strong>it saves money and time</strong>: you can build things and be sure changes (e.g. optimization) won't break working stuff thus forcing you to check why feature X is not doing things as expected while you only edited feature Y;</li>
<li><strong>it helps secure the app</strong>: it makes sure there are as little breaches as possible (everybody knows "zero risk" is a myth).</li>
</ul>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="6-see-things-from-the-users-standpoint">6. See things from the user's standpoint<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#6-see-things-from-the-users-standpoint" class="hash-link" aria-label="Direct link to 6. See things from the user's standpoint" title="Direct link to 6. See things from the user's standpoint">‚Äã</a></h2>
<p>Empathy is really a bonus for developers. To put yourself in the place of the customer allows you to build easy-to-understand and easy-to-use applications.</p>
<p>Talk with UX designers if you think your app feels too complicated to use when its purpose is as simple as drinking coffee from a cup...</p>
<figure><img src="https://tinaeldevresse.eu/img/ui-vs-ux.png" alt="UI vs UX - meme" type="image"><figcaption class="legend_Ecw3"><p>From <a target="_blank" href="https://www.reddit.com/r/UI_Design/comments/bblxum/ui_vs_ux/" rel="noreferrer noopener nofollow">r/UI_Design</a></p></figcaption></figure>
<p>It's also a good thing to have testers in your team who will act as end user and check if there is anything which doesn't feel right, produces bugs, is overcomplicated, etc.
They obviously play an important role in the development of a project.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="7-be-curious-and-improve-your-knowledge-and-skills">7. Be curious and improve your knowledge and skills<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#7-be-curious-and-improve-your-knowledge-and-skills" class="hash-link" aria-label="Direct link to 7. Be curious and improve your knowledge and skills" title="Direct link to 7. Be curious and improve your knowledge and skills">‚Äã</a></h2>
<p>This is the last bit of my post and I wanted to share the best advice someone gave me once... <strong>Be curious about everything!</strong> There are plenty of things and everyday brings a full new set of libraries, protocols, etc. There isn't enough lifetime to learn all on everything although it doesn't mean you shouldn't stay up to date.
Here are a few things I personally do to keep me updated on my favorite topics and improve my knowledge &amp; skills:</p>
<ul>
<li>
<p>I try to always choose the challenging and hard work over the easy and already-done-several-times tasks.</p>
</li>
<li>
<p>I go to events and meet people.
The DevDay, the DevFM and other events organized by the <a href="http://www.mic-belgique.be/" target="_blank" rel="noopener noreferrer" title="MIC's website">MIC Belgique</a>.</p>
</li>
<li>
<p>I get involved in communities.
For example, I'm an active member of SpaceY!</p>
</li>
<li>
<p>I try to help people (e.g. lend a hand in open-source projects).</p>
</li>
</ul>
<p>The best thing you can do is to be proactive. Be passionate by your job like you are for everything that brings you joy!</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a href="https://tinaeldevresse.eu/blog/what-makes-a-good-developer#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">‚Äã</a></h2>
<p>Developers are not common resources. Good developer are even more rare. Stay involved and always question yourself. I am convinced this is how we learn!</p>
<p><strong>What about you? What do you think makes a good developer?</strong></p>
<div class="formContainer_ssZr"><h3>Stay up to date, subscribe to my newsletter!</h3><div class="inputContainer_rIzC"><input class="input_xw7i" type="email" placeholder="Enter your email address" required="" autocomplete="email"><a class="submit_jbGj tooltip" rel="noopener" type="submit"><svg aria-hidden="true" focusable="false" data-prefix="far" data-icon="paper-plane" class="svg-inline--fa fa-paper-plane fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M440 6.5L24 246.4c-34.4 19.9-31.1 70.8 5.7 85.9L144 379.6V464c0 46.4 59.2 65.5 86.6 28.6l43.8-59.1 111.9 46.2c5.9 2.4 12.1 3.6 18.3 3.6 8.2 0 16.3-2.1 23.6-6.2 12.8-7.2 21.6-20 23.9-34.5l59.4-387.2c6.1-40.1-36.9-68.8-71.5-48.9zM192 464v-64.6l36.6 15.1L192 464zm212.6-28.7l-153.8-63.5L391 169.5c10.7-15.5-9.5-33.5-23.7-21.2L155.8 332.6 48 288 464 48l-59.4 387.3z"></path></svg><span class="tooltipText">Submit!</span></a></div></div>]]></content>
        <category label="best practices" term="best practices"/>
        <category label="careers" term="careers"/>
        <category label="tech" term="tech"/>
    </entry>
</feed>