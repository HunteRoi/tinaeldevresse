"use strict";(self.webpackChunktinaeldevresse=self.webpackChunktinaeldevresse||[]).push([[1375],{441:function(e){e.exports=JSON.parse("{\"blogPosts\":[{\"id\":\"sharing-is-caring\",\"metadata\":{\"permalink\":\"/fr/blog/sharing-is-caring\",\"editUrl\":\"https://github.com/hunteroi/tinaeldevresse.eu/tree/master/blog/2023-04-06-sharing-is-caring.mdx\",\"source\":\"@site/i18n/fr/docusaurus-plugin-content-blog/2023-04-06-sharing-is-caring.mdx\",\"title\":\"Le partage, c'est l'entraide\",\"description\":\"Depuis un moment maintenant, je r\xe9fl\xe9chis \xe0 ma carri\xe8re et \xe0 comment je voudrais qu'elle \xe9volue. T'y penses aussi, non ? \xc0 chaque entretien en tant que jeune travailleur, on te demande \\\"o\xf9 est-ce que vous vous voyez dans x ann\xe9es ?\\\". Je n'ai pas eu la pi\xe8ce qui tombe tout de suite, mais avec l'exp\xe9rience, tu apprends et comprends ce que tu aimes et plus sp\xe9cifiquement ce que tu n'aimes pas. Finalement, o\xf9 est-ce que je me vois dans quelques ann\xe9es ?\",\"date\":\"2023-04-06T00:00:00.000Z\",\"formattedDate\":\"6 avril 2023\",\"tags\":[{\"label\":\"d\xe9veloppement\",\"permalink\":\"/fr/blog/tags/developpement\"},{\"label\":\"coach\",\"permalink\":\"/fr/blog/tags/coach\"},{\"label\":\"agilit\xe9\",\"permalink\":\"/fr/blog/tags/agilite\"},{\"label\":\"IT\",\"permalink\":\"/fr/blog/tags/it\"},{\"label\":\"art\",\"permalink\":\"/fr/blog/tags/art\"},{\"label\":\"artisan d\xe9veloppeur\",\"permalink\":\"/fr/blog/tags/artisan-developpeur\"}],\"readingTime\":9.94,\"hasTruncateMarker\":true,\"authors\":[],\"frontMatter\":{\"slug\":\"sharing-is-caring\",\"title\":\"Le partage, c'est l'entraide\",\"tags\":[\"d\xe9veloppement\",\"coach\",\"agilit\xe9\",\"IT\",\"art\",\"artisan d\xe9veloppeur\"],\"description\":\"Depuis un moment maintenant, je r\xe9fl\xe9chis \xe0 ma carri\xe8re et \xe0 comment je voudrais qu'elle \xe9volue. T'y penses aussi, non ? \xc0 chaque entretien en tant que jeune travailleur, on te demande \\\"o\xf9 est-ce que vous vous voyez dans x ann\xe9es ?\\\". Je n'ai pas eu la pi\xe8ce qui tombe tout de suite, mais avec l'exp\xe9rience, tu apprends et comprends ce que tu aimes et plus sp\xe9cifiquement ce que tu n'aimes pas. Finalement, o\xf9 est-ce que je me vois dans quelques ann\xe9es ?\",\"image\":\"/img/coaching.jpg\"},\"nextItem\":{\"title\":\"Quelle architecture j'utilise pour mes projets?\",\"permalink\":\"/fr/blog/why-did-i-switch-to-clean-architecture\"}},\"content\":\"import Figure from '../../../src/components/Figure';\\nimport SEO from '../../../src/components/SEO';\\nimport Reminder from '../../../src/components/Reminder';\\nimport Newsletter from '../../../src/components/Newsletter';\\nimport { MAILCHIMP_URL } from '../../../website_config.json';\\n\\n<a href='/blog/sharing-is-caring'>\\n    <Figure\\n        data={{\\n            src: '/img/coaching.jpg',\\n            alt: 'Example Mapping utilis\xe9 pour r\xe9cup\xe9rer des retours sur ma session de coaching',\\n            type: 'image'\\n        }}\\n    >\\n        Les retours de mon client sur ma premi\xe8re mission de coaching\\n    </Figure>\\n</a>\\n\\nDepuis un moment maintenant, je r\xe9fl\xe9chis \xe0 ma carri\xe8re et \xe0 comment je voudrais qu'elle \xe9volue.\\nT'y penses aussi, non ? \xc0 chaque entretien en tant que jeune travailleur, on te demande \\\"o\xf9 est-ce que vous vous voyez dans x ann\xe9es ?\\\".\\nJe n'ai pas eu la pi\xe8ce qui tombe tout de suite, mais avec l'exp\xe9rience, tu apprends et comprends ce que tu aimes et plus sp\xe9cifiquement ce que tu n'aimes pas.\\n\\nFinalement, o\xf9 est-ce que je me vois dans quelques ann\xe9es ?\\n\\n\x3c!--truncate--\x3e\\n\\n<SEO\\n    uri='blog/sharing-is-caring'\\n    image='img/coaching.jpg'\\n    type='article'\\n/>\\n\\n---\\n\\n<Reminder />\\n\\n---\\n\\nSi tu me connais, tu sais probablement que je dirige ma carri\xe8re professionnelle vers l'apprentissage continu (pour moi comme pour ceux en face de moi !).\\nDans cet article, je vais tenter d'expliquer pourquoi j'ai pris cette d\xe9cision et vers o\xf9 je me dirige dans le futur.\\n\\n## Un peu de contexte\\n\\nJ'ai toujours \xe9t\xe9 \xe9clectique. J'aime essayer de nouvelles choses et voir comment je le fais (et comprendre comment je le peux faire mieux).\\nC'est l'une des raisons pour lesquelles j'ai d\xe9cid\xe9 d'\xe9tudier l'informatique d'ailleurs.\\n\\nDans ce secteur, apprendre et partager les connaissances et l'exp\xe9rience est un _must_.\\nL'informatique repr\xe9sente un monde qui bouge bien plus vite que tous les autres que je connais.\\nHier, tu aurais engag\xe9 quelqu'un pour construire ton site web.\\nAujourd'hui, tu peux le faire toi-m\xeame avec ChatGPT et d'autres IAs qui font le gros du travail pour toi.\\nLe fait que tout va si vite et que tu ne peux pas ma\xeetriser chacune des technologies qui existe dans ce monde rend le constat tr\xe8s clair:\\n- Arr\xeate d'essayer de tout savoir, fais confiance aux autres et apprends d'eux !\\n- Tout le monde ne sait pas tout, laisse les autres apprendre de toi !\\n- Le travail d'\xe9quipe fait la diff\xe9rence, crois en les autres.\\n\\nBien que je loue le fait de travailler en \xe9quipe, nous sommes \xe0 la porte d'une nouvelle \xe8re dans notre soci\xe9t\xe9 : il y a beaucoup plus de gens\\navec 20-30 ans d'exp\xe9rience que de jeunes dans les entreprises et ils n'en sont pas encore \xe0 la retraite.\\nCela a 2 incov\xe9nients :\\n1. Ces profils exp\xe9riment\xe9s ne sont pas toujours volontaires pour mettre garder leur connaissance du monde IT \xe0 jour (et je peux comprendre qu'ils sont fatigu\xe9s et qu'ils arr\xeateront bient\xf4t de travailler)\\npuis ils n'aiment pas forc\xe9ment partager avec les autres.\\n2. La diff\xe9rence d'\xe2ge rend difficile de se connecter avec les nouveaux venus.\\n\\n## Carri\xe8re courte mais un tas d'exp\xe9riences\\n\\nPour \xeatre honn\xeate, j'ai boss\xe9 pour plusieurs entreprises dans ma carri\xe8re. Je voulais voir si l'herbe \xe9tait plus verte ci et l\xe0.\\nEt j'ai toujours vu la m\xeame chose : des profils uniques essayant soit de tirer vers le haut les \xe9quipes et les projets\\nou condamnant toute chose et tout personne, ralentissant les progr\xe8s et br\xfblant de l'argent inutilement. Malheureusement pour moi, \xe7a a plus souvent \xe9t\xe9 le second cas de figure.\\nNe te d\xe9trompe pas, cela dit ! J'adore cr\xe9er. J'adore travailler en \xe9quipe afin d'amener les solutions des gens \xe0 la vie. Et j'adore particuli\xe8rement apprendre.\\nMais apr\xe8s 3 ans de travail professionnel dans des entreprises vari\xe9es, je me suis lass\xe9 de _ces gens qui ne visent pas l'excellence comme moi_.\\nJe veux dire, pourquoi d\xe9velopperais-tu une solution digitale si c'est pour mal le faire ? Tout ce que tu fais, c'est soit tirer une balle dans le futur-toi\\nou dans l'un de tes coll\xe8gues qui va devoir le maintenir dans le futur.\\nTout cela est exactement la raison pour laquelle j'ai d\xe9cid\xe9 de renverser les r\xf4les.\\n\\nJ'ai d\xe9cid\xe9 de pencher sur ce probl\xe8me afin d'\xe9viter aux autres l'impression de faire des efforts st\xe9riles.\\nJe voulais \xe9viter les \xe9puisements inutiles comme beaucoup d'autres avant moi qui se sont lass\xe9s de s'efforcer \xe0 perte.\\n\\n## Tout vient \xe0 point \xe0 qui sait attendre\\n\\nDurant ces 2 derni\xe8res ann\xe9es, j'ai cherch\xe9 un moyen d'am\xe9liorer la valeur que nous, d\xe9veloppeurs, amenons \xe0 nos business.\\nMais en r\xe9alit\xe9, j'ai principalement cherch\xe9 des moyens d'\xe9viter la fatigue, l'\xe9puisement et le surmenage.\\nEn effet, je ressentais mes niveaux de stress et de fatigue augmenter bien au dessus de la moyenne. Je ne pouvais pas le supporter, mais je n'avais aucune id\xe9e de comment\\nr\xe9gler ces probl\xe8mes...\\n\\n\xc9tonnament pour moi, en 2021, j'ai re\xe7u un message d'une ancienne professeure.\\nElle me demandait si j'\xe9tais d'accord de prendre quelques heures \xe0 l'universit\xe9 pour remplacer un coll\xe8gue malade.\\nCe fut le d\xe9clic. Revenir l\xe0 o\xf9 tout a commenc\xe9, l\xe0 o\xf9 j'ai appris mon m\xe9tier, \xe7a m'a fait r\xe9aliser plein de choses! \ud83e\udd29\\n\\nJ'avais \xe9volu\xe9. Mes exp\xe9riences dans le monde professionnel m'ont connect\xe9 \xe0 des connaissances et des gens. J'ai d\xe9couvert de nouvelles fa\xe7ons de travailler,\\nde nouvelles mani\xe8res de penser et j'ai rencontr\xe9 mon id\xe9al. **J'ai compris que je voulais apprendre, mais surtout enseigner.**\\n\\nDepuis lors, je partage mes connaissances, mon \xe9tat d'esprit et comment l'excellence technique peut apporter le bonheur dans le bon environnement.\\nQue cela soit pour des \xe9tudiants \xe0 l'H\xe9nallux, ou pour mes clients face \xe0 des coll\xe8gues.\\n\\nEt cela m'a fait r\xe9aliser o\xf9 je voulais aller... \ud83c\udfeb\\n\\n## Retour aux sources\\n\\nAs-tu d\xe9j\xe0 eu cette sensation de ne pas comprendre l'enti\xe8ret\xe9 d'un concept expliqu\xe9 durant un cours, une formation ou que sais-je ?\\nNe t'inqui\xe8te pas, tu n'es pas le seul ! J'ai \xe9t\xe9 dipl\xf4m\xe9 en 2019. Relire maintenant les m\xeames cours que j'ai eu \xe0 l'\xe9poque, waw quelle diff\xe9rence!\\nJ'ai pu r\xe9ellement voir que je m'\xe9tais am\xe9lior\xe9 et que j'avais appris un tas de choses en peu de temps.\\nC'est vraiment exaltant pour l'avenir ! \ud83d\ude03\\n\\nCependant, c'est assez \xe9trange pour un gars de 24 ans d'enseigner \xe0 des gens de son \xe2ge ou parfois m\xeame plus \xe2g\xe9.\\nEt je dois l'admettre, me forcer \xe0 _retourner aux sources_, \xe0 comprendre ce que je dois enseigner afin de le vulgariser\\net **partager ma passion**, c'est r\xe9ellement une exp\xe9rience grandissante.\\n\\nAu d\xe9but, \xeatre prof, j'en \xe9tais pas s\xfbr. C'est vrai quoi ! Tout le monde a sa part du syndr\xf4me de l'imposteur \xe0 g\xe9rer, non ?\\nMais en r\xe9alit\xe9, \xe0 chaque fois que j'ai re\xe7u une nouvelle responsabilit\xe9 l\xe0-bas, je me suis prouv\xe9 le contraire.\\nJe suis rentr\xe9 dans la classe, j'ai fait mon truc et tout le monde est reparti content (enfin sauf quand je donne des devoirs \ud83d\ude01).\\n\\nMais j'ai continu\xe9 \xe0 me demander... Pourquoi est-ce si compliqu\xe9 de travailler si toutes ces connaissances sont disponibles et personne ne les conna\xeet (ou les utilise) ?\\nJ'ai l'impression que la majorit\xe9 des professionnels actuels, souvent plus vieux que moi, manque d'un \xe9l\xe9ment fondamental : l'\xe9tat d'esprit.\\n\xc0 l'H\xe9nallux, nous n'apprenons pas un langage ou un mod\xe8le de conception sp\xe9cifique. Nous tentons d'apprendre aux \xe9tudiants \xe0 continuellement s'am\xe9liorer par eux-m\xeames.\\nCela n'a aucune importance que tu saches faire du C++, du Cobol, du NodeJS ou du Python. Cela n'a aucune importance que tu ne connaisses pas tous les d\xe9tails\\nsur le r\xe9seau ou que tu n'aies jamais exp\xe9riment\xe9 tous les syst\xe8mes d'op\xe9ration. _Tu peux t'apprendre \xe0 toi-m\xeame ! \ud83e\udd13_\\n\\n## Apprendre \xe0 des pros ?\\n\\nQuand je travaillais au Luxembourg, j'ai rencontr\xe9 des personnes exceptionnelles que j'ai imm\xe9diatement consid\xe9r\xe9s comme des mentors (\ud83d\udc4b [Guillaume Faas](https://www.linkedin.com/in/guillaumefaas/) & [Yoan Thirion](https://www.linkedin.com/in/yoanthirion/)).\\nJe veux dire... ils ont l'\xe9tat d'esprit eux ! 3 jours en leur compagnie ont une bien plus grande valeur que 5 semaines pass\xe9s n'importe o\xf9 ailleurs en terme d'apprentissage.\\nJ'ai ramen\xe9 \xe7a avec moi quand je suis revenu en Belgique (pas eux \xe9videmment..! mais bien leur mani\xe8re de partager ce qu'ils savent, et pourquoi ils le font \ud83e\uddd1\u200d\ud83c\udfeb).\\n\\n\xc0 travers mon employeur actuel, j'ai boss\xe9 pour des clients vari\xe9s qui me voyaient principalement en tant que d\xe9veloppeur.\\nMais mon int\xe9r\xeat se trouve dans le fait d'aider mes clients \xe0 s'am\xe9liorer.\\nJ'ai commenc\xe9 \xe0 chercher des missions challengeantes o\xf9 je pouvais \xeatre plus qu'un d\xe9veloppeur, o\xf9 je pouvais autant leur apprendre qu'en apprendre d'eux.\\n\\nPuis c'est arriv\xe9. J'ai eu l'invraisemblable chance d'apporter mon expertise dans une merveilleuse startup wallonne appel\xe9e [Pluriell](https://pluriell.app/).\\nCette nouvelle aventure \u2013 ma premi\xe8re mission de coach \u2013 a \xe9t\xe9 extr\xeament positive pour ce client! Et pour moi aussi! \ud83e\udd70\\n\xc0 travers de nombreuses discussions, pr\xe9sentations, des accompagnements personnalis\xe9s pour des probl\xe8mes sp\xe9cifiques, et des katas, je pense leur avoir apporter une nouvelle vision,\\nde nouvelles m\xe9thodologies, des normes et des objectifs mais surtout de la confiance et des connaissances dans ce qu'ils pourraient faire/font bien et dans ce qu'ils pourraient faire/font mal.\\n\\nLors qu'on entame la partie \\\"ce que j'en ai tir\xe9\\\", et qu'on met de c\xf4t\xe9 le fait que cela a \xe9largi mon point de vue sur la fa\xe7on dont on fonctionne une startup belge,\\nje peux dire que \xe7a m'a apport\xe9 plus d'exp\xe9rience et de relation en tant que coach.\\nPuis \xe7a a d\xe9finitivement renforc\xe9 ma volont\xe9 d'interagir avec les autres, d'enseigner et d'apprendre d'eux.\\nEt honn\xeatement, avec des professionnels exp\xe9riment\xe9s comme Yoan et Guillaume derri\xe8re moi pour me montrer le chemin, je me suis senti comme sur un petit nuage \u2601\ufe0f\\n\\nDans une mise \xe0 jour plus r\xe9cente de ma vie, je suis devenu un co-organisateur du [Software Craftsmanship Luxembourg meetup](https://www.meetup.com/software-craft-luxembourg/)\\navec Guillaume et [Arthur Grailet](https://www.linkedin.com/in/arthur-grailet-a647a1189/), meetup \xe0 travers lequel nous nous rassemblons avec d'autres individus incroyables pour partager nos compr\xe9hensions..\\nJ'apprends toujours les fic\xe8les, mais faire partie de cette communaut\xe9 et me forcer \xe0 sortir de ma zone de confort sont vraiment des choses qui me manquaient en n'\xe9tant plus \xe9tudiant.\\n\\n<a href='https://sathishkannan162.github.io/the-one-genius-lone-genius-myth/'>\\n    <Figure\\n        data={{\\n            src: '/img/no-genius-only-scenius.jpeg',\\n            alt: 'No genius, only scenius',\\n            type: 'image'\\n        }}\\n    >\\n        Il n'y a pas de g\xe9nie, juste des scenius!\\n    </Figure>\\n</a>\\n\\n## De dev \xe0 prof & coach\\n\\n\xcatre un prof est une chose. Quand tu dois te plonger dans le JavaScript ou expliquer comment \xe9crire des algorithmes efficaces \xe0 des\\npersonnes qui viennent tout juste de quitter les bancs de l'\xe9cole, \xe7a force \xe0 r\xe9fl\xe9chir.\\nMais coacher des gens bien plus exp\xe9riment\xe9s _dans leur propre domaine_... \xe7a, c'est nouveau! \ud83d\ude06\\n\\nJe pense que ces 2 r\xf4les m'apportent ce que je pense comme _\xeatre un vrai consultant informatique_ : aider concr\xe8tement les gens.\\nCela inclut \xe9videmment :\\n- de comprendre comment ils se sentent (parfois, il suffit simplement des les \xe9couter),\\n- de les aider \xe0 optimiser leur mani\xe8re de travailler en pointant vers ce qu'ils pourraient am\xe9liorer,\\n- mais aussi en leur montrant ce qu'ils font d\xe9j\xe0 de bien !\\nEt le plus important finalement... c'est de discuter, de donner des conseils bas\xe9s sur le contexte et d'apporter de la valeur.\\n\\nEnseigner et coacher... ce sont deux synonymes finalement.\\nL'id\xe9e, c'est de construire une histoire, la narrer et penser que les gens ont compris la morale qui s'y cache.\\nSi ce n'est pas le cas, \xe7a fait partie du boulot d'attaquer d'un autre angle pour leur apporter ce dont ils ont besoin pour avancer.\\n\\nJ'aime v\xe9ritablement ces m\xe9tiers. Tu as besoin de comprendre comment les gens pensent, et comment tu peux leur transmettre la bonne information (et \xe9motion).\\nTu dois ma\xeetriser ton sujet, et si pas : \xeatre transparent et admettre que tu ne sais pas tout.\\nIls n'en savent pas plus de toute fa\xe7on, donc tu peux (et devrais) simplement rechercher la r\xe9ponse avec eux pour que tout le monde \xe9volue! \u2934\ufe0f\\n\\n## Conclusion\\n\\nParfois, il faut revenir aux racines pour cro\xeetre \ud83c\udf33\\n\\nJ'attends avec impatience les prochaines surprises que la vie va mettre sur mon chemin, et je suis certain que tout le monde (et moi en particulier)\\nva en apprendre plus \xe0 travers ce voyage!\\n\\nD'ailleurs, si tu cherches un Coach Agile Technique, contacte-moi sur [LinkedIn](https://linkedin.com/in/tinael-devresse).\\n\\n<Newsletter url={MAILCHIMP_URL} />\"},{\"id\":\"why-did-i-switch-to-clean-architecture\",\"metadata\":{\"permalink\":\"/fr/blog/why-did-i-switch-to-clean-architecture\",\"editUrl\":\"https://github.com/hunteroi/tinaeldevresse.eu/tree/master/blog/2022-06-01-why-did-i-switch-to-clean-architecture.mdx\",\"source\":\"@site/i18n/fr/docusaurus-plugin-content-blog/2022-06-01-why-did-i-switch-to-clean-architecture.mdx\",\"title\":\"Quelle architecture j'utilise pour mes projets?\",\"description\":\"J'ai d\xe9cid\xe9 de parler du choix d'architecture que je prends quand je d\xe9veloppe mes apps!\",\"date\":\"2022-06-01T00:00:00.000Z\",\"formattedDate\":\"1 juin 2022\",\"tags\":[{\"label\":\"d\xe9veloppement\",\"permalink\":\"/fr/blog/tags/developpement\"},{\"label\":\"structure\",\"permalink\":\"/fr/blog/tags/structure\"},{\"label\":\"architecture\",\"permalink\":\"/fr/blog/tags/architecture\"}],\"readingTime\":8.915,\"hasTruncateMarker\":true,\"authors\":[],\"frontMatter\":{\"slug\":\"why-did-i-switch-to-clean-architecture\",\"title\":\"Quelle architecture j'utilise pour mes projets?\",\"tags\":[\"d\xe9veloppement\",\"structure\",\"architecture\"],\"description\":\"J'ai d\xe9cid\xe9 de parler du choix d'architecture que je prends quand je d\xe9veloppe mes apps!\",\"image\":\"/img/why-did-i-switch-to-clean-architecture.png\"},\"prevItem\":{\"title\":\"Le partage, c'est l'entraide\",\"permalink\":\"/fr/blog/sharing-is-caring\"},\"nextItem\":{\"title\":\"Les tests unitaires\",\"permalink\":\"/fr/blog/unit-testing\"}},\"content\":\"import Figure from '../../../src/components/Figure';\\nimport SEO from '../../../src/components/SEO';\\nimport Reminder from '../../../src/components/Reminder';\\nimport Newsletter from '../../../src/components/Newsletter';\\nimport { MAILCHIMP_URL } from '../../../website_config.json';\\n\\n<a href='/blog/why-did-i-switch-to-clean-architecture'>\\n    <Figure\\n        data={{\\n            src: '/img/why-did-i-switch-to-clean-architecture.png',\\n            alt: 'Mon Amour pour la Clean Architecture',\\n            type: 'image'\\n        }}\\n    />\\n</a>\\n\\nJ'ai d\xe9cid\xe9 de parler du choix d'architecture que je prends quand je d\xe9veloppe mes apps!\\n\\n\x3c!--truncate--\x3e\\n\\n<SEO\\n    uri='blog/why-did-i-switch-to-clean-architecture'\\n    image='img/why-did-i-switch-to-clean-architecture.png'\\n    type='article'\\n/>\\n\\n---\\n\\n<Reminder />\\n\\n---\\n\\nIl n'y a pas si longtemps, des coll\xe8gues m'ont pos\xe9 la question suivante:\\n\\n> Comment est-ce que tu structures tes projets puisque lorsqu'ils \xe9voluent, l'architecture \\\"N-Tier\\\" devient plus complexe et tend \xe0 cr\xe9er des solutions en d\xe9sordre.\\n\\nJe n'ai pas toutes les r\xe9ponses mais ce que j'ai r\xe9pondu est que si \xe7a touche \xe0 mes projets, je fais un simple choix:\\n\\n-   Si je travaille sur une app CRUD basique, je choisis d\xe9finitivement la 3-Tier architecture.\\n-   Mais si j'ai besoin de construire une application plus complexe qui n\xe9cessite une logique business importante et qui doit \\\"crier son but\\\",\\n    je choisis alors directement ce que Robert C. Martin a appel\xe9 [la Clean Architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html) en 2012.\\n    Bien s\xfbr, ma version ne suit pas strictement ce qu'Uncle Bob d\xe9crit dans son blog puisque je l'ai adapt\xe9 \xe0 mes besoins mais parlons-en!\\n\\nDe nos jours cependant, j'ai plut\xf4t tendance \xe0 faire pencher la balance en faveur du deuxi\xe8me choix.\\nMais **qu'est-ce que j'aime dans la Clean Architecture et pas dans la N-Tier?**\\n\\n## La N-Tier architecture\\n\\n### Qu'est-ce que c'est?\\n\\nPremi\xe8rement, \xe7a serait une honte de te parler de Clean Architecture et ne pas aborder l'enseignement que j'ai re\xe7u \xe0 l'\xe9cole : l'architecture n-tier.\\nCe type d'archi est courament pr\xe9sent\xe9 et confondu avec l'une de ses versions sp\xe9cifiques: l'architecture 3-tiers.\\n\\nCette archi place les donn\xe9es comme \xe9tant le coeur de l'application. Elle est compos\xe9e de 3 couches:\\n\\n1. la couche Pr\xe9sentation, responsable de pr\xe9senter l'information \xe0 l'ext\xe9rieur ;\\n2. la couche Logique, responsable de la logique business qui doit \xeatre appliqu\xe9e aux donn\xe9es ;\\n3. la couche Donn\xe9es, responsable de l'acc\xe8s aux donn\xe9es (ORM, base de donn\xe9es, etc.).\\n\\n<Figure\\n    data={{\\n        src: '/img/3-tier-architecture.jpg',\\n        alt: '3-tier schema',\\n        type: 'image'\\n    }}\\n/>\\n\\nBien s\xfbr, le \\\"n\\\" signifie qu'il peut y avoir plus ou moins de couches. Les \xe9l\xe9ments d\xe9crits ci-dessus ne repr\xe9sente qu'un d\xe9nominateur commun.\\nIl existe des structures identiques comme l'archi 2-tiers, la Couche Unique, la 4-tiers, ...\\nQuand on d\xe9veloppe un projet, on adapte l'architecture \xe0 ses besoins. Tu pourrais m\xeame sub-diviser les 3 couches ci-dessus en des sous-couches d\xe9pendamment de tes besoins.\\n\\n### Avantages & Inconv\xe9nients\\n\\nEn ce qui concerne les **avantages**, on peut lister les suivants:\\n\\n-   plus s\xe9curis\xe9 \u2014 la couche Pr\xe9sentation (typiquement l'UI) n'est pas directement reli\xe9e \xe0 la base de donn\xe9es. Toutes les connexions sont donc prot\xe9g\xe9es par la couche Logique.\\n-   facilement maintenable \u2014 au moment de sa \\\"cr\xe9ation\\\", cette archi permettait aux d\xe9veloppeurs de maintenir leurs projets plus facilement que les pr\xe9c\xe9dentes.\\n-   facilement \xe0 r\xe9utiliser \u2014 c'est bien plus facile de r\xe9utiliser la logique de chaque couche.\\n\\nVoyons voir ce qu'il en est des **inconv\xe9nients**:\\n\\n-   augmentation de l'effort \u2014 impl\xe9menter de nouvelles fonctionnalit\xe9s prend plus de temps puisque tu dois passer \xe0 travers toutes les couches.\\n    Changer une chose dans la couche Database oblige \xe9galement \xe0 r\xe9fl\xe9chir cette modification dans les couches Logique et Pr\xe9sentation puisqu'elles sont li\xe9es entre elles.\\n-   augmentation de la complexit\xe9 \u2014 quand la solution cro\xeet, elle devient plus difficile \xe0 garder propre, compr\xe9hensible et \xe0 pr\xe9dire l'impact de changements dans le code.\\n-   bien plus compliqu\xe9 \xe0 tester \u2014 impl\xe9menter des tests est beaucoup plus compliqu\xe9s parce que chaque couche est fortement coupl\xe9e \xe0 la couche qui suit.\\n\\n### Quand l'utiliser?\\n\\nD'apr\xe8s moi, utiliser l'architecture n-tier est un bon d\xe9but quand tu veux d\xe9velopper le prototype d'une id\xe9e parce que tu peux rapidement d\xe9montrer quelque chose.\\nCela va cependant tendre \xe0 rendre les choses moins bien dans le futur.\\n\\nTu pourrais aussi utiliser cette archi si tu dois construire une simple application qui r\xe9alise du CRUD.\\nD'ailleurs, c'est assez courant de faire \xe7a quand tu veux simplement lire le contenu d'une base de donn\xe9es. Je l'ai fait chez l'un de mes employeurs un jour.\\n\\n## La Clean Architecture\\n\\n### Qu'est-ce que c'est?\\n\\n<Figure\\n    data={{\\n        src: '/img/clean-architecture.jpg',\\n        alt: 'Onion schema of CA',\\n        type: 'image'\\n    }}\\n/>\\n\\nCette architecture place le Domaine au centre, et en charge de tout. Elle demande \xe9galement plus de design intentionnel puisque tu ne te bases pas directement sur ta base de donn\xe9es.\\nConstruit sur base du [patron CQRS](https://martinfowler.com/bliki/CQRS.html), je la consid\xe8re comme le meilleur moyen d'\xe9crire une application avec la simplicit\xe9 et maintenabilit\xe9 en t\xeate.\\n\\nHistoriquement, l'archi 3-tiers est arriv\xe9e en 1992 gr\xe2ce \xe0 John J. Donovan et fut ensuite suivie par d'autres:\\n\\n-   Hexagonal Architecture / Ports & Adapters (2005, Alistair Cockburn),\\n-   Onion Architecture (2008, Jeffrey Palermo),\\n-   Clean Architecture (2012, Robert C. Martin).\\n\\n### Avantages & Inconv\xe9nients\\n\\nUne seconde liste pour les **avantages**:\\n\\n-   code moins coupl\xe9, meilleure testabilit\xe9 \u2014 comme le code est moins coupl\xe9 (merci \xe0 l'utilisation d'abstractions partout o\xf9 c'est possible), tu peux facilement \\\"mocker\\\" tes d\xe9pendances et tester unitairement tes composants.\\n    Cela facilite aussi le d\xe9veloppement de chaque couche puisqu'elles ne sont pas fortement coupl\xe9es ensemble, permettant ainsi aux \xe9quipes de travailler en parall\xe8le sur chaque couche si besoin est.\\n-   s\xe9paration des responsabilit\xe9s \u2014 l'archi te force un peu \xe0 penser \xe0 ta structure et aux d\xe9pendances de tes composants, remet potentiellement en cause de mauvaises d\xe9cisions, etc.\\n    L'interface utilisateur ne s'int\xe9resse \xe9galement pas \xe0 la structure de la base de donn\xe9es, ni quel package est utilis\xe9 pour g\xe9n\xe9rer un PDF par exemple...\\n-   meilleure exposition des fonctionnalit\xe9s (x10 si tu utilises l'Use-Case Driven Development en plus!)\\n-   meilleure application des principes SOLID\\n-   meilleure \xe9volutivit\xe9\\n\\nEt une nouvelle liste pour les **inconv\xe9nients**:\\n\\n-   augmentation du temps de d\xe9veloppment \xe0 partir de rien \u2014 tu dois pr\xe9parer plus de choses au d\xe9but du projet avant de pouvoir commencer une fonctionnalit\xe9 qui a de la valeur pour le client.\\n-   augmentation du nombre de lignes de code \u2014 il te faut plus de fichiers (classes et interfaces) que dans une n-tier.\\n-   possible perte d'optimisation \u2014 en n-tier, tu es forc\xe9ment plus proche de l'impl\xe9mentation de cela te permet de meilleures performances.\\n    Cette archi te fait perdre cette optimisation \xe0 profit de moins de couplage de ton code, ce qui est un bon \xe9change selon moi.\\n\\nNDLR: Honn\xeatement, en relisant ces inconv\xe9nients, je ne les consid\xe8re pas r\xe9ellement comme des probl\xe8mes.\\nIls sont facilement surmontables avec l'exp\xe9rience, et te font gagner du temps sur le long terme, particuli\xe8rement si tu d\xe9cides de travailler avec des tests (ce que tu devrais toujours faire si tu veux produire du bon code!).\\n\\n### Quand l'utiliser?\\n\\nQuand tu dois d\xe9velopper des applications complexes, que tu veux tester tes fonctionnalit\xe9 et d\xe9livrer quelque chose qui a de la valeur et qui ne va pas augmenter la taille du buglog une fois en production.\\nElle peut aussi \xeatre mix\xe9e avec des m\xe9thodologies qui en font une fiabilit\xe9 comme [DDD](https://en.wikipedia.org/wiki/Domain-driven_design) et [TDD](https://en.wikipedia.org/wiki/Test-driven_development).\\n\\n## Du coup, pourquoi est-ce que je pr\xe9f\xe8re cette derni\xe8re?\\n\\nTu dois savoir maintenant que je suis fatigu\xe9 de d\xe9velopper des choses moches, je suis fatigu\xe9 de travailler pour des entreprises qui te disent \\\"d\xe9veloppe plus vite et on am\xe9liorera plis tard\\\".\\nPlus tard n'arrive jamais.\\n\\nJe suis si fatigu\xe9 d'une telle mani\xe8re de travailler que je suis tomb\xe9 amoureux de 3 choses:\\n\\n1.  la Clean Architecture, et\\n2.  le Test-Driven Development, et\\n3.  le mouvement [Software Craftsmanship](https://fr.wikipedia.org/wiki/Software_craftsmanship).\\n\\nMais plus s\xe9rieusement, je n'explique pas forc\xe9ment _pourquoi_ je la pr\xe9f\xe8re... Alors, en quelques mots, laisse-moi te l'expliquer.\\nIl faut savoir que d\xe9velopper une application sans tests, c'est comme d\xe9velopper les yeux ferm\xe9s: tu fais des fautes.\\nJ'ai donc creus\xe9 cette partie de mon travail que je n\xe9gligeais \xe0 l'\xe9poque: le testing.\\nGr\xe2ce \xe0 mon exp\xe9rience chez PwC Luxembourg, j'ai rencontr\xe9 des gens formidables qui m'ont appris \xe9norm\xe9ment de nouvelles choses.\\nC'est \xe0 cette \xe9poque que l'on m'a demand\xe9 de cr\xe9er une application en suivant une architecture particuli\xe8re...\\nEt tout est devenu clair une fois que j'ai pratiqu\xe9.\\n\\nD\xe9velopper avec la Clean Archi, c'est pour moi le r\xe9el aboutissement du d\xe9veloppement d'applications o\xf9 les \\\"parties\\\" techniques peuvent enfin \xeatre chang\xe9es sans pour autant devoir red\xe9velopper autre chose.\\nEn r\xe9alit\xe9, j'ai appris beaucoup de choses avec la Clean Architecture:\\n\\n-   j'ai compris le r\xe9el atout qu'offrait l'Injection de d\xe9pendances ;\\n-   j'ai r\xe9ussi \xe0 mieux appliquer SOLID que toutes les autres fois o\xf9 j'ai tent\xe9, en vain ;\\n-   j'ai compris que je devais nommer mes interfaces ind\xe9pendamment de l'impl\xe9mentation qui pouvait en d\xe9couler puisque potentiellement, je pourrais avoir 3 impl\xe9mentations diff\xe9rentes d'un `IPdfGenerator` ;\\n-   j'ai compris que tester, c'\xe9tait amusant ;\\n-   j'ai compris que d\xe9velopper des applications sans bugs, c'\xe9tait possible et que \xe7a devrait \xeatre standard.\\n\\nEt j'ai \xe9tudi\xe9 dans une \xe9cole IT! On m'a expliqu\xe9 l'injection de d\xe9pendances, les principes SOLID, le clean code, comment pr\xe9parer le d\xe9veloppement d'une application et \xe9viter la majorit\xe9 des bugs...\\nMais ce n'est pas pour autant que je n'ai jamais \xe9crit de code horrible ou d'applications bugu\xe9es ou patch\xe9 une fonctionnalit\xe9 et cass\xe9 quelque chose d'autre en passant.\\n\\nAlors, je t'encourage grandement \xe0 en apprendre plus sur les 3 sujets que j'ai mentionn\xe9 plus t\xf4t. Le reste devrait venir...\\nIls repr\xe9sentent ce que j'adorerais appeler _le meilleur \xe9tat d'esprit_ pour la g\xe9n\xe9ration suivante de d\xe9veloppeurs.\\n\\nJe recommenderais aussi d'en apprendre plus en regardant aux ressources suivantes:\\n\\n-   La pr\xe9sentation de Guillherme Ferreira sur [The Grand Unified Theory of Clean Architecture and Test Pyramid](https://ndcporto.com/agenda/the-grand-unified-theory-of-clean-architecture-and-test-pyramid-0b9p/6537f85dc598) \xe0 la NDC Porto ;\\n-   [Les slides de Valentina Cupa\u0107](https://www.jug.ch/events/slides/220201_Optivem_TDD_and_Clean_Architecture_Driven_by_Behaviour.pdf) sur TDD et la Clean Architecture par comportement ;\\n-   Un article de blog [introduisant \xe0 la CA](https://medium.com/codex/introduction-to-clean-architecture-2437c6987ec) ;\\n-   L'exemple d'une telle structure qu'est [la template Clean Architecture de Jason Taylor](https://github.com/jasontaylordev/CleanArchitecture)!\\n\\n## Conclusion\\n\\nCe qui fait finallement que l'architecture n-tier est obsol\xe8te, c'est le fait qu'elle est centr\xe9e _donn\xe9es_ a contrario de la clean archi qui est centr\xe9e _domaine_ (logique).\\n\xc7a nous a pris du temps de comprendre que ce qui donne de la valeur \xe0 nos clients n'est pas les donn\xe9es mais bien la logique business qui permet de traiter ces donn\xe9es!\\n\\nSi tu es toujours int\xe9ress\xe9 pour en apprendre plus sur ce sujet, je suis tomb\xe9 sur ces quelques ressources en ligne:\\n\\n-   [Les explications de Samuel Oloruntoba](https://www.digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design) sur les principes SOLID ;\\n-   L'[article de Mark Seemann](https://blog.ploeh.dk/2013/12/03/layers-onions-ports-adapters-its-all-the-same/) sur le sujet des adapteurs ;\\n-   [Le commentaire de Sean G. Wright](https://dev.to/seangwright/comment/ccfb) sur \\\"Clean architecture - Your approach\\\" ;\\n-   Le groupe MeetUp du [Software Craftsmanship Luxembourg](https://www.meetup.com/fr-FR/software-craft-luxembourg/) ;\\n-   Le groupe MeetUp de la [Tech Excellence](https://www.meetup.com/fr-FR/techexcellence/).\\n\\nEt toi, quelle archi tu utilises pour tes projets?\\n\\n<Newsletter url={MAILCHIMP_URL} />\"},{\"id\":\"unit-testing\",\"metadata\":{\"permalink\":\"/fr/blog/unit-testing\",\"editUrl\":\"https://github.com/hunteroi/tinaeldevresse.eu/tree/master/blog/2022-01-01-unit-testing.mdx\",\"source\":\"@site/i18n/fr/docusaurus-plugin-content-blog/2022-01-01-unit-testing.mdx\",\"title\":\"Les tests unitaires\",\"description\":\"L'article du jour est fait en effort conjoint avec mon ancien coll\xe8gue et mentor <a href=\\\"https://www.linkedin.com/in/guillaumefaas/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener nofollow\\\">Guillaume Faas</a> sous la forme d'une conversation entre 2 d\xe9veloppeurs. Joins-toi \xe0 moi pour le remercier pour son incroyable implication dans l'\xe9criture de cet article! Nous esp\xe9rons tous les 2 que tu vas l'adorer, autant que nous avons ador\xe9 l'\xe9crire!\",\"date\":\"2022-01-01T00:00:00.000Z\",\"formattedDate\":\"1 janvier 2022\",\"tags\":[{\"label\":\"test\",\"permalink\":\"/fr/blog/tags/test\"},{\"label\":\"test unitaire\",\"permalink\":\"/fr/blog/tags/test-unitaire\"},{\"label\":\"programmation\",\"permalink\":\"/fr/blog/tags/programmation\"}],\"readingTime\":27.23,\"hasTruncateMarker\":true,\"authors\":[],\"frontMatter\":{\"slug\":\"unit-testing\",\"title\":\"Les tests unitaires\",\"tags\":[\"test\",\"test unitaire\",\"programmation\"],\"description\":\"L'article du jour est fait en effort conjoint avec mon ancien coll\xe8gue et mentor <a href=\\\"https://www.linkedin.com/in/guillaumefaas/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener nofollow\\\">Guillaume Faas</a> sous la forme d'une conversation entre 2 d\xe9veloppeurs. Joins-toi \xe0 moi pour le remercier pour son incroyable implication dans l'\xe9criture de cet article! Nous esp\xe9rons tous les 2 que tu vas l'adorer, autant que nous avons ador\xe9 l'\xe9crire!\",\"image\":\"img/unit-testing.jpg\"},\"prevItem\":{\"title\":\"Quelle architecture j'utilise pour mes projets?\",\"permalink\":\"/fr/blog/why-did-i-switch-to-clean-architecture\"},\"nextItem\":{\"title\":\"Qu'est-ce qu'un conteneur?\",\"permalink\":\"/fr/blog/what-is-a-container\"}},\"content\":\"import Figure from '../../../src/components/Figure';\\nimport SEO from '../../../src/components/SEO';\\nimport Reminder from '../../../src/components/Reminder';\\nimport Newsletter from '../../../src/components/Newsletter';\\nimport { MAILCHIMP_URL } from '../../../website_config.json';\\nimport { AnchoredH2, AnchoredP } from '../../../src/components/AnchoredHeading';\\nimport randomChoose from '../../../src/utils/randomChoose';\\n\\n<a href='/blog/unit-testing'>\\n\\t<Figure\\n\\t\\tdata={{\\n\\t\\t\\tsrc: '/img/unit-testing.jpg',\\n\\t\\t\\talt: 'Tests unitaires',\\n\\t\\t\\ttype: 'image',\\n\\t\\t}}\\n\\t/>\\n</a>\\n\\nL'article du jour est fait en effort conjoint avec mon ancien coll\xe8gue et mentor <a href=\\\"https://www.linkedin.com/in/guillaumefaas/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener nofollow\\\">Guillaume Faas</a>\\n(\ud83d\udd39) sous la forme d'une interview d'un d\xe9veloppeur.\\n\\nJoins-toi \xe0 moi pour le remercier pour son incroyable implication dans l'\xe9criture de cet article! Nous esp\xe9rons tous les deux que tu vas l'adorer, autant que nous avons ador\xe9 l'\xe9crire.\\n\\n\x3c!--truncate--\x3e\\n\\n<SEO uri='blog/unit-testing' image='img/unit-testing.jpg' type='article' />\\n\\n---\\n\\n<Reminder />\\n\\n---\\n\\n_tldr; fais des katas en appliquant la m\xe9thodologie \\\"Test Driven Development\\\" !_\\n\\n<AnchoredH2 id='presentation'>Pr\xe9sentation</AnchoredH2>\\n\\n<AnchoredP>\ud83d\udd38 Salut Guillaume! Tu sais te pr\xe9senter s'il te pla\xeet?</AnchoredP>\\n\\n\ud83d\udd39 Salut Tina\xebl! Merci de m'avoir invit\xe9 \xe0 parler sur ton site. Je m'appelle Guillaume Faas et je suis un expert .NET / Software Craftsman, actuellement employ\xe9 chez [Squaremiled S.A.](https://squaremiled.com/).\\nJe d\xe9veloppe des logiciels depuis une dizaine d'ann\xe9es en ayant \xe9volu\xe9 dans des environnements et secteurs d'activit\xe9s vari\xe9s.\\n\\n<AnchoredH2 id='topic'>Le sujet!</AnchoredH2>\\n\\n<AnchoredP>\ud83d\udd38 De quoi va-t-on parler aujourd'hui?</AnchoredP>\\n\\n\ud83d\udd39 \xc0 ton avis? Tu n'as pas lu le titre de l'article on dirait. On va parler de **test unitaire**!\\n\\n<AnchoredP id='first-encounter'>\\n\\t\ud83d\udd38 Quand est-ce que t'y as touch\xe9 pour la premi\xe8re fois?\\n</AnchoredP>\\n\\n\ud83d\udd39 C'\xe9tait il y a bien longtemps, dans une galaxie lointaine... J'avais \xe0 peine quelques ann\xe9es d'exp\xe9rience \xe0 l'\xe9poque. J'\xe9tais dans la m\xeame soci\xe9t\xe9 pendant une majeure partie de ma carri\xe8re et, par rapport \xe0 mon _day-to-day_, je pensais que j'avais d\xe9j\xe0 tout vu.\\nJe commen\xe7ais \xe0 regarder en ligne \xe0 des _guidelines_, des _best practices_, des _patterns_, etc. Je suis tomb\xe9 sur plein de sujets excitants et surtout nouveaux.\\nC'\xe9tait comme si j'avais mis les pieds dans un nouveau monde qui n'avait rien \xe0 voir avec la routine dans laquelle j'\xe9tais ancr\xe9. Le _testing_ \xe9tait \xe9videmment l'un de ces sujets.\\nCependant, j'ai vite r\xe9alis\xe9 que je devais progresser sur d'autres sujets avant d'\xeatre capable d'introduire des tests. Cela m'a pris du temps avant que je ne sois vraiment apte \xe0 travailler avec une approche _test-driven_.\\n\\n<AnchoredP id='what-is-it'>\\n\\t\ud83d\udd38 Ok! Par contre, histoire de ne pas perdre les lecteurs... tu sais\\n\\texpliquer ce qu'est un test unitaire s'il te pla\xeet?\\n</AnchoredP>\\n\\n\ud83d\udd39 Oui, bien s\xfbr! Un test unitaire, c'est un test qui v\xe9rifie un _unit of code_. La notion de _unit of code_ varie en fonction des \xe9coles de testing.\\nL'\xe9cole London (ou Mockist) va voir cela comme le plus petit _chunk of code_, on parlera d'une classe ou d'une m\xe9thode. Par contre, l'\xe9cole Detroit (ou Classicist) va voir cela comme un _behavior_, donc un ensemble de classes ou de m\xe9thodes.\\nPour les plus curieux, voici un [article](https://medium.com/@adrianbooth/test-driven-development-wars-detroit-vs-london-classicist-vs-mockist-9956c78ae95f) qui d\xe9taille les diff\xe9rences entre les deux \xe9coles.\\nJe pr\xe9cise qu'une \xe9cole n'est pas meilleure que l'autre, chacune a ses avantages et inconv\xe9nients. C'est une histoire de pr\xe9f\xe9rence et de compromis.\\nLa diff\xe9rence principale tient surtout de la taille de ton _System Under Test_ (SUT) et de la relation entre les diff\xe9rents collaborateurs.\\n\\nMais \xe0 la fin, un test unitaire est simplement **un morceau de code qui valide qu'un autre morceau de code a le r\xe9sultat et/ou _side effect_ attendu par rapport \xe0 un sc\xe9nario donn\xe9**.\\n\\n<AnchoredP id='hierarchy-position'>\\n\\t\ud83d\udd38 D'accord, mais \xe7a se situe o\xf9 dans la \\\"hi\xe9rachie des tests\\\"?\\n</AnchoredP>\\n\\n\ud83d\udd39 Il s'agit de la pyramide de testing (_Agile Testing Pyramid_) mais de gauche \xe0 droite au lieu de bas en haut. Plus tu seras situ\xe9 vers la gauche, plus ton _scope_ est petit et plus tes tests seront nombreux et rapides. La logique inverse est appliqu\xe9e lorsque tu vas dans l'autre sens.\\n\\nNous, on se situe sur la partie \\\"unit\\\" puisque techniquement, il n'y a pas plus petit qu'une _unit_. Un test unitaire doit \xeatre ex\xe9cut\xe9 de fa\xe7on _standalone_ dans un environnement _sandbox_.\\nC'est-\xe0-dire qu'un test unitaire n'a aucun impact sur l'ext\xe9rieur du test, et si tu en lances plusieurs en parall\xe8le, ils ne doivent pas avoir de _side effects_ entre eux.\\n\\nCela signifie donc que dans un test unitaire: on ne contacte pas de DB, on \xe9vite de faire une requ\xeate HTTP, d'acc\xe9der \xe0 un fichier du syst\xe8me, etc. De la m\xeame fa\xe7on, on ne va pas contacter les autres d\xe9pendances de la solution.\\nOn reste vraiment \\\"interne\\\" \xe0 la fonction.\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: '/img/software-testing-types.png',\\n\\t\\talt: 'Types de Software Testing',\\n\\t\\ttype: 'image',\\n\\t}}\\n/>\\n\\nVoici quelques points de la partie _functional testing_:\\n\\n-   l'_unit testing_, c'est v\xe9rifier qu'un composant fonctionne bien. Il s'agit du test le plus rapide, on parlera de _fast feedback loop_ ;\\n-   l'_integration testing_, c'est v\xe9rifier que plusieurs composants fonctionnent bien entre eux ;\\n-   le _user acceptance testing_ qui consiste \xe0 v\xe9rifier l'enti\xe8ret\xe9 de l'application tout en \xe9vitant de contacter les d\xe9pendances externes (ex: des requ\xeates vers des fournisseurs de donn\xe9es ext\xe9rieurs \xe0 ton application).\\n    Il s'agit du test le plus repr\xe9sentatif, probablement celui qui a le plus de valeur \xe0 l'\xe9chelle du produit car il v\xe9rifie des _business requirements_.\\n\\n\xc0 noter qu'il n'y a pas d'obligation de tous les impl\xe9menter. On pourrait tr\xe8s bien avoir une _test suite_ compos\xe9e uniquement de tests d'une seule de ces cat\xe9gories. Mais il convient de garder \xe0 l'esprit que notre _test suite_ ne sera pas des plus efficaces.\\n\\n<AnchoredP>\\n\\t\ud83d\udd38 D'accord! Mais pourquoi le testing, c'est pas r\xe9alis\xe9 dans le monde\\n\\tprofessionnel?\\n</AnchoredP>\\n\\n\ud83d\udd39 En r\xe9alit\xe9, une grande partie des d\xe9veloppeurs n'\xe9crivent pas ou peu de tests. De plus, les tests d'int\xe9grations sont moins r\xe9pandus que les tests unitaires car ils sont plus complexes \xe0 \xe9crire. Au final, cette t\xe2che est souvent vue comme une corv\xe9e ou alors une _extra step_ que l'on fera uniquement si on a le temps.\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: randomChoose(\\n\\t\\t\\t'https://miro.medium.com/max/600/1*xHibbXdcePT0GtpeZRgxSA.gif',\\n\\t\\t\\t'https://media4.giphy.com/media/hqq505vU9iHCOGySD5/giphy.gif',\\n\\t\\t\\t'https://media1.giphy.com/media/VXmWbcDSj2yqnsXUrF/giphy.gif'\\n\\t\\t),\\n\\t\\talt: \\\"GIF sur les tests d'int\xe9gration\\\",\\n\\t\\ttype: 'image',\\n\\t}}\\n/>\\n\\nUncle Bob en a \xe9galement parl\xe9 \xe0 une conf\xe9rence \xe0 Londre en 2018:\\n\\n<Figure\\n\\tdata={{\\n\\t\\ttype: 'html',\\n\\t\\twidth: '560',\\n\\t\\theight: '315',\\n\\t\\tsrc: 'https://www.youtube.com/embed/17vTLSkXTOo?start=552&end=720',\\n\\t\\ttitle: 'YouTube video player of SC London Conference 2018',\\n\\t\\tallow: 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',\\n\\t\\tallowFullScreen: true,\\n\\t}}\\n/>\\n\\n<AnchoredP id='objective'>\\n\\t\ud83d\udd38 C'est quoi le but du testing unitaire et quand est-ce que \xe7a devrait \xeatre\\n\\tappliqu\xe9?\\n</AnchoredP>\\n\\n\ud83d\udd39 Le but est assez simple: c'est de montrer qu'une m\xe9thode fonctionne comme tu l'attends. C'est-\xe0-dire que tu vas avoir un comportement attendu, par exemple ta m\xe9thode `getSomething` doit te retourner quelque chose. Tu vas donc tester diff\xe9rents sc\xe9narios et v\xe9rifier qu'elle se comporte toujours de la bonne fa\xe7on.\\n\\nPour ce qui est du \\\"quand\\\", c'est encore plus simple: \xe7a doit \xeatre appliqu\xe9 \xe0 partir du moment o\xf9 tu as de la logique quelque part.\\n\\n<AnchoredP id='pros-and-cons'>\\n\\t\ud83d\udd38 Bah du coup, quels en sont les avantages et inconv\xe9nients de la mise en\\n\\tplace de tests unitaires?\\n</AnchoredP>\\n\\n\ud83d\udd39 Comme dit pr\xe9c\xe9demment, tu \xe9cris du code qui teste du code. Vu comme cela, on dirait surtout une charge de travail suppl\xe9mentaire sauf qu'il existe de r\xe9els int\xe9r\xeats derri\xe8re.\\n\\n1. Le test unitaire sert de **filet de s\xe9curit\xe9 contre les r\xe9gressions**.\\n\\nL'\xe9tape du refactoring intervient syst\xe9matiquement dans un projet. Le probl\xe8me \xe9tant qu'\xe0 partir du moment o\xf9 l'on modifie quelque chose, il y a un risque de **r\xe9gression**. On parle de r\xe9gression lorsque quelque chose fonctionnait auparavant et ne fonctionne plus suite \xe0 un changement.\\nC'est pr\xe9cisement ici que le test intervient: il permet de garantir que tes composants fonctionnent toujours comme attendu. Si jamais quelque chose ne fonctionne plus suite \xe0 un changement, la _test suite_ t'affichera les tests qui ont d\xe9tect\xe9 un probl\xe8me avec un beau rond rouge. Et \xe7a, du point de vue d'un d\xe9veloppeur, c'est \xe9norme! Cela veut dire que tu es beaucoup plus serein et que tu passes bien moins de temps \xe0 v\xe9rifier que tes changements n'ont pas eu d'effets ind\xe9sirables sur le reste des fonctionnalit\xe9s.\\n\\n2. L'\xe9criture de tests am\xe9liore la **qualit\xe9 du code** de ton application.\\n\\nC'est li\xe9 \xe0 ce dont on vient d'aborder. Il est probable que les lecteurs aient d\xe9j\xe0 rencontr\xe9 une situation similaire: lorsque l'on parle de refactoring \xe0 un _Product Owner_ ou _Product Manager_, la premi\xe8re crainte est toujours que quelque chose ne fonctionne plus.\\nSi tu es couvert par une _test suite_, tu n'as pas peur du refactoring. C'est m\xeame l'inverse, tu es **encourag\xe9 \xe0 faire du refactoring r\xe9guli\xe8rement** tout en \xe9tant prot\xe9g\xe9.\\n\\n3. Une suite de tests devient ce qu'on appelle une **living documentation**.\\n\\nLorsque l'on parle de documentation, on a tous \xe0 l'esprit des commentaires. Le probl\xe8me est qu'ils ne sont jamais \xe0 jour avec le reste du code. Le code \xe9volue, la documentation non. Par contre, ton test unitaire sera toujours _up-to-date_. Si ce n'est pas le cas, alors ta suite de tests ne te donnera pas le feu vert pour aller plus loin.\\n\\nC'est d'autant plus int\xe9ressant dans le cadre d'une arriv\xe9e d'un nouveau d\xe9veloppeur sur le projet. Plut\xf4t que de lire tout le code d'une m\xe9thode pour savoir ce qu'elle fait, il lui suffit de regarder les diff\xe9rents tests de cette m\xe9thode. Chaque comportement sera repr\xe9sent\xe9 par un test avec un _naming_ explicite sur le sc\xe9nario et r\xe9sultat attendu (ex: `GetItem_ShouldReturnNotFoundResult_GivenItemIsMissing`). **\xc7a facilite donc l'_onboarding_!**\\n\\n4. Cela **r\xe9duit le temps de d\xe9tection des bugs**.\\n\\nOn a \xe9voqu\xe9 le terme _short feedback loop_ un peu plus t\xf4t dans la discussion. Les tests unitaires sont tr\xe8s rapides \xe0 ex\xe9cuter, ils nous donnent un _feedback_ presque instantan\xe9 sur la sant\xe9 de la solution. Cela veut dire que l'on doit les ex\xe9cuter r\xe9guli\xe8rement. Je sch\xe9matise mais on a un bouton (ou un raccourci) qui nous donne un statut Vert/Rouge en quelques secondes. Actionner ce bouton doit devenir quelque chose de syst\xe9matique.\\nCela a d\xe9j\xe0 un int\xe9r\xeat pour nous en tant que d\xe9veloppeurs mais ce n'est pas tout. On en parlera un peu plus tard!\\n\\n5. Ce n'est pas un avantage direct mais plut\xf4t un effet secondaire: **faire du testing te rend meilleur**.\\n\\nPour faire en sorte que tu puisses \xe9crire des tests apportant une r\xe9elle valeur, tu dois respecter certains principes. Tu dois toujours avoir une certaine couche d'abstraction pour _mocker_ tes d\xe9pendances, tu dois pouvoir les injecter, tu dois limiter les responsabilit\xe9s de tes composants, etc... en fait tu vas te forcer \xe0 appliquer plusieurs principes r\xe9guli\xe8rement (SOLID par exemple).\\nDu coup, cela te force \xe0 casser tes composants, \xe0 les d\xe9coupler, \xe0 penser \xe0 leurs interations et responsabilit\xe9s. Bref, \xe0 r\xe9fl\xe9chir et \xe0 te poser beaucoup de questions. Mine de rien, on parle de _code design_! Et donc, action-r\xe9action: tu deviens meilleur au fil du temps. Cela fait tr\xe8s _Happy End_ mais tu vois o\xf9 je veux en venir.\\n\\n\ud83d\udd38 Et comme c'est peu mis en place dans les entreprises, c'est vu comme \\\"nouveau\\\" et \xe7a motive \xe0 en apprendre plus!\\n\\n\ud83d\udd39 Je te rejoins sur l'aspect nouveaut\xe9 mais il reste surtout pr\xe9sent au d\xe9but lorsqu'on d\xe9couvre le sujet. Mais il y a une partie d'interpr\xe9tation dans tout cela: certains (comme toi) le voient comme quelque chose d'int\xe9ressant, d'autres le voient comme une corv\xe9e ou une pression suppl\xe9mentaire. Tu trouveras toujours des personnes r\xe9fractaires aux tests pour des raisons diverses et vari\xe9es. Peut-\xeatre qu'on aura l'occasion d'aborder les raisons qui sont g\xe9n\xe9ralement \xe9voqu\xe9es.\\n\\nPour revenir \xe0 ta question, voici les inconv\xe9nients qui me viennent \xe0 l'esprit:\\n\\n1. On l'a mentionn\xe9, il y a des pr\xe9-requis: il faut comprendre les piliers de l'orient\xe9 objet, l'injection de d\xe9pendances, les principes [SOLID](https://www.digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design), etc.\\n2. Le fait que l'on trouve peu de projets avec de r\xe9elles _test suites_ rend l'apprentissage moins accessible. Il en va de m\xeame pour trouver un coach passionn\xe9 par ce sujet.\\n3. Il y a une courbe d'apprentissage/de progression assez importante. Tout le monde passe par une phase de frustration au d\xe9but parce que l'on est pas \xe0 l'aise et on a l'impression d'\xeatre plus lent. Il faut r\xe9sister et pers\xe9v\xe9rer car les tests nous feront en r\xe9alit\xe9 aller plus vite. On en parlera avec l'approche TDD.\\n4. Cela demande de la pr\xe9paration : il faut r\xe9fl\xe9chir \xe0 l'architecture du projet, aux relations entre les diff\xe9rents composants, etc... Vu comme cela, ce n'est pas vraiment un inconv\xe9nient mais on ne peut pas (plus?) se lancer t\xeate baiss\xe9e dans un d\xe9veloppement sans un minimum de r\xe9flexion.\\n5. Il y a un manque de compr\xe9hension du c\xf4t\xe9 des autres \xe9quipes intervenant sur le d\xe9veloppement du produit, notamment non-IT. On retombe toujours sur des discussions sur le _Return On Investement_ (ROI) ou l'impact sur la v\xe9locit\xe9.\\n\\nOn entend souvent dire que \\\"cela prend du temps et que cela sera planifi\xe9 plus tard\\\" ou que \\\"les d\xe9veloppeurs n'ont pas le temps\\\" mais ces arguments ne sont pas vraiment valables.\\nEn effet, le premier indique clairement un manque de vision et de compr\xe9hension du testing. D\xe9j\xe0 parce que \\\"plus tard\\\" n'arrive jamais. Mais surtout, faire les tests \xe0 la fin du d\xe9veloppement n'a aucun sens. On perd tous les avantages qu'apporte le testing. Je l'ai d\xe9j\xe0 dit mais on en parlera avec l'approche TDD.\\nEnsuite, le second indique un probl\xe8me d'organisation. Les tests devraient \xeatre inclus dans les estimations et pas comme un travail suppl\xe9mentaire \xe0 r\xe9aliser.\\n\\n<AnchoredP id='test-coverage'>\\n\\t\ud83d\udd38 Et le <span style={{ fontStyle: 'italic' }}>test coverage</span>, dans\\n\\ttout \xe7a?\\n</AnchoredP>\\n\\n\ud83d\udd39 Tester, c'est super et on ressent les b\xe9n\xe9fices. Cependant, il faut aussi faire un statut sur l'\xe9tat de la _test suite_. C'est l\xe0 qu'on arrive sur le _code coverage_. C'est une m\xe9trique informative sur la progression de couverture de tests de ton application.\\nJ'insiste vraiment sur le c\xf4t\xe9 **informatif**. Ce serait une erreur de mesurer la qualit\xe9 de la suite de tests sur base de sa couverture. C'est une m\xe9trique de quantit\xe9 et non de qualit\xe9.\\nJ'ai d\xe9j\xe0 lu des articles sur des soci\xe9t\xe9s qui ont int\xe9gr\xe9 la valeur de _code coverage_ dans les objectifs des d\xe9veloppeurs et cela a incit\xe9 les d\xe9veloppeurs \xe0 utiliser de faux tests pour faire gonfler le coverage.\\n\\nLe seul moyen de v\xe9rifier la qualit\xe9 d'une _test suite_ d'un projet, c'est de se poser quelques questions:\\n\\n-   Est-ce que le temps de d\xe9veloppement g\xe9n\xe9ral des fonctionnalit\xe9s reste approximativement le m\xeame avec le temps?\\n-   Est-ce que la quantit\xe9 de bugs trouv\xe9s en production diminue avec le temps?\\n-   Est-ce que tu arrives \xe0 facilement accueillir une nouvelle ressource au sein de l'\xe9quipe de d\xe9veloppement?\\n-   Est-ce que les d\xe9veloppeurs ont confiance en leur _test suite_? Est-ce qu'elle est repr\xe9sentative de l'\xe9tat de sant\xe9 de la solution? Est-ce qu'un rond vert garantit vraiment qu'un composant fonctionne?\\n\\nSi tu es en mesure de r\xe9pondre \\\"oui\\\" \xe0 toutes ces questions, f\xe9licitations! Tu peux \xeatre fier de la _test suite_ que tu as mis en place.\\nLe souci? C'est difficile d'avoir une r\xe9ponse \xe0 ces questions alors que tu dois rendre des comptes _day one_... Tu remarques d'ailleurs que les trois premi\xe8res font r\xe9f\xe9rence au **temps**.\\n\\n<AnchoredP id='cost'>\\n\\t\ud83d\udd38 Bon sinon... question co\xfbt, qu'est-ce qu'il en est? Parce que finalement,\\n\\t\xe9crire un test unitaire, c'est tout de m\xeame \xe9crire du code. \xc7a co\xfbte!\\n</AnchoredP>\\n\\n\ud83d\udd39 Je vois l\xe0 o\xf9 tu veux en venir. Non, cela ne co\xfbte pas plus sauf si tu factures au caract\xe8re!\\nM\xeame si tu \xe9cris plus de code, tu es vraiment gagnant et pas que sur l'aspect temps. Je t'ai dit qu'on devait parler de TDD? Parce que cela te fait m\xeame gagner du temps \xe0 court-terme. Bref.\\nD\xe9velopper une fonctionnalit\xe9 peut te prendre un peu plus de temps en sachant que cela d\xe9pendra surtout de ton aisance avec l'\xe9criture de tests. D'un autre c\xf4t\xe9, cela va surtout te \\\"sauver la vie\\\" pas mal de fois parce que tu vas \xe9viter \xe9normement de bugs qui, en temps normal,\\nseraient arriv\xe9s bien plus tard dans ton _process_, lors des tests utilisateur sur un environnement de QA ou en production.\\nToi qui voulais parler d'argent, **plus un bug est d\xe9couvert tard, plus il co\xfbte cher**:\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: 'https://assets.deepsource.io/995f56d/images/blog/cost-of-fixing-bugs/chart.jpg',\\n\\t\\talt: 'Co\xfbt de correction des bugs',\\n\\t\\ttype: 'image',\\n\\t\\turl: 'https://deepsource.io/blog/exponential-cost-of-fixing-bugs/',\\n\\t}}>\\n\\tLe co\xfbt de correction d'un bug sur base du moment o\xf9 il a \xe9t\xe9 d\xe9tect\xe9,\\n\\tsourc\xe9 chez{' '}\\n\\t<a href='https://deepsource.io/blog/exponential-cost-of-fixing-bugs/'>\\n\\t\\tDeepSource\\n\\t</a>\\n\\t!\\n</Figure>\\n\\nEt c'est tout \xe0 fait normal.\\n\\nOn peut reparler de la _fast feedback loop_: si un bug est d\xe9couvert par un test unitaire, c'est en local sur ta machine, juste apr\xe8s le changement (n'oublie pas de _rebuild_ et de _rerun_ ta suite de tests). Il est identifi\xe9 rapidement et corrig\xe9 rapidement.\\n\xc0 contrario, un bug qui passe en production... il est d\xe9couvert par un utilisateur qui remonte le probl\xe8me \xe0 ta _product team_ qui elle doit analyser le _feedback_ et ouvrir un ticket dans ton _backlog_. Ce ticket, il va \xeatre prioris\xe9 par ton _Product Owner_ pour \xeatre inclus dans la prochaine it\xe9ration puis il sera assign\xe9 \xe0 un d\xe9veloppeur. En admettant que ce ne soit pas toi, il y aura une phase d'investigation (reproduction du bug), une phase de correction de bug et apr\xe8s il doit repartir sur tous les environnements et \xeatre valid\xe9 par des _Quality Assurance Users_.\\n\\nJ'ai volontairement pris un cas extr\xeame pour montrer le pire sc\xe9nario mais c'est aussi la fa\xe7on d'\xeatre le plus explicite sur le probl\xe8me.\\nCe qu'il est important de retenir, c'est qu'un test peut faire gagner beaucoup de temps \xe0 beaucoup de personnes, aussi simple soit-il.\\n\\n_ndlr: pour en savoir plus sur les raisons qui font qu'un logiciel a des bugs, n'h\xe9sitez pas \xe0 consulter [cette page](https://www.softwaretestinghelp.com/why-does-software-have-bugs) et [d'autres sur le web](https://www.google.com/search?q=why+do+softwares+have+bugs)!_\\n\\n<AnchoredH2 id='details'>En d\xe9tails</AnchoredH2>\\n\\n<AnchoredP id='black-and-white-boxes'>\\n\\t\ud83d\udd38 Ok! Et si on parlait maintenant de{' '}\\n\\t<span style={{ fontStyle: 'italic' }}>black box</span> et{' '}\\n\\t<span style={{ fontStyle: 'italic' }}>white box testing</span>?\\n</AnchoredP>\\n\\n\ud83d\udd39 J'aime les sch\xe9mas, tu aimes les sch\xe9mas? C'est bien les sch\xe9mas!\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: '/img/black-white-box-testing.png',\\n\\t\\talt: 'Black and white box testing',\\n\\t\\ttype: 'image',\\n\\t\\tstyle: { border: '.5em solid black' },\\n\\t}}>\\n\\tLes diff\xe9rences entre <span style={{ fontStyle: 'italic' }}>black box</span>{' '}\\n\\tet <span style={{ fontStyle: 'italic' }}>white box testing</span>\\n</Figure>\\n\\nLe **black box testing**, c'est donner une information d'entr\xe9e au SUT et v\xe9rifier l'information de sortie. C'est aussi simple que \xe7a: on ne prend pas en compte ce qu'il se passe \xe0 l'int\xe9rieur de la m\xe9thode.\\nIl y a un cas pr\xe9cis o\xf9 ce type de testing sera obligatoire: les m\xe9thodes pures. Ces m\xe9thodes n'ayant aucune d\xe9pendance ou variables partag\xe9es, elles n'ont donc aucun _side effect_. Le **black box testing** est donc une \xe9vidence mais cela rend aussi le test extr\xeamement robuste car rien ne vient impacter le r\xe9sultat du test.\\n\\nPrenons par exemple une m\xe9thode `Sum` d'une classe `Calculator`. On est exactement sur le sc\xe9nario mentionn\xe9 plus haut:\\n\\n```csharp title='tests/CalculatorTests.cs'\\n[TestClass]\\npublic class CalculatorTests\\n{\\n\\t[TestMethod]\\n\\tpublic int Sum_Should_ReturnTheSumOfTheTwoNumbers()\\n\\t{\\n\\t\\tCalculator calculator = new();\\n\\n\\t\\tint result = calculator.Sum(2,3);\\n\\n\\t\\tAssert.AreEqual(expected: 5, actual: result);\\n\\t}\\n}\\n```\\n\\nOn ne conna\xeet pas l'impl\xe9mentation de la m\xe9thode, mais on a \xe9crit un test. On lui donne des valeurs en entr\xe9e, et on v\xe9rifie la valeur de sortie.\\nPour le reste des sc\xe9narios, je trouve dommage de s'arr\xeater l\xe0. C'est une pr\xe9f\xe9rence personnelle, je trouve le **white box testing** plus pertinent en tant que _Mockist_.\\n\\nDe l'autre c\xf4t\xe9, on a donc ce **white box testing**. \xc0 premi\xe8re vue, c'est la m\xeame chose: on donne un _input_ et on v\xe9rifie l'_output_. Mais on va aussi v\xe9rifier ce qu'il se passe \xe0 l'int\xe9rieur du SUT.\\nOn peut donc v\xe9rifier que le SUT a bien fait appel \xe0 sa d\xe9pendance, que la valeur a bien \xe9t\xe9 mise dans un cache, sauvegard\xe9e dans un repo, qu'un event a bien \xe9t\xe9 \xe9mis, etc.\\nCela nous permet de v\xe9rifier chaque _behavior_ avec ses _side effects_.\\n\\n<AnchoredP id='how-to-write'>\\n\\t\ud83d\udd38 La question que tous se posent... Comment \xe9crire de bons tests unitaires?\\n</AnchoredP>\\n\\n\ud83d\udd39 Je ne pense pas qu'il y ait de bons ou de mauvais tests unitaires... Evidemment que si!\\nIl faut r\xe9fl\xe9chir avant sur ce que tu veux faire. \xc7a peut para\xeetre b\xeate dit comme \xe7a mais _think before you do_. C'est que j'expliquais lorsque je parlais du fait que faire des tests te rend meilleur.\\nSi tu veux faire des tests efficaces, il faut r\xe9fl\xe9chir sur la fa\xe7on dont tes composants vont communiquer entre eux. En fait, tes tests seront efficaces \xe0 partir du moment o\xf9 ils seront faciles \xe0 faire. Et si tu te rends compte qu'ils ne le sont pas, c'est qu'il y a un soucis dans ton code.\\n\\nExemple: j'ai un _service_ qui doit cr\xe9er un utilisateur. **Avant d'\xe9crire mon test**, je dois me poser quelques questions: quelles sont les responsabilit\xe9s de mon service?\\nEst-il responsable d'envoyer une requ\xeate HTTP \xe0 un fournisseur externe pour r\xe9cup\xe9rer des informations? Est-il responsable de la persistence en base de donn\xe9es? Est-il responsable du _logging_?\\n_Divide &amp; Conquer_: une d\xe9pendance ici, une l\xe0, et une autre l\xe0... Au final, que reste-t-il dans mon service? L'orchestration d'un processus d\xe9l\xe9gu\xe9 \xe0 diff\xe9rentes d\xe9pendances (ex: client http, repository, logger, etc) et \xe9ventuellement une modification de l'\xe9tat d'une entit\xe9. C'est tout.\\n\\nAu final, un \\\"bon\\\" test doit:\\n\\n-   te prot\xe9ger contre les r\xe9gressions ;\\n-   \xeatre r\xe9sistant au refactoring ;\\n-   te donner un feedback rapide ;\\n-   \xeatre maintenable.\\n\\n<AnchoredP id='tips-to-start'>\\n\\t\ud83d\udd38 Et, sinon... T'as des conseils pour se lancer dans le testing unitaire?\\n</AnchoredP>\\n\\n\ud83d\udd39 Je recommande aux personnes qui veulent d\xe9marrer le testing de commencer directement avec le _Test Driven Development_.\\nSi le test est \xe9crit apr\xe8s l'impl\xe9mentation, c'est pas vraiment objectif car tu connais d\xe9j\xe0 l'impl\xe9mentation donc ton test est fortement li\xe9 \xe0 ton impl\xe9mentation. De plus, le code fonctionne d\xe9j\xe0 donc le test sera per\xe7u comme une perte de temps. Mais surtout: on a b\xe9n\xe9fici\xe9 d'aucun avantage du testing lors de la phase d'impl\xe9mentation.\\n\\nPour cela, vous n'\xeates pas seul. Il existe des tonnes de resources disponibles pour vous aider.\\nVoici plusieurs livres que j'aurais aim\xe9 avoir lus au d\xe9but de ma carri\xe8re:\\n\\n-   \\\"Test Driven Development - By Example\\\" par Kent Beck.\\n-   \\\"Unit Testing - Principles, Practices and Patterns\\\" par Vladimir Khorikov.\\n\\n\xc9galement, voici un site rempli de conseils et astuces sur TDD avec un grand nombre de katas pour progresser: [TDD Buddy](http://www.tddbuddy.com/).\\n\\nEn parlant de katas, faites des katas. Faites pleins de katas et faites en \xe0 plusieurs (_pair_ et/ou _mob programming_) si vous en avez la possibilit\xe9. C'est fun et c'est tr\xe8s formatteur, notamment sur le fait de d\xe9marrer avec des exercices simples et progressivement augmenter la difficult\xe9 jusqu'\xe0 se retrouver avec des situations similaires \xe0 ce que l'on peut trouver dans des projets r\xe9els. En plus de [TDD Buddy](http://www.tddbuddy.com/), je pourrais recommander [Code Wars](https://www.codewars.com/) si vous \xeates en manque d'inspiration.\\nSans forc\xe9ment faire de l'auto-promotion, vous pouvez aussi trouver quelques katas sur mon [GitHub](https://github.com/Tr00d/).\\n\\nUn dernier conseil pour d\xe9marrer le testing, on peut se r\xe9f\xe9rer \xe0 ce qu'on appelle le triple A (AAA), qui signifie _Arrange, Act, Assert_, pour rendre les tests plus clairs et organis\xe9s. Le but est de diviser son test unitaire en 3 parties distinctes:\\n\\n1. _arrange_ : c'est le sc\xe9nario, la partie o\xf9 tu pr\xe9pares les donn\xe9es _input_ de ta m\xe9thode ;\\n2. _act_ : c'est l'action, le fait de r\xe9aliser l'appel \xe0 la m\xe9thode que tu vas tester ;\\n3. _assert_ : c'est la v\xe9rification du _behavior_, l\xe0 partie o\xf9 tu v\xe9rifies l'_output_ ou les _side effects_.\\n\\n<AnchoredP id='bad-smells'>\\n\\t\ud83d\udd38 Quels sont les \\\"bad smells\\\" dans l'unit testing?\\n</AnchoredP>\\n\\n\ud83d\udd39 J'en vois quelques-uns...\\n\\n-   une partie _arrange_ qui fait 15 lignes... C'est trop compliqu\xe9. On voit clairement que la m\xe9thode test\xe9e fait trop de choses car le sc\xe9nario est trop compliqu\xe9 \xe0 mettre en place!\\n-   On dit qu'**un test ne doit avoir qu'une et une seule raison d'\xe9chouer**. Un test ne devrait contenir qu'un seul _assert_.\\n-   Le fait que tu aies du mal \xe0 \xe9crire des tests unitaires, non pas \xe0 cause du fait que tu n'aies pas la connaissance n\xe9cessaire mais plut\xf4t en rapport au code \xe0 tester... c'est qu'il y a un soucis au niveau de ton composant. Alors, prends du recul et penses aux responsabilit\xe9s.\\n\\n<AnchoredH2 id='more-stuff'>Pour aller plus loin</AnchoredH2>\\n\\n<AnchoredP id='libraries'>\\n\\t\ud83d\udd38 Tu as des librairies int\xe9ressantes en t\xeate pour faciliter le travail?\\n</AnchoredP>\\n\\n\ud83d\udd39 Oui. Pour moi, on peut consid\xe9rer trois groupes de librairies:\\n\\n1. les librairies de testing qui permettent de g\xe9n\xe9rer des tests ;\\n2. les librairies de mocking qui permettent de surcharger le comportement de tes d\xe9pendances et de les monitorer ;\\n3. les librairies de g\xe9n\xe9ration de donn\xe9es.\\n\\nPour ma part:\\n\\n|                     **Frameworks de test**                     |                **Librairies de mocking**                 |          **Librairies de g\xe9n\xe9ration de donn\xe9es**           |\\n| :------------------------------------------------------------: | :------------------------------------------------------: | :--------------------------------------------------------: |\\n| [MSTest](https://www.nuget.org/packages/MSTest.TestFramework/) |        [Moq](https://www.nuget.org/packages/Moq/)        | [AutoFixture](https://www.nuget.org/packages/AutoFixture/) |\\n|         [NUnit](https://www.nuget.org/packages/NUnit/)         |    [NInject](https://www.nuget.org/packages/Ninject/)    |\\n|         [XUnit](https://www.nuget.org/packages/xunit/)         | [WireMock](https://www.nuget.org/packages/WireMock.Net/) |\\n\\n\ud83d\udd38 Sur ce point-ci particuli\xe8rement, j'aimerais mettre en avant le fait qu'il existe aussi des librairies de test pour le _front-end_. En fait, le testing unitaire n'est pas r\xe9serv\xe9 aux d\xe9veloppeurs\\n_back-end_. On citera notamment [Jest](https://www.npmjs.com/package/jest), [Mocha](https://www.npmjs.com/package/mocha), [Cypress](https://www.npmjs.com/package/cypress) et [Jasmine](https://www.npmjs.com/package/jasmine) comme librairies fortement li\xe9es au testing dans des applications JavaScript.\\n\\n<AnchoredP id='what-is-tdd'>\\n\\tDu coup, tu n'arr\xeates pas d'en parler. C'est quoi le{' '}\\n\\t<span style={{ fontStyle: 'italic' }}>Test Driven Development</span> (TDD)?\\n</AnchoredP>\\n\\n\ud83d\udd39 Je suis content que tu poses enfin la question! C'est pas comme si je t'avais tendu la perche plus d'une fois... C'est la joie, le bonheur, la r\xe9ponse ultime au sens de la vie, c'est tout \xe7a!\\nNon, je rigole. En fait, c'est une fa\xe7on de mettre les tests au centre de ce que tu fais. On a parl\xe9 de tous les points positifs de faire des tests unitaires et aussi du fait qu'on les perdait si on faisait les tests \xe0 la fin sans forc\xe9ment aller dans le d\xe9tail.\\nEn fait, la meilleure fa\xe7on de b\xe9n\xe9ficier des avantages des tests, c'est de les faire en premier mais ce n'est pas que \xe7a. Ce n'est pas d'abord faire tous les tests puis ensuite faire l'impl\xe9mentation.\\nNon, il y vraiment un aspect it\xe9ratif que l'on retrouve d'ailleurs dans l'Agilit\xe9. Tu y vas \xe9tape par \xe9tape (_baby steps_), tu ajoutes de nouveaux _behaviors_ en garantissant que ceux pr\xe9c\xe9demment ajout\xe9s fonctionnent toujours. Le filet de s\xe9curit\xe9 s'agrandit petit \xe0 petit naturellement.\\nOn peut pr\xe9senter cela diff\xe9remment: imaginons une \xe9chelle. Cela sera toujours plus facile de la monter marche par marche que de les monter trois par trois.\\n\\nJ'ajouterais que contrairement aux id\xe9es re\xe7ues, TDD ne rend pas la dur\xe9e de d\xe9veloppement plus longue, bien au contraire. Par exemple, il n'est pas n\xe9cessaire d'ex\xe9cuter la solution pour savoir que le code fonctionne car il a enti\xe8rement \xe9t\xe9 d\xe9velopp\xe9 sur base de tests.\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: '/img/test-driven-development.png',\\n\\t\\talt: 'Cycle du TDD',\\n\\t\\ttype: 'image',\\n\\t\\tstyle: { border: '.5em solid black' },\\n\\t}}>\\n\\tLe cycle de d\xe9veloppement sous TDD\\n</Figure>\\n\\nLa premi\xe8re \xe9tape, c'est l'\xe9criture d'**un** test unitaire. Normalement, ce test doit _obligatoirement_ \xe9chouer puisqu'aucune impl\xe9mentation n'a \xe9t\xe9 \xe9crite pour qu'il r\xe9ussise.\\nL'\xe9tape suivante, c'est donc d'\xe9crire le code qui permet de faire passer le test au vert. Et l\xe0, c'est tr\xe8s important de savoir que ce passage de rouge vers le vert doit \xeatre **le plus court possible**. C'est le moment o\xf9 on \xe0 le droit d'\xe9crire du code \\\"moche\\\", d'_hardcoder_ un r\xe9sultat, de dupliquer, de coller une r\xe9ponse de StackOverflow, etc. Cela peut para\xeetre bizarre au d\xe9but mais il y a un vrai int\xe9r\xeat: v\xe9rifier que l'ajout d'un nouveau _behavior_ est possible sans casser tout ce qui a \xe9t\xe9 fait auparavant.\\nL'\xe9tape suivante, c'est le refactoring. On a fait un code horrible, il faut maintenant faire quelque chose de propre. J'ai parl\xe9 plus t\xf4t de refactoring plus simple et s\xe9curis\xe9: on y est! On a notre _green light_ et le _behavior_ est garanti tant que cette _light_ reste _green_. On a notre _fast feedback loop_ \xe0 port\xe9e de main (ou de clic, ou de raccourci) pour savoir si tout est ok. Tu me suis?\\nEnsuite, on atteint la fin du cycle. Cela veut dire une chose: on recommence.\\n\\n\ud83d\udd38 Je vais fournir un petit exemple pour que tout le monde se situe! Je vais faire \xe7a avec un calculateur de longueur de cha\xeene de caract\xe8res tiens, c'est simple \xe0 r\xe9aliser.\\nDonc, je commence par \xe9crire le test unitaire:\\n\\n```csharp title='tests/StringCalculatorTests.cs'\\n[TestClass]\\npublic class StringCalculatorTests\\n{\\n\\t[TestMethod]\\n\\tpublic int Length_ShouldReturn_CorrectLength()\\n\\t{\\n\\t\\tStringCalculator calculator = new();\\n\\n\\t\\tint result = calculator.Length(\\\"string\\\"); // \\\"string\\\" fait 6 caract\xe8res de long, non?\\n\\n\\t\\tAssert.AreEqual(expected: 6, actual: result);\\n\\t}\\n}\\n```\\n\\nLe test \xe9choue parce que je n'ai pas encore cr\xe9\xe9 la classe `StringCalculator`. Prochaine \xe9tape!\\n\\n```csharp title='src/StringCalculator.cs'\\npublic class StringCalculator\\n{\\n\\tpublic int Length (string str)\\n\\t{\\n\\t\\treturn 6;\\n\\t}\\n}\\n```\\n\\nIci, nous sommes donc \xe0 l'\xe9tape verte. On doit donc passer \xe0 l'\xe9tape bleue.\\n\\n\ud83d\udd39 J'ajouterais que ton code est super moche vu que tu as _hardcod\xe9_ la valeur. Mais c'est bien! C'est le but!\\n\\n\ud83d\udd38 La plus longue: r\xe9aliser un refactoring du code qui nous permet de r\xe9pondre au besoin demand\xe9 (calculer la longueur d'une cha\xeene de caract\xe8res) tout en ne cassant pas le test:\\n\\n```csharp title='src/StringCalculator.cs'\\npublic class StringCalculator\\n{\\n\\tpublic int Length (string str)\\n\\t{\\n\\t\\treturn str.Length; // la mani\xe8re la plus propre de renvoyer la longueur d'une cha\xeene de caract\xe8res en C#\\n\\t}\\n}\\n```\\n\\nEt voil\xe0! Nous pouvons commencer l'\xe9criture d'un nouveau test unitaire.\\n\\n\ud83d\udd39 C'est un exemple assez simple mais tu y es. Il faut bien noter qu'il y a tout de m\xeame des r\xe8gles \xe0 respecter avec TDD mais je pourrais en parler pendant des heures alors on va s'arr\xeater ici!\\n\\n<AnchoredP id='what-is-tcr'>\\n\\t\ud83d\udd38 D'accord! D'ailleurs, j'ai ou\xefe dire que t'as r\xe9cemment appris le{' '}\\n\\t<span style={{ fontStyle: 'italic' }}>\\n\\t\\tTest &amp;&amp; Commit || Revert\\n\\t</span>{' '}\\n\\t(TCR). Tu sais expliquer en quoi \xe7a consiste?\\n</AnchoredP>\\n\\n\ud83d\udd39 Exact, j'ai eu la chance de prendre connaissance de cette pratique via un _workshop_. Pour sch\xe9matiser, disons que c'est une vision extr\xeame de TDD. Le meilleur moyen de l'utiliser est avec un script s\xe9par\xe9.\\nCe script va analyser ta solution \xe0 chaque sauvegarde et va ensuite ex\xe9cuter tous tes tests. Si tous tes tests sont vert, il cr\xe9e un commit qui repr\xe9sente un \xe9tat stable de ta branche (Test &amp;&amp; Commit).\\nSi tu as un seul test qui ne passe plus, il fait un rollback pour revenir \xe0 l'\xe9tat du dernier commit (Revert), qui lui est stable.\\nCela te force \xe0 avancer en _baby steps_ et une chose est mise en \xe9vidence: c'est ton dernier changement qui a cass\xe9 quelque chose.\\n\\nAu d\xe9but, tu passes par une phase de frustration parce que tu peux perdre du code mais justement, cela t'incite \xe0 avancer petit \xe0 petit pour limiter tes pertes. Plus tes _steps_ sont petites, moins tu risques de perdre du code. C'est un super enseignement en compl\xe9ment de TDD.\\nLosque tu deviens relativement \xe0 l'aise avec tout \xe7a, tu remarques que tu avances de plus en plus vite et surtout, tu as toujours une branche qui fonctionne.\\n\\n<AnchoredH2 id='conclusion'>Conclusion</AnchoredH2>\\n\\n<AnchoredP>\ud83d\udd38 Un dernier mot pour cl\xf4turer cette interview?</AnchoredP>\\n\\n\ud83d\udd39 \\\"Victoriae mundis et mundis lacrima\\\", ca ne veut absolument rien dire mais je trouve que c'est assez dans le ton.\\nPlus s\xe9rieusement, \xe7a fait d\xe9j\xe0 un moment qu'on discute mais on a seulement gratt\xe9 la surface. Il reste beaucoup de points \xe0 aborder sur le testing. Je conseillerais donc vivement aux lecteurs d'\xeatre curieux sur le sujet, de lire et surtout de pratiquer. N'h\xe9sitez pas \xe0 demander de l'aide autour de vous.\\nEt sinon, le testing, \xe7a vous tente?\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: '/img/developers-deliver-working-solutions.jpg',\\n\\t\\talt: 'Developers deliver working solutions, not testable code',\\n\\t\\ttype: 'image',\\n\\t\\tstyle: { width: '50%', border: '.1em grey solid' },\\n\\t}}\\n/>\\n\\n<Newsletter url={MAILCHIMP_URL} />\\n\\nexport const toc = [\\n\\t{ value: 'Pr\xe9sentation', id: 'presentation', level: 2 },\\n\\t{ value: 'Le sujet', id: 'topic', level: 2 },\\n\\t\\t{ value: 'Premi\xe8re rencontre', id: 'first-encounter', level: 3 },\\n\\t\\t{ value: \\\"Qu'est-ce que c'est\\\", id: 'what-is-it', level: 3 },\\n\\t\\t{ value: 'O\xf9 \xe7a se situe dans la \\\"hi\xe9rarchie des tests\\\"', id: 'hierarchy-position', level: 3 },\\n\\t\\t{ value: 'But du testing unitaire', id: 'objective', level: 3 },\\n\\t\\t{ value: 'Avantages et inconv\xe9nients', id: 'pros-and-cons', level: 3 },\\n\\t\\t{ value: 'Test Coverage', id: 'test-coverage', level: 3 },\\n\\t\\t{ value: 'Le co\xfbt', id: 'cost', level: 3 },\\n\\t{ value: 'Plus en d\xe9tails', id: 'details', level: 2 },\\n\\t\\t{ value: 'Black box &amp; white box, k\xe9sako', id: 'black-and-white-boxes', level: 3 },\\n\\t\\t{ value: 'Comment en \xe9crire efficacement', id: 'how-to-write', level: 3 },\\n\\t\\t{ value: 'Tips pour se lancer', id: 'tips-to-start', level: 3 },\\n\\t\\t{ value: 'Les \\\"Bad Smells\\\"', id: 'bad-smells', level: 3 },\\n\\t{ value: 'Pour aller plus loin', id: 'more-stuff', level: 2 },\\n\\t\\t{ value: \\\"Librairies facilitant l'impl\xe9mentation\\\", id: 'libraries', level: 3 },\\n\\t\\t{ value: 'Le Test Driven Development', id: 'what-is-tdd', level: 3 },\\n\\t\\t{ value: 'Le Test &amp;&amp; Commit || Revert ', id: 'what-is-tcr', level: 3 },\\n\\t{ value: 'Conclusion', id: 'conclusion', level: 2 }\\n];\"},{\"id\":\"what-is-a-container\",\"metadata\":{\"permalink\":\"/fr/blog/what-is-a-container\",\"editUrl\":\"https://github.com/hunteroi/tinaeldevresse.eu/tree/master/blog/2021-06-01-what-is-a-container.mdx\",\"source\":\"@site/i18n/fr/docusaurus-plugin-content-blog/2021-06-01-what-is-a-container.mdx\",\"title\":\"Qu'est-ce qu'un conteneur?\",\"description\":\"Salut tout le monde! Aujourd'hui, on va parler de deux choses&#58; 1. la derni\xe8re mise \xe0 jour de la librairie Docusaurus qui me permet d\xe9sormais d..\",\"date\":\"2021-06-01T00:00:00.000Z\",\"formattedDate\":\"1 juin 2021\",\"tags\":[{\"label\":\"conteneur\",\"permalink\":\"/fr/blog/tags/conteneur\"},{\"label\":\"docker\",\"permalink\":\"/fr/blog/tags/docker\"},{\"label\":\"docusaurus\",\"permalink\":\"/fr/blog/tags/docusaurus\"},{\"label\":\"i18n\",\"permalink\":\"/fr/blog/tags/i-18-n\"}],\"readingTime\":6.685,\"hasTruncateMarker\":true,\"authors\":[],\"frontMatter\":{\"slug\":\"what-is-a-container\",\"title\":\"Qu'est-ce qu'un conteneur?\",\"tags\":[\"conteneur\",\"docker\",\"docusaurus\",\"i18n\"],\"description\":\"Salut tout le monde! Aujourd'hui, on va parler de deux choses&#58; 1. la derni\xe8re mise \xe0 jour de la librairie Docusaurus qui me permet d\xe9sormais d..\",\"image\":\"img/what-is-a-container.jpg\"},\"prevItem\":{\"title\":\"Les tests unitaires\",\"permalink\":\"/fr/blog/unit-testing\"},\"nextItem\":{\"title\":\"Environnements de d\xe9ploiement\",\"permalink\":\"/fr/blog/deployment-environments\"}},\"content\":\"import Figure from '../../../src/components/Figure';\\nimport SEO from '../../../src/components/SEO';\\nimport Reminder from '../../../src/components/Reminder';\\nimport Newsletter from '../../../src/components/Newsletter';\\nimport { MAILCHIMP_URL } from '../../../website_config.json';\\n\\n<a href='/blog/what-is-a-container'>\\n\\t<Figure\\n\\t\\tdata={{\\n\\t\\t\\tsrc: '/img/what-is-a-container.jpg',\\n\\t\\t\\talt: 'What is a Container',\\n\\t\\t\\ttype: 'image',\\n\\t\\t}}\\n\\t/>\\n</a>\\n\\nSalut! Aujourd'hui, on va parler de deux choses:\\n\\n1. la derni\xe8re mise \xe0 jour de la librairie Docusaurus qui me permet d\xe9sormais de te fournir mon blog en deux langues!\\n2. les conteneurs et leur utilit\xe9 dans le cadre du d\xe9veloppement d'applications.\\n\\n\x3c!--truncate--\x3e\\n\\n<SEO\\n\\turi='blog/what-is-a-container'\\n\\timage='img/what-is-a-container.jpg'\\n\\ttype='article'\\n/>\\n\\n---\\n\\n<Reminder />\\n\\n---\\n\\n## Docusaurus\\n\\n### Qu'est-ce que c'est?\\n\\n[Docusaurus](https://docusaurus.io), c'est un g\xe9n\xe9rateur de sites web optimis\xe9s open-source qui embarque plusieurs fonctionnalit\xe9s int\xe9ressantes pour les cr\xe9ateurs de contenu en ligne:\\n\\n- documentation et articles de blog en [Markdown](https://www.markdownguide.org/getting-started/) ;\\n- multi-linguisme ;\\n- versionage ;\\n- recherche de contenu fortement d\xe9velopp\xe9e (gr\xe2ce \xe0 une int\xe9gration d'[Algolia](https://www.algolia.com/)).\\n\\n### Pourquoi Docusaurus?\\n\\nEn effet, la question peut se poser. Pourquoi Docusaurus alors qu'il existe d'autres g\xe9n\xe9rateurs de sites comme Wix, Shopify, Weebly, ... ou plus ax\xe9s d\xe9veloppeur comme Next.js, Hugo, Gatsby, etc.\\n\\nJe suis tomb\xe9 sur Docusaurus par pur hasard en cherchant un g\xe9n\xe9rateur de documentations sp\xe9cifique \xe0 .NET ([Docfx](https://dotnet.github.io/docfx/) d'ailleurs, si \xe7a t'int\xe9resse).\\nCependant, j'ai personnellement choisi Docusaurus pour mes projets personnels pour 3 raisons: il est...\\n\\n- [open-source](https://github.com/facebook/docusaurus) (ce qui signifie que je peux y contribuer, consulter son code source, etc.),\\n- d\xe9velopp\xe9 en React (j'aime beaucoup de cette librairie),\\n- facilement utilisable (en 2-3 minutes, tu peux avoir un site fonctionnel et personnalis\xe9).\\n\\n### Ce site web est g\xe9n\xe9r\xe9 avec Docusaurus\\n\\nSi tu ne l'as pas encore remarqu\xe9, ce site web est g\xe9n\xe9r\xe9 avec Docusaurus. Tu peux d'ailleurs retrouver les sources sur [Github](https://github.com/hunteroi/tinaeldevresse.eu).\\nSi tu vois une faute, n'h\xe9sitez pas \xe0 le mentionner en ouvrant une issue!\\n\\nPassons au sujet principal maintenant! Notre introduction aux conteneurs (ou _containers_ en anglais).\\n\\n## Les conteneurs\\n\\n### De quoi parle-t-on?\\n\\nUn des probl\xe8mes dans le d\xe9veloppement, c'est qu'on est fortement li\xe9s \xe0 la machine sur laquelle tourne notre produit.\\nQue cela soit en plein d\xe9veloppement, ou quand il s'agit de distribuer un service web \xe0 des clients, il y a toujours une machine quelque part.\\nEt le soucis principal, c'est que les syst\xe8mes et leurs configurations diff\xe8rent..!\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: '/img/it-works-on-my-machine.jpg',\\n\\t\\talt: 'It Works On My Machine - meme',\\n\\t\\ttype: 'image',\\n\\t}}\\n/>\\n\\nTu l'auras compris. Un conteneur, c'est une unit\xe9 logiciel qui embarque du code et toutes ses d\xe9pendances afin de faire tourner une application d'un environnement \xe0 l'autre de mani\xe8re rapide et fiable.\\nC'est comme si, finalement, tu envoyais ton propre ordinateur au client.\\n\\n### Quelles diff\xe9rences avec une Machine Virtuelle?\\n\\nIl est vrai que les conteneurs sont souvent compar\xe9s aux machines virtuelles (en anglais, _virtual machine (VM)_) en \xe7a qu'ils ont tous deux le m\xeame but: faire tourner une application dans un environnement embarqu\xe9.\\nLa grosse diff\xe9rence entre les 2, c'est qu'un conteneur fait appel au syst\xe8me d'exploitation (en anglais, _operating system (OS)_) du serveur h\xf4te tandis qu'une VM h\xe9berge son propre OS.\\n\\nEn fait, une machine avec Docker install\xe9e apporte les avantages suivants:\\n\\n- l\xe9g\xe8ret\xe9 et rapidit\xe9,\\n- portabilit\xe9 et standardisation, donc multi-plateforme (dans une certaine mesure).\\n\\nEn r\xe9alit\xe9, c'est compr\xe9hensible. Regardons de plus pr\xe8s \xe0 ce sch\xe9ma:\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: '/img/container_against_VM.png',\\n\\t\\talt: 'Container VS Virtual Machine',\\n\\t\\ttype: 'image',\\n\\t}}\\n/>\\n\\nCe sch\xe9ma est une comparaison d'une machine avec Docker install\xe9 et d'une machine qui instancie et g\xe8re des VMs.\\nGr\xe2ce \xe0 mon extraordinaire talent de dessinateur, on peut vite comprendre pourquoi Docker propose l\xe9g\xe8ret\xe9 et rapidit\xe9 comme atout: Docker se base sur l'OS install\xe9 et r\xe9utilise les binaires.\\nCela signifie que la machine n'a plus qu'\xe0 charger les conteneurs qui embarquent le code, les variables d'environnement, etc. (donc peu de choses lourdes \xe0 proprement parler).\\n\\nA contrario, un syst\xe8me qui se base sur les VMs poss\xe8de un hyperviseur, qui va g\xe9rer les diff\xe9rentes VMs. Cet hyperviseur se base en effet sur l'OS de la machine h\xf4te.\\nCependant, chaque VM embarque elle-m\xeame son propre OS et ses binaires.\\n\\nEn conclusion donc, on peut avoir une machine qui fait facilement tourner 500 conteneurs avec un seul OS.\\nMais ce ne sera pas la m\xeame histoire si on doit faire tourner 500 VMs... M\xeame si, en r\xe9alit\xe9, il reste complexe de g\xe9rer de fa\xe7on efficiente plusieurs conteneurs en simultan\xe9.\\n\\nPourtant, la force de Docker peut \xe9galement se r\xe9v\xe9ler une faiblesse : il n'est pas possible de faire tourner un conteneur qui d\xe9pend de Windows sur une machine Linux (et invers\xe9ment).\\n\\nUn autre probl\xe8me important qui se pose lors de l'utilisation de Docker est \xe9videmment la s\xe9curit\xe9!\\nLes conteneurs ont beau \xeatre isol\xe9s... si un seul est compromis, il est fort \xe0 pari\xe9 que l'enti\xe8ret\xe9 de la machine (et donc tous les autres conteneurs) repr\xe9sente un risque.\\n\\n### Comment \xe7a fonctionne?\\n\\nJe vais poser les bases, histoire qu'on parle avec le langage. On va parler de Docker sp\xe9cifiquement.\\nIl se compose de 3 parties distinctes:\\n\\n1. le logiciel, appel\xe9 Docker daemon, est un processus qui g\xe8re les conteneurs Docker et les objets en r\xe9sultant (ex: Docker Engine, ...)\\n2. les objets, divis\xe9s eux-m\xeames en 3 cat\xe9gories, sont des entit\xe9s qui permettent de construire une application dans Docker:\\n   - un **conteneur** est un environnement standardis\xe9 qui contient les applications.\\n   - une **image** est un mod\xe8le en lecture seule qui permet de g\xe9n\xe9rer un conteneur. On peut donc dire que l'instance d'une image est un conteneur.\\n   - un **service** est un syst\xe8me qui permet d'orchestrer les op\xe9rations de plusieurs conteneurs g\xe9r\xe9s par plusieurs daemons. \xc7a porte aussi le nom de _Swarm_ (un ensemble de Docker daemons qui communiquent entre eux gr\xe2ce \xe0 Docker - ex: Docker Swarm, Kubernetes, ...).\\n3. les registres sont des entrep\xf4ts pour les images Docker (ex: Docker Hub, Google Cloud Platform, ...)\\n\\nPour cr\xe9er un conteneur, il faut respecter quelques principes:\\n\\n- un conteneur ne contient qu'un seul processus ;\\n- un conteneur est immutable (\xe7a signife qu'avec les m\xeames variables d'environnement, le conteneur tournera le _m\xeame processus_) ;\\n- un conteneur est disposable (\xe7a signifie qu'on peut le supprimer, le remplacer, etc. comme on veut).\\n\\nCes 3 principes ne sont que les plus importants selon moi, mais tu trouveras la m\xe9thodologie compl\xe8te sur le site [\\\"The Twelve Factors\\\"](https://12factor.net/).\\n\\nUne fois une image r\xe9cup\xe9r\xe9e depuis un registre ou construite localement, tu peux cr\xe9er un conteneur. Je te le montrerais bien, mais comme je ne r\xe9invente pas la roue, tu trouveras une petite vid\xe9o qui explique pas mal ces principes-ci!\\n\\n<Figure\\n\\tdata={{\\n\\t\\ttype: 'html',\\n\\t\\twidth: '560',\\n\\t\\theight: '315',\\n\\t\\tsrc: 'https://www.youtube.com/embed/iqqDU2crIEQ',\\n\\t\\ttitle: 'YouTube video player of Docker tutorial',\\n\\t\\tallow:\\n\\t\\t\\t'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',\\n\\t\\tallowFullScreen: true,\\n\\t}}\\n/>\\n\\n### Pourquoi utiliser Docker ou ses concurrents?\\n\\nLe principe de conteneurisation am\xe8ne diff\xe9rents avantages consid\xe9rables. En voici une petite liste non-exhaustive:\\n\\n- embarquement de nouvelles ressources humaines plus rapide et facile ;\\n- certitude de travailler dans le m\xeame environnement que ses coll\xe8gues (m\xeame version des outils notamment) ;\\n- application du principe \\\"Do Not Reinvent The Wheel\\\" puisqu'un acc\xe8s aux images open-source est possible ;\\n- plus grande rapidit\xe9 de compilation et de destruction en comparaison \xe0 une VM ;\\n- environnement coh\xe9rent et isolation ;\\n- grande compatibilit\xe9 (l'OS de la machine de dev importe peu, donc tout le monde peut travailler sur son poste pr\xe9f\xe9r\xe9).\\n\\nConteneuriser ses applications est de plus en plus courant. On peut d'ailleurs trouver une raison \xe0 cette \xe9volution dans la croissance que subit le mouvement [DevOps](https://fr.wikipedia.org/wiki/Devops).\\n\\n## Conclusion\\n\\nSi tu n'as de cesse d'avoir des probl\xe8mes de configuration d'environnement, que tu dois toujours attendre au moins 1 semaine pour d\xe9ployer un test dans un environnement client, que c'est toujours compliqu\xe9 d'embarquer de nouveaux coll\xe8gues sur un projet... alors consid\xe8re peut-\xeatre l'emploi de conteneurs dans ton quotidien.\\nCela dit, je t'avoue que nous n'avons que gratter la surface des possibilit\xe9s qu'offre Docker. Je te conseille vivement de continuer \xe0 te documenter.\\n\\nEt si tu cherches \xe0 g\xe9n\xe9rer de la documentation en ligne ou \xe0 \xe9crire un blog, tu peux aussi essayer Docusaurus! \ud83d\ude01\\n\\n<Newsletter url={MAILCHIMP_URL} />\"},{\"id\":\"deployment-environments\",\"metadata\":{\"permalink\":\"/fr/blog/deployment-environments\",\"editUrl\":\"https://github.com/hunteroi/tinaeldevresse.eu/tree/master/blog/2021-01-01-deployment-environments.mdx\",\"source\":\"@site/i18n/fr/docusaurus-plugin-content-blog/2021-01-01-deployment-environments.mdx\",\"title\":\"Environnements de d\xe9ploiement\",\"description\":\"Aux \xe9tudes, les professeurs se focalisent souvent sur les langages, l'algorithmique et le \\\"code propre\\\". Les environnements de d\xe9ploiement, c'est une des choses que les \xe9tudiants IT n''apprennent pas durant leurs \xe9tudes. \xc0 mon avi...\",\"date\":\"2021-01-01T00:00:00.000Z\",\"formattedDate\":\"1 janvier 2021\",\"tags\":[{\"label\":\"d\xe9ployement\",\"permalink\":\"/fr/blog/tags/deployement\"},{\"label\":\"environnement\",\"permalink\":\"/fr/blog/tags/environnement\"},{\"label\":\"environnement d'application\",\"permalink\":\"/fr/blog/tags/environnement-dapplication\"},{\"label\":\"environnement de pipeline\",\"permalink\":\"/fr/blog/tags/environnement-de-pipeline\"},{\"label\":\"CI/CD\",\"permalink\":\"/fr/blog/tags/ci-cd\"}],\"readingTime\":8.875,\"hasTruncateMarker\":true,\"authors\":[],\"frontMatter\":{\"slug\":\"deployment-environments\",\"title\":\"Environnements de d\xe9ploiement\",\"tags\":[\"d\xe9ployement\",\"environnement\",\"environnement d'application\",\"environnement de pipeline\",\"CI/CD\"],\"description\":\"Aux \xe9tudes, les professeurs se focalisent souvent sur les langages, l'algorithmique et le \\\"code propre\\\". Les environnements de d\xe9ploiement, c'est une des choses que les \xe9tudiants IT n''apprennent pas durant leurs \xe9tudes. \xc0 mon avi...\",\"image\":\"img/deployment-environments.png\"},\"prevItem\":{\"title\":\"Qu'est-ce qu'un conteneur?\",\"permalink\":\"/fr/blog/what-is-a-container\"},\"nextItem\":{\"title\":\"Qu'est-ce qui fait un bon d\xe9veloppeur?\",\"permalink\":\"/fr/blog/what-makes-a-good-developer\"}},\"content\":\"import Figure from '../../../src/components/Figure';\\nimport SEO from '../../../src/components/SEO';\\nimport Reminder from '../../../src/components/Reminder';\\nimport Newsletter from '../../../src/components/Newsletter';\\nimport { MAILCHIMP_URL } from '../../../website_config.json';\\n\\n<a href='/blog/deployment-environments'>\\n\\t<Figure\\n\\t\\tdata={{\\n\\t\\t\\tsrc: '/img/deployment-environments.png',\\n\\t\\t\\talt: 'Deployment Environments',\\n\\t\\t\\ttype: 'image',\\n\\t\\t}}\\n\\t/>\\n</a>\\n\\nAux \xe9tudes, les professeurs se focalisent souvent sur les langages, l'algorithmique et le \\\"code propre\\\". Les environnements de d\xe9ploiement, c'est une des choses que les \xe9tudiants IT n'apprennent pas durant leurs \xe9tudes.\\n\xc0 mon avis, c'est une connaissance importante \xe0 poss\xe9der quand on commence \xe0 travailler pour de plus grosses entreprises comme elles tendent \xe0 ajouter plusieurs couches \xe0 leur pipeline.\\n\\n\x3c!--truncate--\x3e\\n\\n<SEO\\n\\turi='blog/deployment-environments'\\n\\timage='/img/deployment-environments.png'\\n\\ttype='article'\\n/>\\n\\n---\\n\\n<Reminder />\\n\\n---\\n\\nCet article est plus pr\xe9cis et cible un certain type de personnes. J'esp\xe8re que tu le trouveras int\xe9ressant! J'ai h\xe2te de lire ton opinion sur les r\xe9seaux sociaux.\\n\\n## Qu'est-ce qu'un environnement de d\xe9ploiement?\\n\\nSi tu es ici, c'est probablement parce que tu te demandes ce qu'est un environnement de d\xe9ploiement (\xe0 ne pas confondre avec un environnement de d\xe9veloppement qui est un sujet totalement diff\xe9rent).\\n**Un environnement dans le monde du d\xe9ploiement d'application est \\\"un syst\xe8me informatique dans lequel un programme ou un composant applicatif est d\xe9ploy\xe9 et ex\xe9cut\xe9\\\".**\\nC'est d'ailleurs pas moi qui le dis, mais bien [Wikip\xe9dia](<https://fr.wikipedia.org/wiki/Environnement_(informatique)>). Et cette d\xe9finition est plut\xf4t pas mal, je dois dire.\\n\\nComme les syst\xe8mes applicatifs, les processus de d\xe9veloppement et les ressources informatiques tendent \xe0 \xeatre plus distribu\xe9s, ils deviennent \xe9galement beaucoup plus complexes et sp\xe9cialis\xe9s.\\nQuand tu travailles sur un projet, tu vas typiquement \xe0 travers un _cycle_ de d\xe9veloppement, de testing et de release ; cycle qui \xe9volue souvent sur diff\xe9rentes plateformes avec des ressources diff\xe9rentes et une complexit\xe9 croissante.\\nC'est ce qu'on appelle le \\\"release management\\\". Ce processus permet de d\xe9ployer, testing et de faire marche arri\xe8re si n\xe9cessaire (c'est-\xe0-dire \\\"retirer une version nouvellement d\xe9ploy\xe9e\\\").\\n\\nPour la compr\xe9hension du reste de la publication, je vais bri\xe8vement expliquer les diff\xe9rentes \xe9tapes du d\xe9veloppement qu'une application traverse. Permets-moi donc de te pr\xe9senter les \xe9tapes communes:\\n\\n1. Analyse le probl\xe8me et r\xe9fl\xe9chis \xe0 une solution num\xe9rique.\\n2. [Pas mal de trucs de marketing impliquant de la validation, des \xe9tudes de march\xe9, etc.]\\n3. Design l'application.\\n4. Impl\xe9mente-la (d\xe9veloppement des fonctionnalit\xe9s qui r\xe8glent le probl\xe8me/ajoutent de la valeur \xe0 un produit existant).\\n5. Teste ton impl\xe9mentation.\\n6. **D\xe9ploie-la** (l'article d'aujourd'hui pointe particuli\xe8rement cette \xe9tape).\\n7. Maintiens-la/corrige ses bugs.\\n\\n## Pourquoi d\xe9ployer peut \xeatre difficile?\\n\\nTu sais, quand on travaille en IT, on r\xe9p\xe8te souvent ce cycle des \xe9tapes 3 \xe0 7 (plus ou moins).\\nCe qui est important \xe0 comprendre, c'est que l'on d\xe9ploie habituellement des versions diff\xe9rentes d'une application sur des machines diff\xe9rentes, \xe0 des \xe9tapes diff\xe9rentes du processus de d\xe9veloppement et en suivant des r\xe8gles diff\xe9rentes.\\nQuand tu commences le d\xe9veloppement d'une applicaiton, tu connais d\xe9j\xe0 ton process management (enfin j'esp\xe8re aha!). Et dans beaucoup de cas, tu vas utiliser la [m\xe9thodologie Agile](https://fr.wikipedia.org/wiki/M%C3%A9thode_agile).\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: 'https://www.marketing91.com/wp-content/uploads/2020/06/Introduction-to-Agile-Methodology.jpg',\\n\\t\\talt: 'Processus Agile',\\n\\t\\ttype: 'image',\\n\\t}}\\n>\\n\\tFait par{' '}\\n\\t<a href='https://www.shutterstock.com/g/Tartila' target='_blank'>\\n\\t\\tTartila\\n\\t</a>\\n</Figure>\\n\\nJ'aimerais mettre une remarque sur le fait que le cycle en cache un autre quand tu es dans le m\xe9tier: tu dois d\xe9placer diff\xe9rentes versions d'une application d'environnements en environnements. Mais un environnement, c'est pas juste une machine sur laquelle ton application tourne! \xc7a signifie souvent aussi des donn\xe9es diff\xe9rentes, des limites diff\xe9rentes, des buts diff\xe9rents, des processus diff\xe9rents, et plein d'autres trucs avec l'adjectif \\\"diff\xe9rent\\\".\\nEn gros, pendant que ton application mature \xe0 une certaine \xe9tape (appellons \xe7a la version la plus jeune), tu as d'autres versions plus anciennes qui doivent bouger. Si ton entreprise n'a pas de sysadmins ou que tu travailles avec le Cloud, le d\xe9veloppeur doit g\xe9rer les d\xe9ploiements et les possibles rollbacks (sans oublier de rappeler qu'on ne fait pas juste que d\xe9placer l'app).\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: '/img/small-fix.jpg',\\n\\t\\talt: 'Ne d\xe9ploie jamais un vendredi',\\n\\t\\ttype: 'image',\\n\\t}}\\n/>\\n\\nM\xeame si je sais que tu peux maintenant comprendre \xf4 combien \xe7a peut devenir complexe, je me permets de mentionner qu'il existe des outils d'automation pour faciliter notre travail (et Dieu merci!).\\n\\n## Les diff\xe9rentes types d'environnement\\n\\nChaque organisation a sa propre mani\xe8re de s'arranger sur ce sujet, et habituellement c'est m\xeame pr\xe9cis\xe9 par projet car tous les logiciels ne se basent pas sur les m\xeames besoins.\\n\\nVoici les quelques environnements standards que tu pourrais rencontrer:\\n\\n| Nom               | Utilit\xe9 par                 | Donn\xe9es                          |\\n| ----------------- | --------------------------- | -------------------------------- |\\n| Local             | Toi                         | Pas de donn\xe9es client            |\\n| **D\xe9v**eloppement | D\xe9veloppeurs                | Pas de donn\xe9es client            |\\n| **Test**ing       | Ing\xe9nieurs QA               | Pas de donn\xe9es client            |\\n| **Staging**       | Ing\xe9nieurs QA et/ou clients | Donn\xe9es de production limit\xe9es   |\\n| **Prod**uction    | Utilisateurs finaux         | Toutes les donn\xe9es de production |\\n\\n### L'environnement local\\n\\nC'est _ton ordinateur_. Le premier endroit o\xf9 tout le travail est r\xe9alis\xe9. Il est \xe9videmment cass\xe9 80% du temps.\\n\\n#### Objectifs\\n\\n- Travailler sur tes propres t\xe2ches\\n- Voir le r\xe9sultat et faire ton petit bonhomme de chemin\\n- Lancer une premi\xe8re batterie de tests avant d'envoyer ton code \xe0 tes coll\xe8gues\\n\\n### L'environnement de d\xe9veloppement\\n\\nC'est l'endroit o\xf9 tout le travail des d\xe9veloppeurs repose. C'est acceptable qu'il soit cass\xe9 de temps \xe0 autre (bien que tu devrais l'\xe9viter si tu ne veux pas recevoir des plaintes de tes coll\xe8gues \xe0 propos de \\\"dev qui est cass\xe9\\\").\\nPersonne mis \xe0 part l'\xe9quipe de d\xe9veloppement du produit ne devrait jamais avoir acc\xe8s \xe0 cet environnement.\\n\\n#### Objectifs\\n\\n- Lancer et tester avec des donn\xe9es de d\xe9veloppement\\n- V\xe9rifier que ton code fonctionne bien avec celui des autres\\n\\n### L'environnement de test\\n\\nAussi appel\xe9 QA (pour \\\"Quality Assurance\\\"), c'est l'endroit o\xf9 tout le reste de l'entreprise entre en jeu. C'est th\xe9oriquement l'environnement qui pr\xe9c\xe8de le d\xe9ploiement de nouvelles fonctionnalit\xe9s \xe0 de vrais utilisateurs finaux.\\n\\n#### Objectifs\\n\\n- V\xe9rifier qu'il n'y a aucun probl\xe8me qui aurait pass\xe9 les tests manuels et automatiques pr\xe9c\xe9dents\\n- Prouver que des crit\xe8res sp\xe9cifiques sont remplis (en g\xe9n\xe9ral, valider le c\xf4t\xe9 technique d'une feature)\\n\\n### L'environnement de staging\\n\\nCet environnement a plusieurs noms. Les gens l'appellent \\\"pr\xe9-prod\\\" ou m\xeame \\\"User Acceptance Testing\\\" (UAT).\\nC'est en r\xe9alit\xe9 un environnement qui a pour but de simuler l'environnement de production de plusieurs mani\xe8res. Il peut \xeatre utilis\xe9 pour faire des d\xe9mos de nouvelles fonctionnalit\xe9s, demander des retours de la part d'utilisateurs tri\xe9s sur le volet pour valider le flux business de bout en bout, ou pour habituer les clients \xe0 de nouveaux changements.\\n\\n#### Objectifs\\n\\n- Emp\xeacher de d\xe9ployer des bugs en production\\n- Valider le flux commercial int\xe9gral\\n- Entrainer les clients por de nouveaux changements\\n\\n### L'environnement de production\\n\\nC'est un environnement sacr\xe9 qui ne devrait jamais casser. Les utilisateurs finaux l'utilisent. Si tu le casses, tu perds de l'argent, ok?\\n\\n#### Objectifs\\n\\n- \xcatre le dernier d\xe9positaire de tous les autres environnements\\n- Donner aux clients la solution \xe0 leur(s) probl\xe8me(s) sur un certain sujet\\n- \xcatre fiable, \\\"bug-free\\\", toujours op\xe9rationnel\\n\\n## Comment choisir sa pipeline?\\n\\nTu ne peux pas choisir al\xe9atoirement entre des pipelines grav\xe9es dans la pierre qui r\xe9pondront \xe0 tes besoins. Les pipelines sont sp\xe9cifiques construire pour r\xe9pondre aux besoins **d'un projet sp\xe9cifique**.\\nJ'ai vu pas mal de choses ici et l\xe0, et il y a beaucoup de compagnies d'h\xe9bergement comme Heroku qui offrent d'aider \xe0 la mise en place de pipelines de d\xe9ploiement.\\n\\nL'image suivante sch\xe9matise quelques pipelines dont j'ai entendu parler, avec lesquelles j'ai pu travailler ou que j'utilise m\xeame actuellement. Disons qu'elles sont les pipelines par d\xe9faut des entreprises A, B & C.\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: '/img/deployment-environments.svg',\\n\\t\\talt: 'Deployment Environments',\\n\\t\\ttype: 'img',\\n\\t}}\\n>\\n\\tSch\xe9ma des pipelines de d\xe9ploiement des compagnies A, B & C\\n</Figure>\\n\\n### Compagnie A\\n\\nCette entreprise utilise un design bien connu appel\xe9 l'approche DTAP (Development - Testing - Acceptance - Production).\\nC'est la pipeline la plus standard qui soit. Elle est souvent utilis\xe9e (pas comme telle mais largement modifi\xe9e) dans les grandes entreprises.\\n\\nCependant, le sch\xe9ma de cette entreprise a quelques particularit\xe9s que je souhaite mentionner: le nombre d'instances dans chaque environnement.\\nL'image montre que tu peux choisir d'avoir une instance unique de ton application ou plusieurs d'entre elle tournant \xe0 une \xe9tape particuli\xe8re de ton process.\\n\\n\xc9videmment, choisir entre plusieurs instances qui tournent en m\xeame temps co\xfbte plus cher et apportent autant son lot d'avantages que d'inconv\xe9nients:\\n\\n- Tu peux d\xe9ployer une fonctionnalit\xe9s sp\xe9cifique dans une instance sp\xe9cifique.\\n- \xc7a permet \xe0 l'\xe9quipe de d\xe9veloppement de travailler en plus petits groupes (ex: \xe9quipe 1 travaille sur liste 1 de fonctionnalit\xe9s dans l'instance 1 ; \xe9quipe 2 liste 2 dans instance 2; ...).\\n- C'est sympa de voir que ton instance tourne tranquillement alors que celle des autres est cass\xe9e parce qu'ils se sont embrouill\xe9s (bien qu'il ne faut pas prendre la grosse t\xeate, \xe7a t'arrivera aussi!).\\n\\n### Compagnie B & Compagnie C\\n\\nCes entreprises se sont d\xe9barass\xe9 de l'environnement de test. \xc7a arrive souvent quand tu peux te permettre de tester tes fonctions dans l'environnement de d\xe9veloppement ou dans l'environnement de staging. C'est aussi une possibilit\xe9 pour les petites \xe9quipes (moins de d\xe9ploiements \xe0 effectuer, en somme).\\n\\nLa seule diff\xe9rence entre les 2 entreprises est le nombre d'instances \xe0 chaque \xe9tape du processus. Quand tu construis un petit projet, tu utilises habituellement une pipeline identique \xe0 celle de la compagnie C car il y a moins d'\xe9tapes pour d\xe9ployer et aller d'un environnement \xe0 l'autre.\\n\\nPersonnellement, j'aime le sch\xe9ma C mais je le simplifierai mais encore un peu plus. Par exemple, je travaille sur un bot Discord ([si tu ne sais pas ce qu'est Discord, clique-ici](https://discord.com)), j'utilise:\\n\\n- mon environnement local qui tourne et qui se connecte \xe0 des ressources du Cloud (base de donn\xe9es, service web de Discord, autres services web),\\n- l'environnement dev/staging (un seul environnement ici!) d\xe9ploie et tourne la version \\\"beta\\\" du bot, et\\n- l'environnement de production h\xe9berge la version finale disponible pour les utilisateurs Discord.\\n\\nJe ne peux pas te donner une approche sacr\xe9e magique du d\xe9ploiement qui fonctionnera parfaitement pour tous tes projets car \xe7a n'existe pas.\\nTu dois cr\xe9er ton propre plan personnalis\xe9. Mais ces sch\xe9mas \\\"par d\xe9faut\\\" servent au moins de guide pour toi!\\n\\n**Et vous les gens, quelle est votre pipeline de d\xe9ploiement favorite?**\\n\\n## Conclusion\\n\\nLes environnements de d\xe9ploiement sont une grosse histoire et cet article a pour but de gentiment entrouvrir la partie vers ce monde.\\nComme le mouvement \\\"DevOps\\\" devient de plus en plus intriguant aux yeux des organisations, c'est toujours un plus de savoir des choses concernant cela.\\n\\nJ'esp\xe8re que j'ai r\xe9ussi \xe0 \xe9veiller votre curiosit\xe9 et que vous vous avancez sur ces chemins. D'ici l\xe0, on se voit plus tard!\\n\\n<Newsletter url={MAILCHIMP_URL} />\"},{\"id\":\"what-makes-a-good-developer\",\"metadata\":{\"permalink\":\"/fr/blog/what-makes-a-good-developer\",\"editUrl\":\"https://github.com/hunteroi/tinaeldevresse.eu/tree/master/blog/2020-06-01-what-makes-a-good-developer.mdx\",\"source\":\"@site/i18n/fr/docusaurus-plugin-content-blog/2020-06-01-what-makes-a-good-developer.mdx\",\"title\":\"Qu'est-ce qui fait un bon d\xe9veloppeur?\",\"description\":\"Hey! Bienvenue sur mon nouveau site web. Pour commencer, j'aimerais t'introduire \xe0 des points cl\xe9s que je trouve important pour un d\xe9velop...\",\"date\":\"2020-06-01T00:00:00.000Z\",\"formattedDate\":\"1 juin 2020\",\"tags\":[{\"label\":\"bonnes pratiques\",\"permalink\":\"/fr/blog/tags/bonnes-pratiques\"},{\"label\":\"carri\xe8re\",\"permalink\":\"/fr/blog/tags/carriere\"},{\"label\":\"technologie\",\"permalink\":\"/fr/blog/tags/technologie\"}],\"readingTime\":8.26,\"hasTruncateMarker\":true,\"authors\":[],\"frontMatter\":{\"slug\":\"what-makes-a-good-developer\",\"title\":\"Qu'est-ce qui fait un bon d\xe9veloppeur?\",\"tags\":[\"bonnes pratiques\",\"carri\xe8re\",\"technologie\"],\"description\":\"Hey! Bienvenue sur mon nouveau site web. Pour commencer, j'aimerais t'introduire \xe0 des points cl\xe9s que je trouve important pour un d\xe9velop...\",\"image\":\"img/what-makes-a-good-developer.jpg\"},\"prevItem\":{\"title\":\"Environnements de d\xe9ploiement\",\"permalink\":\"/fr/blog/deployment-environments\"}},\"content\":\"import Figure from '../../../src/components/Figure';\\nimport SEO from '../../../src/components/SEO';\\nimport Reminder from '../../../src/components/Reminder';\\nimport Newsletter from '../../../src/components/Newsletter';\\nimport { MAILCHIMP_URL } from '../../../website_config.json';\\n\\n<a href='/blog/what-makes-a-good-developer'>\\n\\t<Figure\\n\\t\\tdata={{\\n\\t\\t\\tsrc: '/img/what-makes-a-good-developer.jpg',\\n\\t\\t\\talt: \\\"Qu'est-ce qui fait un bon d\xe9veloppeur\\\",\\n\\t\\t\\ttype: 'image',\\n\\t\\t}}\\n\\t>\\n\\t\\tPhoto de{' '}\\n\\t\\t<a\\n\\t\\t\\ttarget='_blank'\\n\\t\\t\\thref='https://unsplash.com/@anniespratt'\\n\\t\\t\\trel='noreferrer noopener nofollow'\\n\\t\\t>\\n\\t\\t\\tAnnie Spratt\\n\\t\\t</a>{' '}\\n\\t\\tsur{' '}\\n\\t\\t<a\\n\\t\\t\\ttarget='_blank'\\n\\t\\t\\thref='https://unsplash.com/photos/QckxruozjRg'\\n\\t\\t\\trel='noreferrer noopener nofollow'\\n\\t\\t>\\n\\t\\t\\tUnsplash\\n\\t\\t</a>\\n\\t</Figure>\\n</a>\\n\\nHey! Bienvenue sur mon nouveau site web. Pour commencer, j'aimerais t'introduire \xe0 des points cl\xe9s que je trouve important pour un d\xe9veloppeur dans son travail quotidien!\\n\\n\x3c!--truncate--\x3e\\n\\n<SEO\\n\\turi='blog/what-makes-a-good-developer'\\n\\timage='img/what-makes-a-good-developer.jpg'\\n\\ttype='article'\\n/>\\n\\n---\\n\\n<Reminder />\\n\\n---\\n\\n## 1. R\xe9fl\xe9chis avant d'\xe9crire\\n\\nJe vois parfois de jeunes d\xe9veloppeurs directement se lancer dans la programmation de leurs applications sans m\xeame s'accorder le temps de r\xe9fl\xe9chir \xe0 celle-ci. Bien s\xfbr, c'est une m\xe9thodologie qui va fonctionner pour de petits programmes faciles apr\xe8s peu de fonctionnalit\xe9s. Mais aussit\xf4t l'application en question beaucoup plus compl\xe8te et n\xe9cessitant plusieurs couches complexes, cela devient obligatoire de tirer une chaise, s'asseoir et prendre le temps d'\xe9crire des notes, d'analyser, de dessiner des sch\xe9mas et de r\xe9aliser des recherches avant de programmer quoique ce soit.\\n\\n<Figure\\n\\tdata={{\\n\\t\\tid: '1',\\n\\t\\tsrc: 'https://giphy.com/embed/Ph6mVLp87pCVCkHOBQ',\\n\\t\\ttype: 'html',\\n\\t\\twidth: '100%',\\n\\t\\theight: '100%',\\n\\t\\ttitle: 'Looking Logan Lerman GIF By Hunters',\\n\\t\\tstyle: { position: 'absolute' },\\n\\t\\tallowFullScreen: true,\\n\\t\\tframeBorder: '0',\\n\\t\\tclassName: 'giphy-embed',\\n\\t}}\\n/>\\n\\nBeaucoup d'applications sont \xe9trangement inmaintenable d\xfb \xe0 une pauvre analyse ou un manque de recherche. Et croyez-moi, j'ai vu de nombreux projets tomber dans tous les coins \xe0 cause de \xe7a. **Attention, coll\xe8gues d\xe9veloppeurs!** Tu veux toujours r\xe9aliser le meilleur pour ton travail.\\n\\n## 2. Communique\\n\\n### 2.1. Apprendre \xe0 conna\xeetre son client\\n\\nTout ce que tu construis pour ton client doit \xeatre le r\xe9sultat d'un besoin. Pour identifier la meilleure mani\xe8re de cr\xe9er le produit qu'_ils_ veulent, tu dois apprendre \xe0 conna\xeetre ton client. Apprends ce qu'ils font, comment ils le font et pose-leur des questions sur comment ils se sentent par rapport \xe0 \xe7a. Si tu veux rendre ton client heureux, tu dois d'apprendre savoir ce qui peut le rendre heureux! :wink:\\n\\n### 2.2. Discute avec ton \xe9quipe\\n\\nC'est vrai que tu vas passer une grande partie de temps face \xe0 ton ordinateur. Mais ne sous-estime pas le c\xf4t\xe9 social de ton boulot! En tant que d\xe9veloppeur, collaborer avec son \xe9quipe est vraiment important.\\n\xc0 qui fais-tu appel quand tu as des probl\xe8mes? Comment proc\xe8des-tu quand tu d\xe9couvres un bug en production? Que fais-tu quand tu veux prendre une pause au travail? Chaque entreprise a son propre moyen de r\xe9pondre \xe0 ces situations.\\nParler avec tes coll\xe8gues t'ouvre \xe0 mieux conna\xeetre ton entreprise, tes coll\xe8gues et le contexte dans lequel tu travailles.\\n\\nCela rend aussi le d\xe9veloppement d'un projet plus facile pour tout le monde. Quand tu parles avec tes coll\xe8gues, tu garantis que vous ne vous marchez pas sur les pieds en bossant sur une m\xeame fonctionnalit\xe9 ou en faisant quelque chose qui a d\xe9j\xe0 \xe9t\xe9 r\xe9alis\xe9 auparavant.\\nPuis, c'est une bonne chose de parler avec les autres si tu as des points bloquants. Ils pourraient d\xe9j\xe0 avoir v\xe9cu \xe7a et leur exp\xe9rience est un tr\xe8s grand atout! \xcatre capable de r\xe9gler les soucis rapidement et de d\xe9ployer dans le temps allou\xe9 est un point critique dans ta carri\xe8re de d\xe9veloppeur. C'est ta responsabilit\xe9 d'\xeatre productif, d'estimer pr\xe9cis\xe9ment le temps n\xe9cessaire pour compl\xe9ter des t\xe2ches et de les terminer dans les temps.\\n\\n## 3. Suis les pratiques \xe9tablies\\n\\nCe point est quelque peu li\xe9 au pr\xe9c\xe9dent. Plus vite tu identifies les standards et les \\\"best practices\\\" utilis\xe9s au sein de ton entreprise, plus efficace tu seras \xe0 travailler en conformit\xe9 avec ce qui est attendu de toi. Parle avec ton \xe9quipe, pose des questions, v\xe9rifie toutes les choses que tu peux et accepte les conventions communes. Ce n'est pas seulement important pour le futur du projet auquel tu es assign\xe9 mais aussi pour ta propre carri\xe8re et r\xe9putation.\\n\\nCependant, n'aie pas peur de chercher des moyens pour am\xe9liorer les proc\xe9d\xe9s si tu penses que \xe7a peut am\xe9liorer la productivit\xe9 et l'efficacit\xe9 de tout le monde.\\n\\n## 4. Sois fain\xe9ant\\n\\nLe premier principe que tu devrais toujours suivre quand tu bosses, c'est d'\xeatre fain\xe9ant. Attention par contre hein, je te dis pas de rien faire toute la journ\xe9e!\\nJe dis juste que tu devrais **te focaliser sur d\xe9livrer le Minimum Viable Product (MVP) demand\xe9**. N'impl\xe9mente pas des choses qui n'ont pas \xe9t\xe9 demand\xe9es par le client parce que \\\"\xe7a sera utile un jour\\\". C'est une perte de temps. Tu vas plut\xf4t terminer avec un code inutilis\xe9 que personne ne voudra retirer parce qu'ils ne conna\xeetront pas son utilit\xe9 et que \\\"si on le retire, toute l'application tourne plus\\\". Berk.\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: 'https://i.imgur.com/qbDVKh7.png',\\n\\t\\talt: 'y a pas besoin de r\xe9inventer la roue - meme',\\n\\t\\ttype: 'image',\\n\\t}}\\n/>\\n\\n`Ne r\xe9invente pas la roue` est un bel exemple d'\xeatre fain\xe9ant. N'utilise pas ton temps \xe0 construire quelque chose que d'autres font bien mieux que toi. Utilise leur travail! Si tu as besoin de changer quelques petits trucs, tu peux toujours y revenir plus tard.\\n\\n## 5. \xc9cris du code\\n\\n### 5.1. \xc9cris du code fonctionnel propre\\n\\n\xc7a peut sembler b\xeate mais tu es pay\xe9 pour **faire marcher des choses**. Donc ne lance pas des instructions dans un fichier en esp\xe9rant que \xe7a marche correctement. Le plus t\xf4t tu fais de bonnes choses, le meilleur ton application sera.\\nNavdeep Singh a \xe9crit une histoire sur [pourquoi \xe9crire du bon code est important, et comment le faire](https://medium.com/better-programming/good-code-vs-bad-code-35624b4e91bc 'Good Code vs Bad Code'). Lis-le. C'est en anglais et c'est super int\xe9ressant!\\n\\n### 5.2. \xc9cris du code facilement maintenable et am\xe9liorable\\n\\nC'est sympa d'avoir du code fonctionnel et qui fait ce qu'on attend de lui.\\nCependant, m\xeame si ton code est compris par la machine, l'est-il des humains? \xc0 un certain moment, il y aura un.e autre qui devra se pencher sur ton code et le modifier. Et \xe7a devrait \xeatre super facile!\\n\\nPense toujours \xe0 comment ton code est \xe9vident en l'\xe9crivant. Les standards de ton entreprise et les meilleures pratiques ne vont pas t'aider \xe0 \xe9crire du code compr\xe9hensible. C'est plus ou moins la m\xeame situation quand tu expliques ton m\xe9tier \xe0 quelqu'un qui n'est pas de l'IT: **tu expliques les choses de mani\xe8re simple**.\\nGarde en t\xeate que tu \xe9cris en r\xe9alit\xe9 une partie d'une application qui sera un jour refactor\xe9e par quelqu'un d'autre. Et tu ne veux \xe9videmment pas que ces personnes te maudissent et t'appellent par tous les noms quand ils tombent sur ton code.\\n\\n### 5.3. Teste ton code\\n\\nPourquoi tester ton code? C'est vrai qu'il fonctionne super bien mais quand m\xeame. Tu ne sais pas de quoi sont capables les utilisateurs finaux...\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: 'https://i.imgur.com/mva14iu.jpg',\\n\\t\\talt: \\\"quand tu as l'occasion de voir comment les utilisateurs utilisent ton app - meme\\\",\\n\\t\\ttype: 'image',\\n\\t\\tstyle: { margin: '0 auto' },\\n\\t}}\\n/>\\n\\nJe recommande vivement aux managers de projet d'utiliser la m\xe9thodologie [**T**est-**D**riven **D**evelopment](https://medium.com/hackernoon/introduction-to-test-driven-development-tdd-61a13bc92d92) pour leurs projets.\\nLe testing dans le monde IT est \xe0 mon humble opinion l'\xe9tape la plus importante du processus. Et il y a beaucoup de raisons:\\n\\n- **\xe7a assure la qualit\xe9 du produit**: \xe7a emp\xeache d'introduire de b\xeates bugs en production;\\n- **\xe7a \xe9vite de gaspiller du temps et de l'argent**: tu peux construire des choses dont tu es s\xfbr que les changements (ex: optimisation) ne casseront pas la fonctionnalit\xe9 X alors que tu travaillais sur la fonctionnalit\xe9 Y\\n- **\xe7a aide \xe0 s\xe9curiser l'app**: \xe7a assure qu'il y a aussi peu de br\xe8ches que possible (on sait tous que le \\\"risque z\xe9ro\\\" est un mythe).\\n\\n## 6. Vois les choses dans les yeux de l'utilisateur\\n\\nL'empathie est r\xe9ellement un bonus pour les devs. Te mettre \xe0 la place du client te permet de cr\xe9er des apps facile \xe0 comprendre et utiliser.\\n\\nParle avec les UX designers si tu ressens que l'application est trop compliqu\xe9e quand son seul but est de boire une tasse de caf\xe9...\\n\\n<Figure\\n\\tdata={{\\n\\t\\tsrc: 'https://i.redd.it/fb6xxzrrtfr21.png',\\n\\t\\talt: 'UI vs UX - meme',\\n\\t\\ttype: 'image',\\n\\t}}\\n>\\n\\tDe{' '}\\n\\t<a\\n\\t\\ttarget='_blank'\\n\\t\\thref='https://www.reddit.com/r/UI_Design/comments/bblxum/ui_vs_ux/'\\n\\t\\trel='noreferrer noopener nofollow'\\n\\t>\\n\\t\\tr/UI_Design\\n\\t</a>\\n</Figure>\\n\\nC'est aussi une bonne chose d'avoir des testeurs dans ton \xe9quipe qui vont agir comme des utilisateurs finaux et v\xe9rifier que rien ne semble bizarre, ne produise de probl\xe8me, ne soit surcompliqu\xe9, etc.\\nIls jouent \xe9videmment un r\xf4le important dans le d\xe9veloppement d'un projet.\\n\\n## 7. Sois curieux et am\xe9liore tes connaissances et comp\xe9tences\\n\\nC'est la derni\xe8re partie de mon article et je voulais partager avec toi le meilleur conseil qu'on m'a un jour donn\xe9... **Sois curieux \xe0 propos de tout!** Il y a plein de choses autour de toi et chaque jour apporte son lot de nouvelles librairies, protocoles, ... Il n'y a pas assez de temps dans une vie pour tout apprendre mais \xe7a ne signifie pas que tu ne devrais pas essayer de rester \xe0 jour.\\nVoici une liste de choses que je fais personnellement pour rester \xe0 jour sur mes sujets favoris et am\xe9liorer mes connaissances et comp\xe9tences:\\n\\n- J'essaye toujours de prendre le travail challengeant et complexe au lieu d'un truc facile que j'ai d\xe9j\xe0 fait des centaines de fois.\\n\\n- Je vais \xe0 des \xe9v\xe9nements et je rencontre des gens.\\n  Le DevDay, le DevFM et d'autres nombreux \xe9v\xe9nements organis\xe9s par le [MIC Belgique](http://www.mic-belgique.be/ 'web site du MIC')...\\n\\n- Je m'implique dans des communaut\xe9s.\\n  Par exemple, je suis un membre actif de SpaceY!\\n\\n- J'essaie d'aider les gens (ex: je bosse sur des projets open-source).\\n\\nLa meilleure chose que tu peux faire est d'\xeatre proactif.ve. Sois passionn\xe9 par ton m\xe9tier comme pour tout ce qui t'apporte de la joie!\\n\\n## Conclusion\\n\\nLes d\xe9veloppeurs ne sont pas une ressource commune. Les bons d\xe9veloppeurs encore moins. Reste impliqu\xe9 et remets-toi toujours en question. Je suis convaincu que c'est ainsi qu'on apprend.\\n\\n**Et selon toi, qu'est-ce qui fait de quelqu'un un bon d\xe9veloppeur?**\\n\\n<Newsletter url={MAILCHIMP_URL} />\"}]}")}}]);